{
    "docs": [
        {
            "location": "/", 
            "text": "VersionPress Documentation\n\n\nWelcome to \nVersionPress\n documentation. VersionPress itself is intuitive to use but some things like core concepts or installation details require more attention and are described here.\n\n\n\n  \n\n  \nHello VersionPress!\n\n\n\n\n\nThese docs are divided into a couple of sections:\n\n\n\n\nGetting Started\n \u2013 brief introduction to VersionPress\n\n\nFeature Focus\n \u2013 discusses most important feature areas in more detail\n\n\nSync / Workflows\n \u2013 how VersionPress helps with multiple environments like live and staging\n\n\nRelease Notes\n \u2013 details of all releases", 
            "title": "Home"
        }, 
        {
            "location": "/#versionpress-documentation", 
            "text": "Welcome to  VersionPress  documentation. VersionPress itself is intuitive to use but some things like core concepts or installation details require more attention and are described here.  \n   \n   Hello VersionPress!   These docs are divided into a couple of sections:   Getting Started  \u2013 brief introduction to VersionPress  Feature Focus  \u2013 discusses most important feature areas in more detail  Sync / Workflows  \u2013 how VersionPress helps with multiple environments like live and staging  Release Notes  \u2013 details of all releases", 
            "title": "VersionPress Documentation"
        }, 
        {
            "location": "/en/getting-started/", 
            "text": "Getting Started\n\n\nVersionPress is a version control plugin for WordPress. It maintains a Git repository for a site, allowing similar workflows that devs are used to for standard software projects.\n\n\nVersionPress is currently a \nDeveloper Preview\n, please make sure you understand the consequences.\n\n\n\n\nUnderstand the basic concepts\n (optional but useful)\n\n\nInstall VersionPress\n\n\nUse it", 
            "title": "Getting Started Home"
        }, 
        {
            "location": "/en/getting-started/#getting-started", 
            "text": "VersionPress is a version control plugin for WordPress. It maintains a Git repository for a site, allowing similar workflows that devs are used to for standard software projects.  VersionPress is currently a  Developer Preview , please make sure you understand the consequences.   Understand the basic concepts  (optional but useful)  Install VersionPress  Use it", 
            "title": "Getting Started"
        }, 
        {
            "location": "/en/getting-started/concepts/", 
            "text": "Basic Concepts\n\n\nVersionPress brings true version control to WordPress. Version control is a fairly simple concept but if you never worked with it, this page will walk you through the basic ideas, commonly used terms, etc. \n\n\nVersion control\n\n\nVersion control simply means that \nhistoric revisions of some content are stored\n. It has many forms, from simple Undo buttons in text editors to advanced systems for managing documents but the basic principle is really that simple.\n\n\n\n  \n\n  \n\u00a9 linode from their \nvery nice intro\n\n\n\n\n\nOne interesting thing about version control is that \nits effects are usually much more valuable than one would think\n. Take Wikipedia, for example. Its content versioning is not just some boring technical thing, it completely changed the way human knowledge is gathered and shared. Another example is WordPress itself \u2013 it would be nowhere near today if its developers couldn't collaborate using an open source version control system (Subversion in their specific case).\n\n\n**VersionPress brings true version control to WordPress \nsites\n.** While historically, actions like updating plugins, removing users or something similar changed the site irreversibly (and could break it if the update was buggy), VersionPress adds a simple way to undo those changes.\n\n\nThe underlying technology is actually pretty smart and can do much more than that. For example, \nstaging\n is typically a hard thing but VersionPress makes that a breeze using the same techniques that power the Undo. It's just another example of the above: if you have solid version control many hard tasks suddenly appear simple. That's what VersionPress is about.\n\n\nCommonly used terms\n\n\nThere are some terms that you will see often both in this documentation and in the product itself. Refer to the list below if in doubt.\n\n\n\n\n\nrepository\n\n\nInternal repository of VersionPress where it keeps all the historic versions of a site. Technically, it is the `.git` folder in the root of the site and it is the most important piece of data that VersionPress manages.\n\n\n\nundo\n\n\nThe undo command reverts a single change on the site (or a set of changes when we have that implemented). Note that unlike the Undo functionality found it most text editors, VersionPress doesn't erase the history but rather creates a new change that does exactly the opposite of the original change.\n\n\n\nrollback\n\n\nReturns the site to some previous state, or, more precisely, creates a new version of the site that looks exactly like it used to at some point in the past. Rollback is essentially a set of Undo-s from the current state to the chosen past state.\n\n\n\na change\n\n\nBasically one line in the VersionPress table. Some change that happened to the site at some point in the past.\n\n\n\ncommit\n\n\nAnother, more technical word for a change in the Git terminology.\n\n\n\nentity\n\n\nFor example, a post or a comment. These are things that VersionPress tracks. We use this rather abstract term instead of e.g. a \"database row\" because not all tracked entities do necessarily need to be database rows.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/en/getting-started/concepts/#basic-concepts", 
            "text": "VersionPress brings true version control to WordPress. Version control is a fairly simple concept but if you never worked with it, this page will walk you through the basic ideas, commonly used terms, etc.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/en/getting-started/concepts/#version-control", 
            "text": "Version control simply means that  historic revisions of some content are stored . It has many forms, from simple Undo buttons in text editors to advanced systems for managing documents but the basic principle is really that simple.  \n   \n   \u00a9 linode from their  very nice intro   One interesting thing about version control is that  its effects are usually much more valuable than one would think . Take Wikipedia, for example. Its content versioning is not just some boring technical thing, it completely changed the way human knowledge is gathered and shared. Another example is WordPress itself \u2013 it would be nowhere near today if its developers couldn't collaborate using an open source version control system (Subversion in their specific case).  **VersionPress brings true version control to WordPress  sites .** While historically, actions like updating plugins, removing users or something similar changed the site irreversibly (and could break it if the update was buggy), VersionPress adds a simple way to undo those changes.  The underlying technology is actually pretty smart and can do much more than that. For example,  staging  is typically a hard thing but VersionPress makes that a breeze using the same techniques that power the Undo. It's just another example of the above: if you have solid version control many hard tasks suddenly appear simple. That's what VersionPress is about.", 
            "title": "Version control"
        }, 
        {
            "location": "/en/getting-started/concepts/#commonly-used-terms", 
            "text": "There are some terms that you will see often both in this documentation and in the product itself. Refer to the list below if in doubt.   repository  Internal repository of VersionPress where it keeps all the historic versions of a site. Technically, it is the `.git` folder in the root of the site and it is the most important piece of data that VersionPress manages.  undo  The undo command reverts a single change on the site (or a set of changes when we have that implemented). Note that unlike the Undo functionality found it most text editors, VersionPress doesn't erase the history but rather creates a new change that does exactly the opposite of the original change.  rollback  Returns the site to some previous state, or, more precisely, creates a new version of the site that looks exactly like it used to at some point in the past. Rollback is essentially a set of Undo-s from the current state to the chosen past state.  a change  Basically one line in the VersionPress table. Some change that happened to the site at some point in the past.  commit  Another, more technical word for a change in the Git terminology.  entity  For example, a post or a comment. These are things that VersionPress tracks. We use this rather abstract term instead of e.g. a \"database row\" because not all tracked entities do necessarily need to be database rows.", 
            "title": "Commonly used terms"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/", 
            "text": "Installation and Uninstallation\n\n\nVersionPress ships as a standard plugin but there are two important things to be aware of:\n\n\n\n\nVersionPress has \nstricter system requirements\n than usual\n\n\nIts \nactivation is a two-step process\n\n\n\n\nBoth things are important, please read on.\n\n\nSystem requirements\n\n\nThe server environment must match certain requirements, some of which are checked automatically on VersionPress activation. We also recommend some other setup steps below.\n\n\n\n  \n\n  \nPre-activation check performed by VersionPress\n\n\n\n\n\n\n\nImportant\n\n\nVersionPress is a lot more involved than most other WordPress plugins. Please pay attention to this section before proceeding with installation.\n\n\n\n\nMinimum system requirements are (as a general rule, \nwe recommend using the latest versions of everything\n):\n\n\n\n\nWordPress 4.8 or higher\n\n\nPHP 5.6 or higher\n\n\nGit 1.9 or higher (2.13 or newer recommended)\n\n\nApache, nginx or IIS 7+ web server\n\n\nproc_open()\n enabled\n\n\nWrite permissions in the site root and everywhere under it\n\n\nStandard WordPress configuration system (\nwp-config.php\n)\n\n\n\n\nOn top of that, if you want to use the \nmulti-instance / sync features\n of VersionPress 2.0, probably even more control over the requirement will be required. In practice, this means that a custom server / VPS is your best bet. See also the section on \nhosting providers\n.\n\n\nHere are notes on some of the requirements:\n\n\nGit\n\n\nVersionPress takes a strategic dependency on \nGit\n which provides \nmany benefits\n but also requires this tool to be installed on the server and accessible from PHP. Make sure that \nproc_open()\n is enabled on the server and that the Git installation is in the PATH (if it's not, you can tell VersionPress where to find the binary via \nConfiguration\n).\n\n\nGit \n1.9\n and newer are supported. Do not attempt to make VersionPress run with older releases (1.7 and 1.8 are still quite popular), there are known issues with them.\n\n\nSupported web servers\n\n\nWe recommend Apache or nginx (as \nWordPress itself\n) but almost any web server should work. Just pay attention to two things:\n\n\n\n\nWrite permissions\n. The user that runs PHP and the eventual Git process needs to have write access into the locations listed below and the \nsys_get_temp_dir()\n. Initialization page checks this automatically and the \nsystem info page\n has a dedicated section on permissions if you need more info.\n\n\nIIS users, please \nread this page\n.\n\n\n\n\n\n\nAccess rules\n. The locations listed below should be protected against direct requests.\n\n\n\n\nThe sensitive locations are:\n\n\n\n\n/wp-content/vpdb\n\n\n/wp-content/vpbackups\n\n\n/wp-content/plugins/versionpress\n\n\n/.git\n\n\n\n\nWe ship \n.htaccess\n rules for Apache, \nweb.config\n rules for IIS and \nwp-content/plugins/versionpress/versionpress-nginx.conf\n template for nginx but please confirm manually that direct access to e.g. \nyoursite/.git/config\n is prevented.\n\n\nPHP 5.6\n\n\nWordPress can run on an old and \nlong unsupported\n PHP 5.2. We also started with this version but eventually dropped it so that we could use the newer language features and some 3\nrd\n party libraries. We recommend using one of the \nactively supported\n PHP versions.\n\n\nNote: VersionPress is currently not being tested on HHVM.\n\n\nProject structure\n\n\nSome advanced users like having WordPress in its own directory or move plugins, themes or uploads in another directory. VersionPress supports following scenarios:\n\n\n\n\ngiving WordPress its own directory\n\n\nrenaming \nwp-content\n, \nplugins\n or \nuploads\n directories.\n\n\n\n\nSee \ncustom project structure\n page for more.\n\n\nInstallation\n\n\nVersionPress can be obtained via the main \nversionpress.net website\n. When you have the ZIP file, the installation is pretty standard:\n\n\n\n\nLog in to the admin screens\n\n\nGo to \nPlugins \n Add New \n Upload\n\n\nChoose or drag\ndrop \nversionpress-\nversion\n.zip\n to that page\n\n\nClick \nInstall Now\n\n\nActivate the plugin\n\n\nFinish the activation process\n by going into the new VersionPress section in the administration and clicking the \nActivate\n button\n\n\n\n\nThe last step is important, otherwise VersionPress wouldn't be able to track changes. The on-screen instructions will guide you through it.\n\n\nUpon successful activation, you should see a screen like this:\n\n\n\n  \n\n  \nVersionPress successfully activated\n\n\n\n\n\nUpdate\n\n\nSince \nVersionPress 3.0\n, the simplest way to update is to run the \nwp vp update\n command, e.g.:\n\n\nwp vp update ./versionpress.zip\n\n\n\n\nThis will keep the Git repo and continue tracking the site fine, however, keep in mind that the original history becomes unactionable: you will not be able to undo old changes or roll back to previous states. (\nFull migrations\n are on our roadmap).\n\n\nIf you cannot use the WP-CLI update method, these are the manual steps:\n\n\n\n\nPut the site in a maintenance mode.\n\n\nDeactivate VersionPress (just deactivate, do not uninstall).\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract the new version there.\n\n\nActivate \n initialize the plugin again.\n\n\nDisable the maintenance mode.\n\n\n\n\nThe difference from the automated method is that the internal representation of the database has been regenerated from scratch so you won't be able to track the history of database entities easily. We will improve the GUI update method in the future.\n\n\nUninstallation\n\n\nUninstallation is a standard two-step process:\n\n\n\n\nYou first \ndeactivate\n the plugin on the \nPlugins\n admin screen\n\n\nYou then \ndelete\n the plugin to get rid of all its files\n\n\n If you didn't deactivate the plugin via admin screens and manually removed the \nwp-content/plugins/versionpress\n folder (which is NOT recommended), you have to manually restore the \nwp-db.php\n file from \nwp-db.php.original\n.\n\n\n\n\n\n\nOptional:\n Manually download or delete a repository backup which was created under \nwp-content/backup\n.\n\n\n\n\nThere are two important things to note:\n\n\n\n\nOnce VersionPress is deactivated, \nit cannot be fully reactivated again on the same repository\n. This means that while you can initialize VersionPress again and the presence of the old repository will not be a problem, features like Undo or Rollback will only be available for \nnew\n commits, created by the current activation of VersionPress. This is technical limitation that is not easy to overcome.\n\n\nOn uninstallation, the Git repository is moved to a backup folder\n under \nwp-content/vpbackups\n. You can download or recover it from there manually.\n\n\nNote: VersionPress will only remove / backup the repository if it detects that it was VersionPress-initiated repository. If you created the Git repository manually before installing VersionPress the repository will not be touched.\n\n\n\n\n\n\n\n\nVersionPress states at a glance\n\n\nTo sum up the previous text, here are the states that the site can be in:\n\n\n\n\n\n\n\n\nState\n\n\nGit repo exists?\n\n\nVersionPress tracking changes?\n\n\n\n\n\n\n\n\n\n\nWP site without VersionPress\n\n\nNo\n1)\n\n\nNo\n\n\n\n\n\n\nVersionPress installed\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nVersionPress activated on the \nPlugins\n screen\n\n\nStill no\n\n\nStill no\n\n\n\n\n\n\nActivation finished on VersionPress screen - the plugin is \nactive\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nDeactivated (on plugin admin screen)\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nVersionPress reactivated on the \nPlugins\n screen (similar to step 3)\n\n\nYes (but obsolete)\n\n\nStill no\n\n\n\n\n\n\nFully activated again (similar to step 4)\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nUninstalled\n\n\nNo\n (backed up)\n\n\nNo\n\n\n\n\n\n\n\n\n1)\n The repo might exist if you created it manually or if VersionPress was previously installed. It is not a problem \u2013 VersionPress will happily add commits to the existing repository but a common scenario is that there is no default Git repository and VersionPress creates one.", 
            "title": "Installation and Uninstallation"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#installation-and-uninstallation", 
            "text": "VersionPress ships as a standard plugin but there are two important things to be aware of:   VersionPress has  stricter system requirements  than usual  Its  activation is a two-step process   Both things are important, please read on.", 
            "title": "Installation and Uninstallation"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#system-requirements", 
            "text": "The server environment must match certain requirements, some of which are checked automatically on VersionPress activation. We also recommend some other setup steps below.  \n   \n   Pre-activation check performed by VersionPress    Important  VersionPress is a lot more involved than most other WordPress plugins. Please pay attention to this section before proceeding with installation.   Minimum system requirements are (as a general rule,  we recommend using the latest versions of everything ):   WordPress 4.8 or higher  PHP 5.6 or higher  Git 1.9 or higher (2.13 or newer recommended)  Apache, nginx or IIS 7+ web server  proc_open()  enabled  Write permissions in the site root and everywhere under it  Standard WordPress configuration system ( wp-config.php )   On top of that, if you want to use the  multi-instance / sync features  of VersionPress 2.0, probably even more control over the requirement will be required. In practice, this means that a custom server / VPS is your best bet. See also the section on  hosting providers .  Here are notes on some of the requirements:", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#git", 
            "text": "VersionPress takes a strategic dependency on  Git  which provides  many benefits  but also requires this tool to be installed on the server and accessible from PHP. Make sure that  proc_open()  is enabled on the server and that the Git installation is in the PATH (if it's not, you can tell VersionPress where to find the binary via  Configuration ).  Git  1.9  and newer are supported. Do not attempt to make VersionPress run with older releases (1.7 and 1.8 are still quite popular), there are known issues with them.", 
            "title": "Git"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#supported-web-servers", 
            "text": "We recommend Apache or nginx (as  WordPress itself ) but almost any web server should work. Just pay attention to two things:   Write permissions . The user that runs PHP and the eventual Git process needs to have write access into the locations listed below and the  sys_get_temp_dir() . Initialization page checks this automatically and the  system info page  has a dedicated section on permissions if you need more info.  IIS users, please  read this page .    Access rules . The locations listed below should be protected against direct requests.   The sensitive locations are:   /wp-content/vpdb  /wp-content/vpbackups  /wp-content/plugins/versionpress  /.git   We ship  .htaccess  rules for Apache,  web.config  rules for IIS and  wp-content/plugins/versionpress/versionpress-nginx.conf  template for nginx but please confirm manually that direct access to e.g.  yoursite/.git/config  is prevented.", 
            "title": "Supported web servers"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#php-56", 
            "text": "WordPress can run on an old and  long unsupported  PHP 5.2. We also started with this version but eventually dropped it so that we could use the newer language features and some 3 rd  party libraries. We recommend using one of the  actively supported  PHP versions.  Note: VersionPress is currently not being tested on HHVM.", 
            "title": "PHP 5.6"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#project-structure", 
            "text": "Some advanced users like having WordPress in its own directory or move plugins, themes or uploads in another directory. VersionPress supports following scenarios:   giving WordPress its own directory  renaming  wp-content ,  plugins  or  uploads  directories.   See  custom project structure  page for more.", 
            "title": "Project structure"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#installation", 
            "text": "VersionPress can be obtained via the main  versionpress.net website . When you have the ZIP file, the installation is pretty standard:   Log in to the admin screens  Go to  Plugins   Add New   Upload  Choose or drag drop  versionpress- version .zip  to that page  Click  Install Now  Activate the plugin  Finish the activation process  by going into the new VersionPress section in the administration and clicking the  Activate  button   The last step is important, otherwise VersionPress wouldn't be able to track changes. The on-screen instructions will guide you through it.  Upon successful activation, you should see a screen like this:  \n   \n   VersionPress successfully activated", 
            "title": "Installation"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#update", 
            "text": "Since  VersionPress 3.0 , the simplest way to update is to run the  wp vp update  command, e.g.:  wp vp update ./versionpress.zip  This will keep the Git repo and continue tracking the site fine, however, keep in mind that the original history becomes unactionable: you will not be able to undo old changes or roll back to previous states. ( Full migrations  are on our roadmap).  If you cannot use the WP-CLI update method, these are the manual steps:   Put the site in a maintenance mode.  Deactivate VersionPress (just deactivate, do not uninstall).  Delete the contents of  wp-content/plugins/versionpress  and extract the new version there.  Activate   initialize the plugin again.  Disable the maintenance mode.   The difference from the automated method is that the internal representation of the database has been regenerated from scratch so you won't be able to track the history of database entities easily. We will improve the GUI update method in the future.", 
            "title": "Update"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#uninstallation", 
            "text": "Uninstallation is a standard two-step process:   You first  deactivate  the plugin on the  Plugins  admin screen  You then  delete  the plugin to get rid of all its files   If you didn't deactivate the plugin via admin screens and manually removed the  wp-content/plugins/versionpress  folder (which is NOT recommended), you have to manually restore the  wp-db.php  file from  wp-db.php.original .    Optional:  Manually download or delete a repository backup which was created under  wp-content/backup .   There are two important things to note:   Once VersionPress is deactivated,  it cannot be fully reactivated again on the same repository . This means that while you can initialize VersionPress again and the presence of the old repository will not be a problem, features like Undo or Rollback will only be available for  new  commits, created by the current activation of VersionPress. This is technical limitation that is not easy to overcome.  On uninstallation, the Git repository is moved to a backup folder  under  wp-content/vpbackups . You can download or recover it from there manually.  Note: VersionPress will only remove / backup the repository if it detects that it was VersionPress-initiated repository. If you created the Git repository manually before installing VersionPress the repository will not be touched.", 
            "title": "Uninstallation"
        }, 
        {
            "location": "/en/getting-started/installation-uninstallation/#versionpress-states-at-a-glance", 
            "text": "To sum up the previous text, here are the states that the site can be in:     State  Git repo exists?  VersionPress tracking changes?      WP site without VersionPress  No 1)  No    VersionPress installed  No  No    VersionPress activated on the  Plugins  screen  Still no  Still no    Activation finished on VersionPress screen - the plugin is  active  Yes  Yes    Deactivated (on plugin admin screen)  Yes  No    VersionPress reactivated on the  Plugins  screen (similar to step 3)  Yes (but obsolete)  Still no    Fully activated again (similar to step 4)  Yes  Yes    Uninstalled  No  (backed up)  No     1)  The repo might exist if you created it manually or if VersionPress was previously installed. It is not a problem \u2013 VersionPress will happily add commits to the existing repository but a common scenario is that there is no default Git repository and VersionPress creates one.", 
            "title": "VersionPress states at a glance"
        }, 
        {
            "location": "/en/getting-started/configuration/", 
            "text": "Configuration\n\n\nSome technical aspects of VersionPress can be configured by defining constants in \nwp-config.php\n or using an associated WP-CLI command. Furthermore, VersionPress introduces a \nwp-config.common.php\n file that is required by \nwp-config.php\n and stores common (shared) configuration.\n\n\nLocal vs. shared configuration\n\n\nMost of the constant in \nwp-config.php\n are local, specific to a given environment. For example, database connection needs to be different on staging and production sites. Because of that, VersionPress omits \nwp-config.php\n from version control, however, some options should \u2013 or even must \u2013 be shared. For example, \nWP_CONTENT_DIR\n or \nWP_PLUGIN_DIR\n must be shared as the site structure needs to be the same on all environments.\n\n\nTo support this, VersionPress 3.0 introduced a \nwp-config.common.php\n file which is version-controlled and \nrequire\n'd by the built-in \nwp-config.php\n file. The whole system looks like this:\n\n\nwp-config.php\n (comes with WordPress, .gitignored):\n\n\n?php\n\n\ninclude_once\n \n__DIR__\n \n.\n \n/wp-config.common.php\n;\n\n\n\ndefine\n(\nDB_NAME\n,\n \ndbname\n);\n\n\ndefine\n(\nDB_USER\n,\n \ndbuser\n);\n\n\n// etc.\n\n\n\n\n\nwp-config.common.php\n (created when VersionPress is activated, version-controlled):\n\n\n?php\n\n\ndefine\n(\nWP_CONTENT_DIR\n,\n \ncustom_dir\n);\n\n\n\n\n\nYou can define all the common WordPress config constants in these files (e.g., \nWP_DEBUG\n, \nAUTOSAVE_INTERVAL\n and \nothers\n) but VersionPress also comes with its own config constants.\n\n\nVersionPress config constants\n\n\nThe constants below influence some technical aspects of how VersionPress works. You should not typically need to update them but if you do, we strongly recommend using a WP-CLI command \nwp vp config\n to do it. For example, to set a custom Git path, run:\n\n\nwp vp config VP_GIT_BINARY \n/custom/path/to/git\n\n\n\n\n\nThis will work if you have \nWP-CLI installed\n and VersionPress activated.\n\n\nBelow are listed some of the supported constants. To get an always-up-to-date list, run \nwp help vp config\n.\n\n\nVP_GIT_BINARY\n\n\nDefault: \ngit\n\n\nConfiguration file: \nwp-config.php\n\n\nBy default, VersionPress calls just \ngit\n which leaves the path resolution up to the operating system. That might be problematic on some server configurations which use different \nPATH\n for different users (the web server user might not be the same user under which you are logged in), there might be some \nPATH\n caching involved, etc. If VersionPress cannot detect Git for some reason, use this option.\n\n\nVP_WP_CLI_BINARY\n\n\nDefault: \nwp\n\n\nConfiguration file: \nwp-config.php\n\n\nAbsolute path to a WP-CLI binary, analogous to \nVP_GIT_BINARY\n.\n\n\nVP_VPDB_DIR\n\n\nDefault: \nWP_CONTENT_DIR . '/vpdb'\n\n\nConfiguration file: \nwp-config.common.php\n\n\nBy default, VersionPress saves all its content into the \nvpdb\n directory under \nWP_CONTENT_DIR\n. You can change it by setting this constant. \nVP_VPDB_DIR\n must be under the \nVP_PROJECT_ROOT\n.\n\n\nVP_PROJECT_ROOT\n\n\nDefault: \nABSPATH\n\n\nConfiguration file: \nwp-config.common.php\n\n\nBy default, VersionPress creates the repository (and the \n.git\n directory) in the \nABSPATH\n directory. If you \nmove WordPress into its own directory\n, you have to define this constant to point to the original \nABSPATH\n location. For example, if you have the site at \n/var/www/my-site\n and you move WordPress into \n/var/www/my-site/wordpress\n, the \nVP_PROJECT_ROOT\n needs to be set to \n/var/www/my-site\n (where the \n.git\n directory is).", 
            "title": "Configuration"
        }, 
        {
            "location": "/en/getting-started/configuration/#configuration", 
            "text": "Some technical aspects of VersionPress can be configured by defining constants in  wp-config.php  or using an associated WP-CLI command. Furthermore, VersionPress introduces a  wp-config.common.php  file that is required by  wp-config.php  and stores common (shared) configuration.", 
            "title": "Configuration"
        }, 
        {
            "location": "/en/getting-started/configuration/#local-vs-shared-configuration", 
            "text": "Most of the constant in  wp-config.php  are local, specific to a given environment. For example, database connection needs to be different on staging and production sites. Because of that, VersionPress omits  wp-config.php  from version control, however, some options should \u2013 or even must \u2013 be shared. For example,  WP_CONTENT_DIR  or  WP_PLUGIN_DIR  must be shared as the site structure needs to be the same on all environments.  To support this, VersionPress 3.0 introduced a  wp-config.common.php  file which is version-controlled and  require 'd by the built-in  wp-config.php  file. The whole system looks like this:  wp-config.php  (comes with WordPress, .gitignored):  ?php  include_once   __DIR__   .   /wp-config.common.php ;  define ( DB_NAME ,   dbname );  define ( DB_USER ,   dbuser );  // etc.   wp-config.common.php  (created when VersionPress is activated, version-controlled):  ?php  define ( WP_CONTENT_DIR ,   custom_dir );   You can define all the common WordPress config constants in these files (e.g.,  WP_DEBUG ,  AUTOSAVE_INTERVAL  and  others ) but VersionPress also comes with its own config constants.", 
            "title": "Local vs. shared configuration"
        }, 
        {
            "location": "/en/getting-started/configuration/#versionpress-config-constants", 
            "text": "The constants below influence some technical aspects of how VersionPress works. You should not typically need to update them but if you do, we strongly recommend using a WP-CLI command  wp vp config  to do it. For example, to set a custom Git path, run:  wp vp config VP_GIT_BINARY  /custom/path/to/git   This will work if you have  WP-CLI installed  and VersionPress activated.  Below are listed some of the supported constants. To get an always-up-to-date list, run  wp help vp config .", 
            "title": "VersionPress config constants"
        }, 
        {
            "location": "/en/getting-started/configuration/#vp_git_binary", 
            "text": "Default:  git  Configuration file:  wp-config.php  By default, VersionPress calls just  git  which leaves the path resolution up to the operating system. That might be problematic on some server configurations which use different  PATH  for different users (the web server user might not be the same user under which you are logged in), there might be some  PATH  caching involved, etc. If VersionPress cannot detect Git for some reason, use this option.", 
            "title": "VP_GIT_BINARY"
        }, 
        {
            "location": "/en/getting-started/configuration/#vp_wp_cli_binary", 
            "text": "Default:  wp  Configuration file:  wp-config.php  Absolute path to a WP-CLI binary, analogous to  VP_GIT_BINARY .", 
            "title": "VP_WP_CLI_BINARY"
        }, 
        {
            "location": "/en/getting-started/configuration/#vp_vpdb_dir", 
            "text": "Default:  WP_CONTENT_DIR . '/vpdb'  Configuration file:  wp-config.common.php  By default, VersionPress saves all its content into the  vpdb  directory under  WP_CONTENT_DIR . You can change it by setting this constant.  VP_VPDB_DIR  must be under the  VP_PROJECT_ROOT .", 
            "title": "VP_VPDB_DIR"
        }, 
        {
            "location": "/en/getting-started/configuration/#vp_project_root", 
            "text": "Default:  ABSPATH  Configuration file:  wp-config.common.php  By default, VersionPress creates the repository (and the  .git  directory) in the  ABSPATH  directory. If you  move WordPress into its own directory , you have to define this constant to point to the original  ABSPATH  location. For example, if you have the site at  /var/www/my-site  and you move WordPress into  /var/www/my-site/wordpress , the  VP_PROJECT_ROOT  needs to be set to  /var/www/my-site  (where the  .git  directory is).", 
            "title": "VP_PROJECT_ROOT"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/", 
            "text": "Using VersionPress\n\n\nVersionPress is used in three main ways:\n\n\nAuto-tracking (unattended mode)\n\n\nYou can activate VersionPress and forget it. It will work behind the scenes, automatically tracking changes on the site. Learn more in the \nchange tracking\n topic.\n\n\nInspecting history of changes\n\n\nOn the VersionPress admin screen, you can inspect the history of changes:\n\n\n\n  \n\n\n\n\n\nEach row is clickable and will reveal more details about the change:\n\n\n\n  \n\n\n\n\n\nYou can also switch to the \nFull diff\n mode which displays complete contents of the change:\n\n\n\n  \n\n\n\n\n\nRelated:\n\n\n\n\nBlog post \nVersionPress 2.0: New User Interface\n\n\n\n\nUndoing changes\n\n\nWhen something goes wrong, you can use the \nUndo and Rollback feature\n to return to a previous state of a site or to revert a specific change.\n\n\nRelated:\n\n\n\n\nBlog post \nVersionPress 1.0 Walkthrough\n\n\n\n\nSync / staging workflows\n\n\nSince VersionPress 2.0, \nsync / staging workflows\n are supported. See the dedicated section for that.\n\n\nRelated:\n\n\n\n\nBlog post \nVersionPress 2.0: Simple Staging", 
            "title": "Using VersionPress"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/#using-versionpress", 
            "text": "VersionPress is used in three main ways:", 
            "title": "Using VersionPress"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/#auto-tracking-unattended-mode", 
            "text": "You can activate VersionPress and forget it. It will work behind the scenes, automatically tracking changes on the site. Learn more in the  change tracking  topic.", 
            "title": "Auto-tracking (unattended mode)"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/#inspecting-history-of-changes", 
            "text": "On the VersionPress admin screen, you can inspect the history of changes:  \n     Each row is clickable and will reveal more details about the change:  \n     You can also switch to the  Full diff  mode which displays complete contents of the change:  \n     Related:   Blog post  VersionPress 2.0: New User Interface", 
            "title": "Inspecting history of changes"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/#undoing-changes", 
            "text": "When something goes wrong, you can use the  Undo and Rollback feature  to return to a previous state of a site or to revert a specific change.  Related:   Blog post  VersionPress 1.0 Walkthrough", 
            "title": "Undoing changes"
        }, 
        {
            "location": "/en/getting-started/using-versionpress/#sync-staging-workflows", 
            "text": "Since VersionPress 2.0,  sync / staging workflows  are supported. See the dedicated section for that.  Related:   Blog post  VersionPress 2.0: Simple Staging", 
            "title": "Sync / staging workflows"
        }, 
        {
            "location": "/en/getting-started/about-eap/", 
            "text": "Developer Preview\n\n\nCurrently, VersionPress is a \n\"Developer Preview\"\n. It can be tried on simpler sites for development purposes but it's not production-ready yet.\n\n\nConsiderations\n\n\n\n\nA safe bet is to use VersionPress for testing / dev purposes only. Local, throw-away sites and workflows are ideal.\n\n\nProduction deployment is strongly discouraged but if you attempt it despite the warning, at least \nkeep backup at all times\n.\n\n\nCompatibility with WordPress plugins and themes is often problematic, see \n3\nrd\n Party Integrations section\n.\n\n\nCompatibility with hosts is often problematic as Git and \nproc_open()\n are required on the server. See \nHosting\n and \nSystem requirements\n.\n\n\nBe familiar with WordPress and Git.\n\n\n\n\nYou can tell whether you are using a Developer Preview / Early Access release of VersionPress from the top admin bar.\n\n\n\n\nNote on 'Early Access' and 'EAP'\n\n\nBetween January 2015 and March 2016, VersionPress used to be available through the \nEarly Access Program (EAP)\n. It was discontinued when VersionPress \nmoved to a fully open development model\n in April 2016.\n\n\nBetween April 2016 and May 2017, the term \"Early Access\" was used. We then switched to \"Developer Preview\" which better indicates the project status. See \nissue #1201\n.", 
            "title": "Developer Preview"
        }, 
        {
            "location": "/en/getting-started/about-eap/#developer-preview", 
            "text": "Currently, VersionPress is a  \"Developer Preview\" . It can be tried on simpler sites for development purposes but it's not production-ready yet.", 
            "title": "Developer Preview"
        }, 
        {
            "location": "/en/getting-started/about-eap/#considerations", 
            "text": "A safe bet is to use VersionPress for testing / dev purposes only. Local, throw-away sites and workflows are ideal.  Production deployment is strongly discouraged but if you attempt it despite the warning, at least  keep backup at all times .  Compatibility with WordPress plugins and themes is often problematic, see  3 rd  Party Integrations section .  Compatibility with hosts is often problematic as Git and  proc_open()  are required on the server. See  Hosting  and  System requirements .  Be familiar with WordPress and Git.   You can tell whether you are using a Developer Preview / Early Access release of VersionPress from the top admin bar.   Note on 'Early Access' and 'EAP'  Between January 2015 and March 2016, VersionPress used to be available through the  Early Access Program (EAP) . It was discontinued when VersionPress  moved to a fully open development model  in April 2016.  Between April 2016 and May 2017, the term \"Early Access\" was used. We then switched to \"Developer Preview\" which better indicates the project status. See  issue #1201 .", 
            "title": "Considerations"
        }, 
        {
            "location": "/en/feature-focus/", 
            "text": "Feature Focus\n\n\nThis section contains details on how various aspects of VersionPress work.", 
            "title": "Feature Focus Home"
        }, 
        {
            "location": "/en/feature-focus/#feature-focus", 
            "text": "This section contains details on how various aspects of VersionPress work.", 
            "title": "Feature Focus"
        }, 
        {
            "location": "/en/feature-focus/how-versionpress-works/", 
            "text": "How VersionPress Works\n\n\nSometimes, the best way to understand a product is to have a brief idea of how it works, internally. That way, you know what actions are safe, what is possibly dangerous and so on. This page provides a brief overview.\n\n\nHigh level overview\n\n\nWordPress site with VersionPress installed and activated contains three main parts:\n\n\n\n\nWordPress itself\n, i.e. the PHP code and MySQL database\n\n\nGit\n repository\n that manages the historic revisions\n\n\nThe VersionPress plugin\n that translates WordPress data into the Git format and does all the other things like providing the admin pages, undo buttons etc.\n\n\n\n\nOne important point here is that our code actually implements very little versioning logic itself. Instead, we depend heavily on Git which was an important strategic decision. This has many advantages but also poses some new challenges as described \nhere\n.\n\n\nWith regards to how VersionPress works, \nit generally observes write operations\n (e.g., updating a post, adding a comment etc.) and prepares the data in a format that will be suitable for version control in Git. The files in this format are stored in the \nwp-content/vpdb\n folder and later committed to the Git repository. In the opposite direction, they can be used to update the MySQL database on operations like Undo, Rollback or Clone.\n\n\nOn read operations (displaying a post etc.), VersionPress generally does nothing. It might happen that even something that appears as a read operation changes some data behind the scenes, in which case there will be a new commit.", 
            "title": "How VersionPress Works"
        }, 
        {
            "location": "/en/feature-focus/how-versionpress-works/#how-versionpress-works", 
            "text": "Sometimes, the best way to understand a product is to have a brief idea of how it works, internally. That way, you know what actions are safe, what is possibly dangerous and so on. This page provides a brief overview.", 
            "title": "How VersionPress Works"
        }, 
        {
            "location": "/en/feature-focus/how-versionpress-works/#high-level-overview", 
            "text": "WordPress site with VersionPress installed and activated contains three main parts:   WordPress itself , i.e. the PHP code and MySQL database  Git  repository  that manages the historic revisions  The VersionPress plugin  that translates WordPress data into the Git format and does all the other things like providing the admin pages, undo buttons etc.   One important point here is that our code actually implements very little versioning logic itself. Instead, we depend heavily on Git which was an important strategic decision. This has many advantages but also poses some new challenges as described  here .  With regards to how VersionPress works,  it generally observes write operations  (e.g., updating a post, adding a comment etc.) and prepares the data in a format that will be suitable for version control in Git. The files in this format are stored in the  wp-content/vpdb  folder and later committed to the Git repository. In the opposite direction, they can be used to update the MySQL database on operations like Undo, Rollback or Clone.  On read operations (displaying a post etc.), VersionPress generally does nothing. It might happen that even something that appears as a read operation changes some data behind the scenes, in which case there will be a new commit.", 
            "title": "High level overview"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/", 
            "text": "Change Tracking\n\n\nChange tracking is a core feature of VersionPress. This page describes the three main facets of it:\n\n\n\n\nAutomatic change tracking\n\n\nManual change tracking\n\n\nWhat's not tracked\n\n\n\n\nAutomatic change tracking\n\n\nMost of the time, VersionPress works silently, simply tracking all the important changes and recording them for later use. This includes both files and database entities like posts or comments. This section contains some specifics on what is tracked and how.\n\n\n\n\nNote\n\n\nThe info below might not be entirely complete as there are lots of details for various content types. Consider it a brief overview.\n\n\n\n\nFiles\n\n\nMost tracked changes involve database entities which are described below but some actions involve files as well. These are the common situations:\n\n\n\n\nTheme\n installations, uninstallations and updates\n\n\nNote: theme files are often edited manually and externally, in some kind of editor, which is not (and cannot be) tracked by VersionPress automatically. Please see \nManual change tracking\n.\n\n\n\n\n\n\nPlugin\n installations, uninstallations and updates\n\n\nWordPress core\n updates\n\n\nMedia\n uploads\n\n\nTranslations\n\n\n\n\nWhen any such action happens, VersionPress commits both the database change and a related file(s) change. For example, when installing a plugin, VersionPress will take note that the list of installed plugins has been changed in the database and commit the corresponding plugin files as well.\n\n\nNote that not all files are versioned because you e.g. don't want to commit cache files, large backup ZIPs etc. Please refer to the \nWhat's not tracked\n section for more.\n\n\nDatabase entities\n\n\nThe biggest added value of VersionPress is in \ndatabase change tracking\n. This section describes what database entities are tracked and how.\n\n\nPosts\n\n\nPosts\n are the main pieces of content in WordPress which includes both posts and pages by default but also some other post types as well.\n\n\nCustom post types and fields\n are generally supported and also work with popular plugins like \nACF\n.\n\n\nTracked actions:\n\n\n\n\nCreate post\n\n\nEdit post\n\n\nCreate draft\n\n\nUpdate draft\n\n\nPublish draft\n\n\nTrash post\n\n\nUntrash post\n\n\nDelete post\n\n\n\n\nSpecial treatment:\n\n\n\n\nWe don't track WordPress \nrevisions\n, i.e., posts of a type \nrevision\n. Git versions are our revisions \u2013 more powerful, space efficient etc.\n\n\nDrafts\n are treated specially because WordPress updates them unnecessarily often. VersionPress ignores most of the internal updates and only stores a new revisions when a draft is saved or eventually published as a full post.\n\n\n(In more detail, the draft is first stored by VersionPress when the post state changes from \nauto-draft\n to \ndraft\n. This happens either after title is filled in and the field loses focus, or after a couple of seconds timeout. The next revision of that draft is then created every time the user clicks \nSave draft\n, or, eventually, when he/she publishes the post. New revision is \nnot\n created when the user clicks \nPreview\n.)\n\n\n\n\n\n\nAttachments\n are special types of posts too. VersionPress tracks both the database change related to these post types as well as files created on the disk.\n\n\n\n\nPostmeta\n\n\nPostmeta\n stores post metadata about posts like the page template used, featured image displayed etc. Some WP-internal postmeta that are not significant for VersionPress (like \n_edit_lock\n) are ignored.\n\n\nTracked actions:\n\n\n\n\nCreate postmeta\n\n\nEdit postmeta\n\n\nDelete postmeta\n\n\n\n\nComments\n\n\nTracked actions:\n\n\n\n\nCreate comment\n\n\nEdit comment\n\n\nDelete comment\n\n\nTrash comment\n\n\nUntrash comment\n\n\n\n\nComment workflows (pending, approved etc.) are going to be supported post-1.0-beta1 release.\n\n\nOptions\n\n\nMost options are tracked but e.g. transient options and some others are ignored.\n\n\nTracked actions:\n\n\n\n\nCreate option\n\n\nEdit option\n\n\nDelete option\n\n\n\n\nUsers\n\n\nTracked actions:\n\n\n\n\nCreate user\n\n\nEdit user\n\n\nDelete user\n\n\n\n\nUsermeta\n\n\nQuite a lot of user properties are stored as \nusermeta\n. Most usermeta are tracked, some are intentionally ignored (e.g., session tokens).\n\n\nTerms\n\n\nTerms are things like categories or tags (or custom types, depending on term taxonomies).\n\n\nTracked actions:\n\n\n\n\nCreate term\n\n\nEdit term\n\n\nDelete term\n\n\n\n\nTerm taxonomies\n\n\nDefines meaning for terms. Tracked together with terms.\n\n\nWidgets\n\n\nWidgets are technically entries in the \noptions\n table and are fully supported.\n\n\nMenus\n\n\nMenus are technically stored as half terms (the menu itself), half posts (menu items) and are fully supported.\n\n\nOther entities\n\n\nVersionPress tracks everything that goes into the standard WordPress tables, which often covers even 3\nrd\n party WP plugins if they use features like custom post types etc. VersionPress doesn't track any custom database tables by default.\n\n\nManual change tracking\n\n\nSome changes cannot be auto-tracked by VersionPress, e.g., manual file edits on the disk or FTP uploads. In such cases, you need to commit the changes manually.\n\n\nYou can use any Git client for it or, since VersionPress 2.0, there is a GUI for it:\n\n\n\n  \n\n\n\n\n\nVersionPress treats manual commits exactly the same as auto-generated commits \u2013 they will be visible in the table, \nundo or rollback\n them, etc.\n\n\nFrequent DB writes\n\n\nSome entities are changed very often, e.g., view counters, Akismet spam count, etc. VersionPress only saves them once in an hour. Thus, you don't need to worry about being flooded with commits.\n\n\nWhat's not tracked\n\n\nThere are certain things that VersionPress intentionally omits from versioning:\n\n\n\n\nwp-config.php\n \u2013 this file is environment-specific which means there would be collisions between various developers, staging/live environments etc. However, some parts of the config should be shared which is why VersionPress introduced \nwp-config.common.php\n in v3.0 \u2013 this file is committed in the Git repo and \nrequire\n'd from \nwp-config.php\n. See \nConfiguration\n for details.\n\n\nVersionPress itself\n \u2013 the folder \nplugins/versionpress\n is excluded because you don't want a rollback to take you to a state where VersionPress is outdated and possibly buggy.\n\n\nAnything in \nwp-content\n other than plugins, themes and uploads\n. Common things in \nwp-content\n are backup folders, cache directories etc. which should generally not be versioned.\n\n\nLog files, system files etc.\n\n\n\n\nUpdating ignore rules\n\n\nIgnoring is done using the standard \nGitignore files\n and VersionPress will try to install appropriate \n.gitignore\n files upon its activation.\n\n\n\n\nExisting .gitignore will not be modified\n\n\nIf the installation finds existing \n.gitignore\n file already in place, it will assume that the site is managed professionally and will not attempt to modify the ignore rules itself. The user will be notified about this.\n\n\n\n\nAs an example, let's say that you have a \nwp-content/myfolder\n folder that you want to track. This is a part of the default \n.gitgnore\n file which causes the \nmyfolder\n being ignored:\n\n\nwp-content/*\n!wp-content/plugins/\n!wp-content/themes/\n!wp-content/uploads/\n\n\n\n\nIt basically reads \"ignore everything in wp-content \n(line 1)\n except plugins (line 2), themes (line 3) and uploads (line 4)\". To add \nmyfolder\n to tracking, just add a fifth line:\n\n\nwp-content/*\n!wp-content/plugins/\n!wp-content/themes/\n!wp-content/uploads/\n!wp-content/myfolder/", 
            "title": "Change Tracking"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#change-tracking", 
            "text": "Change tracking is a core feature of VersionPress. This page describes the three main facets of it:   Automatic change tracking  Manual change tracking  What's not tracked", 
            "title": "Change Tracking"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#automatic-change-tracking", 
            "text": "Most of the time, VersionPress works silently, simply tracking all the important changes and recording them for later use. This includes both files and database entities like posts or comments. This section contains some specifics on what is tracked and how.   Note  The info below might not be entirely complete as there are lots of details for various content types. Consider it a brief overview.", 
            "title": "Automatic change tracking"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#files", 
            "text": "Most tracked changes involve database entities which are described below but some actions involve files as well. These are the common situations:   Theme  installations, uninstallations and updates  Note: theme files are often edited manually and externally, in some kind of editor, which is not (and cannot be) tracked by VersionPress automatically. Please see  Manual change tracking .    Plugin  installations, uninstallations and updates  WordPress core  updates  Media  uploads  Translations   When any such action happens, VersionPress commits both the database change and a related file(s) change. For example, when installing a plugin, VersionPress will take note that the list of installed plugins has been changed in the database and commit the corresponding plugin files as well.  Note that not all files are versioned because you e.g. don't want to commit cache files, large backup ZIPs etc. Please refer to the  What's not tracked  section for more.", 
            "title": "Files"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#database-entities", 
            "text": "The biggest added value of VersionPress is in  database change tracking . This section describes what database entities are tracked and how.", 
            "title": "Database entities"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#posts", 
            "text": "Posts  are the main pieces of content in WordPress which includes both posts and pages by default but also some other post types as well.  Custom post types and fields  are generally supported and also work with popular plugins like  ACF .  Tracked actions:   Create post  Edit post  Create draft  Update draft  Publish draft  Trash post  Untrash post  Delete post   Special treatment:   We don't track WordPress  revisions , i.e., posts of a type  revision . Git versions are our revisions \u2013 more powerful, space efficient etc.  Drafts  are treated specially because WordPress updates them unnecessarily often. VersionPress ignores most of the internal updates and only stores a new revisions when a draft is saved or eventually published as a full post.  (In more detail, the draft is first stored by VersionPress when the post state changes from  auto-draft  to  draft . This happens either after title is filled in and the field loses focus, or after a couple of seconds timeout. The next revision of that draft is then created every time the user clicks  Save draft , or, eventually, when he/she publishes the post. New revision is  not  created when the user clicks  Preview .)    Attachments  are special types of posts too. VersionPress tracks both the database change related to these post types as well as files created on the disk.", 
            "title": "Posts"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#postmeta", 
            "text": "Postmeta  stores post metadata about posts like the page template used, featured image displayed etc. Some WP-internal postmeta that are not significant for VersionPress (like  _edit_lock ) are ignored.  Tracked actions:   Create postmeta  Edit postmeta  Delete postmeta", 
            "title": "Postmeta"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#comments", 
            "text": "Tracked actions:   Create comment  Edit comment  Delete comment  Trash comment  Untrash comment   Comment workflows (pending, approved etc.) are going to be supported post-1.0-beta1 release.", 
            "title": "Comments"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#options", 
            "text": "Most options are tracked but e.g. transient options and some others are ignored.  Tracked actions:   Create option  Edit option  Delete option", 
            "title": "Options"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#users", 
            "text": "Tracked actions:   Create user  Edit user  Delete user", 
            "title": "Users"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#usermeta", 
            "text": "Quite a lot of user properties are stored as  usermeta . Most usermeta are tracked, some are intentionally ignored (e.g., session tokens).", 
            "title": "Usermeta"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#terms", 
            "text": "Terms are things like categories or tags (or custom types, depending on term taxonomies).  Tracked actions:   Create term  Edit term  Delete term", 
            "title": "Terms"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#term-taxonomies", 
            "text": "Defines meaning for terms. Tracked together with terms.", 
            "title": "Term taxonomies"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#widgets", 
            "text": "Widgets are technically entries in the  options  table and are fully supported.", 
            "title": "Widgets"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#menus", 
            "text": "Menus are technically stored as half terms (the menu itself), half posts (menu items) and are fully supported.", 
            "title": "Menus"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#other-entities", 
            "text": "VersionPress tracks everything that goes into the standard WordPress tables, which often covers even 3 rd  party WP plugins if they use features like custom post types etc. VersionPress doesn't track any custom database tables by default.", 
            "title": "Other entities"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#manual-change-tracking", 
            "text": "Some changes cannot be auto-tracked by VersionPress, e.g., manual file edits on the disk or FTP uploads. In such cases, you need to commit the changes manually.  You can use any Git client for it or, since VersionPress 2.0, there is a GUI for it:  \n     VersionPress treats manual commits exactly the same as auto-generated commits \u2013 they will be visible in the table,  undo or rollback  them, etc.", 
            "title": "Manual change tracking"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#frequent-db-writes", 
            "text": "Some entities are changed very often, e.g., view counters, Akismet spam count, etc. VersionPress only saves them once in an hour. Thus, you don't need to worry about being flooded with commits.", 
            "title": "Frequent DB writes"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#whats-not-tracked", 
            "text": "There are certain things that VersionPress intentionally omits from versioning:   wp-config.php  \u2013 this file is environment-specific which means there would be collisions between various developers, staging/live environments etc. However, some parts of the config should be shared which is why VersionPress introduced  wp-config.common.php  in v3.0 \u2013 this file is committed in the Git repo and  require 'd from  wp-config.php . See  Configuration  for details.  VersionPress itself  \u2013 the folder  plugins/versionpress  is excluded because you don't want a rollback to take you to a state where VersionPress is outdated and possibly buggy.  Anything in  wp-content  other than plugins, themes and uploads . Common things in  wp-content  are backup folders, cache directories etc. which should generally not be versioned.  Log files, system files etc.", 
            "title": "What's not tracked"
        }, 
        {
            "location": "/en/feature-focus/change-tracking/#updating-ignore-rules", 
            "text": "Ignoring is done using the standard  Gitignore files  and VersionPress will try to install appropriate  .gitignore  files upon its activation.   Existing .gitignore will not be modified  If the installation finds existing  .gitignore  file already in place, it will assume that the site is managed professionally and will not attempt to modify the ignore rules itself. The user will be notified about this.   As an example, let's say that you have a  wp-content/myfolder  folder that you want to track. This is a part of the default  .gitgnore  file which causes the  myfolder  being ignored:  wp-content/*\n!wp-content/plugins/\n!wp-content/themes/\n!wp-content/uploads/  It basically reads \"ignore everything in wp-content  (line 1)  except plugins (line 2), themes (line 3) and uploads (line 4)\". To add  myfolder  to tracking, just add a fifth line:  wp-content/*\n!wp-content/plugins/\n!wp-content/themes/\n!wp-content/uploads/\n!wp-content/myfolder/", 
            "title": "Updating ignore rules"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/", 
            "text": "Undo and Rollback\n\n\nUndo and rollback are two essential, most visible features of VersionPress. They share some common behavior but are typically used for different purposes.\n\n\n\n\nKeep backup\n\n\nReverts manipulate the database and if there are any kind of problems, the database might be left in a broken state. That is why we strongly recommend having an external site backup at least during the EAP period.\n\n\n\n\nUndo\n\n\nThe Undo feature can \nselectively undo only some changes while keeping the newer updates\n. For example, if you edited a post and then updated the site title, undo can revert just the post change without taking the site title with it.\n\n\nThis is a very powerful feature that not many other technologies support \u2013 for example, the undo button in text editors is more like our rollback, as are most backup solutions. Right now, you can undo a single change; in the future we will have a way to undo a range of changes, or their selection.\n\n\nRollback\n\n\nRollback takes the site to some previous state.\n For example, if you roll back to the state where you first installed VersionPress, all your changes done since then will be gone.\n\n\nRollback works by creating a \nnew state\n that looks like some previous one. This is a very important concept that means two things:\n\n\n\n\nVersionPress never loses anything from its history. Once something is there, it is always recoverable.\n\n\nThe rollback itself can be easily reverted. It is a change like any other so just click \nUndo\n next to it if you need.\n\n\n\n\nWhen reverts won't work\n\n\nThere are cases when reverts will refuse to work, and rightfully so. Generally, rollback won't cause any problems but undo is more \"picky\" about when it will work and when not.\n\n\nThese are the main situations that prevent Undo from doing its job:\n\n\nConflicts\n\n\nUndo will not work when \nthe change being reverted is in \nconflict\n with some more recent change\n. For example, you want to undo a blog post update for a post that has been deleted in the meantime. Or that text change is in conflict with some newer edit done by some of your colleagues or by yourself. In such cases, no technology can know what's the right way to resolve the conflict. For example, in the text conflict situation it is up to the editor to compare the two versions and choose the better one.\n\n\nWhen VersionPress encounters a conflict \u2013 and it can detect them reliably \u2013 it will just report this to the user and stop doing the revert. We don't have a conflict resolution UI yet \u2013 it might come in a future update.\n\n\nInvalid entity references\n\n\nSay that you delete a \ncomment\n, want VersionPress to restore it but the related \npost\n no longer exists. VersionPress will see this as a \nlogical conflict in relations between two entities\n and will reject the revert. In other words, VersionPress checks \"foreign keys\" before it proceeds with the undo.\n\n\nTo fix this, first restore the related entity (e.g., the post) and only then the original entity (e.g., the comment).\n\n\nUncommitted files\n\n\nThe last scenario where revert will not work is uncommitted changes somewhere in the site files. For example, if you manually edited a theme file and haven't committed this change to Git, revert will be rejected because your changes could be possibly lost. In technical terms, \nworking directory must be clean for reverts to work.\n\n\nMerge commits\n\n\nMerge commits join two lines of development back together. For example, if you did some changes in the live environment and some other changes in the staging environment, doing a \npull\n creates a merge commit.\n\n\nMerge commits cannot be undone because there is no opposite state to them, i.e., there is no logical \"reverse change\" that we could apply to the current state of the site.\n\n\n\n\nNote to Git users\n\n\nIn Git, you can get rid of the merge commit by doing e.g. \ngit reset --hard\n and it's still the way in VersionPress if you want to \nget rid of\n a merge. However, the semantics of an \nundo\n are different, as described above.", 
            "title": "Undo and Rollback"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#undo-and-rollback", 
            "text": "Undo and rollback are two essential, most visible features of VersionPress. They share some common behavior but are typically used for different purposes.   Keep backup  Reverts manipulate the database and if there are any kind of problems, the database might be left in a broken state. That is why we strongly recommend having an external site backup at least during the EAP period.", 
            "title": "Undo and Rollback"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#undo", 
            "text": "The Undo feature can  selectively undo only some changes while keeping the newer updates . For example, if you edited a post and then updated the site title, undo can revert just the post change without taking the site title with it.  This is a very powerful feature that not many other technologies support \u2013 for example, the undo button in text editors is more like our rollback, as are most backup solutions. Right now, you can undo a single change; in the future we will have a way to undo a range of changes, or their selection.", 
            "title": "Undo"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#rollback", 
            "text": "Rollback takes the site to some previous state.  For example, if you roll back to the state where you first installed VersionPress, all your changes done since then will be gone.  Rollback works by creating a  new state  that looks like some previous one. This is a very important concept that means two things:   VersionPress never loses anything from its history. Once something is there, it is always recoverable.  The rollback itself can be easily reverted. It is a change like any other so just click  Undo  next to it if you need.", 
            "title": "Rollback"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#when-reverts-wont-work", 
            "text": "There are cases when reverts will refuse to work, and rightfully so. Generally, rollback won't cause any problems but undo is more \"picky\" about when it will work and when not.  These are the main situations that prevent Undo from doing its job:", 
            "title": "When reverts won't work"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#conflicts", 
            "text": "Undo will not work when  the change being reverted is in  conflict  with some more recent change . For example, you want to undo a blog post update for a post that has been deleted in the meantime. Or that text change is in conflict with some newer edit done by some of your colleagues or by yourself. In such cases, no technology can know what's the right way to resolve the conflict. For example, in the text conflict situation it is up to the editor to compare the two versions and choose the better one.  When VersionPress encounters a conflict \u2013 and it can detect them reliably \u2013 it will just report this to the user and stop doing the revert. We don't have a conflict resolution UI yet \u2013 it might come in a future update.", 
            "title": "Conflicts"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#invalid-entity-references", 
            "text": "Say that you delete a  comment , want VersionPress to restore it but the related  post  no longer exists. VersionPress will see this as a  logical conflict in relations between two entities  and will reject the revert. In other words, VersionPress checks \"foreign keys\" before it proceeds with the undo.  To fix this, first restore the related entity (e.g., the post) and only then the original entity (e.g., the comment).", 
            "title": "Invalid entity references"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#uncommitted-files", 
            "text": "The last scenario where revert will not work is uncommitted changes somewhere in the site files. For example, if you manually edited a theme file and haven't committed this change to Git, revert will be rejected because your changes could be possibly lost. In technical terms,  working directory must be clean for reverts to work.", 
            "title": "Uncommitted files"
        }, 
        {
            "location": "/en/feature-focus/undo-and-rollback/#merge-commits", 
            "text": "Merge commits join two lines of development back together. For example, if you did some changes in the live environment and some other changes in the staging environment, doing a  pull  creates a merge commit.  Merge commits cannot be undone because there is no opposite state to them, i.e., there is no logical \"reverse change\" that we could apply to the current state of the site.   Note to Git users  In Git, you can get rid of the merge commit by doing e.g.  git reset --hard  and it's still the way in VersionPress if you want to  get rid of  a merge. However, the semantics of an  undo  are different, as described above.", 
            "title": "Merge commits"
        }, 
        {
            "location": "/en/feature-focus/searching-history/", 
            "text": "Searching History\n\n\nVersionPress has powerful search with syntax inspired by GitHub or Gmail. It lets you filter the main table by authors, post types, date ranges etc.\n\n\n\n\nNote\n\n\nSearch is available since VersionPress 3.0\n\n\n\n\nExamples\n\n\nLet's start with a couple of examples.\n\n\nhello world\n\nFinds changes that have the words \"hello\" and \"world\" somewhere in the change description (commit message).\n\n\nhello world author:joe\n\nSearch operators are supported, e.g., \nauthor:\n. The search is always case insensitive so this will find 'Joe', 'JOE' etc.\n\n\nhello world author: joe* date:\n= 2016-01-01\n\nHere you can see a couple of syntax rules in play: you can combine as many operators as you like, wildcards are supported, value containing spaces must be quoted, there are optional spaces after the colon, etc.\n\n\nSyntax\n\n\njust text\n, \njust text\n, \nw*ldcards\n\nSearches the commit text. Without quotes, it will look for commits containing all the words. With quotes, it does a strict match (still case in-sensitive). Single and double quotes are both supported.\n\n\noperator: value\n\nSpace after colon is optional. Value can be quoted and wildcarded as above.\n\n\noperator:value1 operator:value2\n\nOperators can be repeated, their values are then combined using logical OR. For example, you can search for changes done by either Adam or Betty by using \nauthor:Adam author:Betty\n. The only exception is \ndate:\n which is AND'd, see below.\n\n\noperator1:value operator2:value\n\nMultiple operators are combined using logical AND.\n\n\n--\n\n\nAll of the syntaxes above can be freely combined.\n\n\nOperators\n\n\nauthor:\n\n\nAuthor of the action. You can use author name or his/her email, wildcards are supported.\n\n\nThere are two special authors:\n\n\n\n\nauthor:nonadmin@example.com\n finds anonymous actions like posting a comment on a blog.\n\n\nauthor:wp-cli\n finds actions done via \nWP-CLI\n.\n\n\n\n\ndate:\n\n\nCommit date. Recommended format is \nYYYY-MM-DD\n, e.g., \ndate: 2016-01-01\n, but anything that can be parsed by \nstrtotime()\n is supported. You can use \ngreater than / less than operators\n such as \ndate: \n=2016-01-01\n or a \nrange operator\n \n..\n, for example, \ndate: 2016-01-01..2016-02-01\n. Either boundary can be replaced with a wildcard, e.g., \ndate: 2016-01-01..*\n.\n\n\nThe \ndate:\n operator has currently some limitations:\n\n\n\n\nTime portion is ignored.\n\n\nRepeating this operator is tricky and we recommend using only a single \ndate:\n at a time. For example, if you searched for \ndate:2016-01-01 date:2016-01-02\n you might expect to see commits from both of the dates, but the result would be empty because \ndate:\n uses logical AND due to technical limitations. You could use the AND logic for something like \ndate:\n2016-01-01 date:\n2016-02-01\n but we recommend you use the range operator instead.\n\n\nYou cannot search for two date periods with a gap between them. The range must be continuous.\n\n\n\n\nentity:\n, \naction:\n, \nvpid:\n\n\nAll actions tracked by VersionPress are done on some entity (\npost\n, \nuser\n, \noption\n, \npostmeta\n etc.), the action is something like \ncreate\n or \ndelete\n and every entity has a unique ID, something like \n126BBC0541B14B528C623E32EE1B497C\n. You can search for these using the operators above, most commonly by \nentity\n or \naction\n.\n\n\nWe currently don't have a good way to generate the definitive list of supported entities, you can see them in the commit messages when using a standard Git client but it's not ideal. We'll have a better way to document this in the future.\n\n\narbitrary-vp-tag:\n\n\nVP tags are pieces of metadata that VersionPress stores with each commit. For example, updating the site title creates a commit message like this:\n\n\n[VP] Edited option \nblogname\n\n\nVP-Action: option/edit/blogname\n\nX-VP-Version: 3.0\nX-VP-Environment: staging\n\n\n\n\nYou can search for VP tags, either in a full form or without the \nVP-\n / \nX-VP-\n prefix. Some examples that will work equally fine against the commit above are:\n\n\n\n\nenvironment: staging\n\n\nX-VP-Environment: staging\n\n\nVP-environment: STAGING\n\n\naction: option/edit/blogname\n\n\nVP-Action: option/edit/*\n\n\nAction: */edit/*\n\n\nvp-version: 3.0\n\n\n\n\nVP-Action actually gets a bit of a treatment because it is also an operator (see above) and quite useful. You can skip the \n/*\n wildcard as that is added automatically so something like \naction: option/edit\n will just work.\n\n\nCurrent limitations\n\n\nSearch in 3.0 does not support negative search. You cannot say something like \"author is NOT Joe\".", 
            "title": "Searching History"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#searching-history", 
            "text": "VersionPress has powerful search with syntax inspired by GitHub or Gmail. It lets you filter the main table by authors, post types, date ranges etc.   Note  Search is available since VersionPress 3.0", 
            "title": "Searching History"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#examples", 
            "text": "Let's start with a couple of examples.  hello world \nFinds changes that have the words \"hello\" and \"world\" somewhere in the change description (commit message).  hello world author:joe \nSearch operators are supported, e.g.,  author: . The search is always case insensitive so this will find 'Joe', 'JOE' etc.  hello world author: joe* date: = 2016-01-01 \nHere you can see a couple of syntax rules in play: you can combine as many operators as you like, wildcards are supported, value containing spaces must be quoted, there are optional spaces after the colon, etc.", 
            "title": "Examples"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#syntax", 
            "text": "just text ,  just text ,  w*ldcards \nSearches the commit text. Without quotes, it will look for commits containing all the words. With quotes, it does a strict match (still case in-sensitive). Single and double quotes are both supported.  operator: value \nSpace after colon is optional. Value can be quoted and wildcarded as above.  operator:value1 operator:value2 \nOperators can be repeated, their values are then combined using logical OR. For example, you can search for changes done by either Adam or Betty by using  author:Adam author:Betty . The only exception is  date:  which is AND'd, see below.  operator1:value operator2:value \nMultiple operators are combined using logical AND.  --  All of the syntaxes above can be freely combined.", 
            "title": "Syntax"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#operators", 
            "text": "", 
            "title": "Operators"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#author", 
            "text": "Author of the action. You can use author name or his/her email, wildcards are supported.  There are two special authors:   author:nonadmin@example.com  finds anonymous actions like posting a comment on a blog.  author:wp-cli  finds actions done via  WP-CLI .", 
            "title": "author:"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#date", 
            "text": "Commit date. Recommended format is  YYYY-MM-DD , e.g.,  date: 2016-01-01 , but anything that can be parsed by  strtotime()  is supported. You can use  greater than / less than operators  such as  date:  =2016-01-01  or a  range operator   .. , for example,  date: 2016-01-01..2016-02-01 . Either boundary can be replaced with a wildcard, e.g.,  date: 2016-01-01..* .  The  date:  operator has currently some limitations:   Time portion is ignored.  Repeating this operator is tricky and we recommend using only a single  date:  at a time. For example, if you searched for  date:2016-01-01 date:2016-01-02  you might expect to see commits from both of the dates, but the result would be empty because  date:  uses logical AND due to technical limitations. You could use the AND logic for something like  date: 2016-01-01 date: 2016-02-01  but we recommend you use the range operator instead.  You cannot search for two date periods with a gap between them. The range must be continuous.", 
            "title": "date:"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#entity-action-vpid", 
            "text": "All actions tracked by VersionPress are done on some entity ( post ,  user ,  option ,  postmeta  etc.), the action is something like  create  or  delete  and every entity has a unique ID, something like  126BBC0541B14B528C623E32EE1B497C . You can search for these using the operators above, most commonly by  entity  or  action .  We currently don't have a good way to generate the definitive list of supported entities, you can see them in the commit messages when using a standard Git client but it's not ideal. We'll have a better way to document this in the future.", 
            "title": "entity:, action:, vpid:"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#arbitrary-vp-tag", 
            "text": "VP tags are pieces of metadata that VersionPress stores with each commit. For example, updating the site title creates a commit message like this:  [VP] Edited option  blogname \n\nVP-Action: option/edit/blogname\n\nX-VP-Version: 3.0\nX-VP-Environment: staging  You can search for VP tags, either in a full form or without the  VP-  /  X-VP-  prefix. Some examples that will work equally fine against the commit above are:   environment: staging  X-VP-Environment: staging  VP-environment: STAGING  action: option/edit/blogname  VP-Action: option/edit/*  Action: */edit/*  vp-version: 3.0   VP-Action actually gets a bit of a treatment because it is also an operator (see above) and quite useful. You can skip the  /*  wildcard as that is added automatically so something like  action: option/edit  will just work.", 
            "title": "arbitrary-vp-tag:"
        }, 
        {
            "location": "/en/feature-focus/searching-history/#current-limitations", 
            "text": "Search in 3.0 does not support negative search. You cannot say something like \"author is NOT Joe\".", 
            "title": "Current limitations"
        }, 
        {
            "location": "/en/feature-focus/external-plugins/", 
            "text": "External Plugins and Themes\n\n\nPlease see the \nIntegrations\n section \u2013 the content has been moved and reorganized there.", 
            "title": "External Plugins and Themes"
        }, 
        {
            "location": "/en/feature-focus/external-plugins/#external-plugins-and-themes", 
            "text": "Please see the  Integrations  section \u2013 the content has been moved and reorganized there.", 
            "title": "External Plugins and Themes"
        }, 
        {
            "location": "/en/feature-focus/custom-project-structure/", 
            "text": "Custom Project Structure\n\n\nSome advanced users like having WordPress in its own directory or move plugins, themes or uploads in another directory. VersionPress supports some scenarios. Just remember that all files related to the site have to be under the project root (\nVP_PROJECT_ROOT\n).\n\n\n\n\nWarning\n\n\nYou need to adjust your project structure \nbefore\n fully initalizing VersionPress. The recommended procedure is:\n\n\n\n\nCustomize your WordPress site structure.\n\n\nInstall and active VersionPress, the plugin \u2013 do \nnot\n go through the full initialization yet.\n\n\nFollow the instructions below, i.e., set some config constant like \nVP_PROJECT_ROOT\n.\n\n\nInitialize VersionPress.\n\n\n\n\n\n\nGiving WordPress its own directory\n\n\nYou can move WordPress into its own directory by following \ninstructions on Codex\n. However, there is one extra step. You need to define \nVP_PROJECT_ROOT\n constant to let VersionPress know where it should create the repository. See the \nconfiguration page\n for instructions.\n\n\n\n\n.git directory\n\n\nBe sure that the \n.git\n directory stays in the root directory if the project is already versioned.\n\n\n\n\nMoving wp-content, plugin or uploads directories\n\n\nIt is possible to move these folders by following \ninstructions on Codex\n. Be sure that you define constants referencing directories in the \nwp-config.common.php\n and constants containing URLs in the \nwp-config.php\n if VersionPress is already active.\n\n\nMoving VPDB directory\n\n\nYou can also rename or move the directory where VersionPress saves all its data. Use constant \nVP_VPDB_DIR\n to get it done. See the \nconfiguration page\n for instructions.\n\n\n\n\nNote\n\n\nIt will NOT be possible to undo changes before moving the directory.", 
            "title": "Custom Project Structure"
        }, 
        {
            "location": "/en/feature-focus/custom-project-structure/#custom-project-structure", 
            "text": "Some advanced users like having WordPress in its own directory or move plugins, themes or uploads in another directory. VersionPress supports some scenarios. Just remember that all files related to the site have to be under the project root ( VP_PROJECT_ROOT ).   Warning  You need to adjust your project structure  before  fully initalizing VersionPress. The recommended procedure is:   Customize your WordPress site structure.  Install and active VersionPress, the plugin \u2013 do  not  go through the full initialization yet.  Follow the instructions below, i.e., set some config constant like  VP_PROJECT_ROOT .  Initialize VersionPress.", 
            "title": "Custom Project Structure"
        }, 
        {
            "location": "/en/feature-focus/custom-project-structure/#giving-wordpress-its-own-directory", 
            "text": "You can move WordPress into its own directory by following  instructions on Codex . However, there is one extra step. You need to define  VP_PROJECT_ROOT  constant to let VersionPress know where it should create the repository. See the  configuration page  for instructions.   .git directory  Be sure that the  .git  directory stays in the root directory if the project is already versioned.", 
            "title": "Giving WordPress its own directory"
        }, 
        {
            "location": "/en/feature-focus/custom-project-structure/#moving-wp-content-plugin-or-uploads-directories", 
            "text": "It is possible to move these folders by following  instructions on Codex . Be sure that you define constants referencing directories in the  wp-config.common.php  and constants containing URLs in the  wp-config.php  if VersionPress is already active.", 
            "title": "Moving wp-content, plugin or uploads directories"
        }, 
        {
            "location": "/en/feature-focus/custom-project-structure/#moving-vpdb-directory", 
            "text": "You can also rename or move the directory where VersionPress saves all its data. Use constant  VP_VPDB_DIR  to get it done. See the  configuration page  for instructions.   Note  It will NOT be possible to undo changes before moving the directory.", 
            "title": "Moving VPDB directory"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/", 
            "text": "WP-CLI Commands\n\n\nFor advanced usage, VersionPress comes with several \nWP-CLI\n commands. They are useful in two main scenarios:\n\n\n\n\nYou prefer doing some actions from the command line\n\n\nYou need to interact with VersionPress when the admin backed is not available for some reason, for example, after a failed update\n\n\n\n\nAs a note, we absolutely love WP-CLI. If you haven't come across this project before we recommend you familiarize yourself with what it can do at \nwp-cli.org\n.\n\n\nInstalling WP-CLI\n\n\nWP-CLI runs best on UNIX-like systems (Linux, Mac OS X, Cygwin..) but we test our commands on Windows as well, and they work fine.\n\n\nHere is an \noverview of all the supported installation methods\n, we'll just assume for the rest of this page that the \nwp\n command is available in the console and executing \nwp --info\n prints a standard output.\n\n\nWorking with VersionPress commands\n\n\nWhen VersionPress is installed \nand activated\n on the plugins screen, \ncd\n into the site root and run:\n\n\n$ wp vp \ncommand\n \nparameters\n\n\n\n\n\nIf VersionPress is not active or cannot be active, for example, in case of a broken site, use \n--require\n to load a specific WP-CLI command. For example, \nrestore-site\n will usually need this so it will be called like this:\n\n\n$ wp vp restore-site --siteurl\n=\nhttp://localhost/mysite\n --require\n=\nwp-content/plugins/versionpress/src/Cli/vp.php\n\n\n\n\nCommand reference\n\n\nGenerally, \nuse \nwp help\n as the primary source of information\n as that will always be 100% up to date. Below is a descriptive overview of the commands available.\n\n\nvp config\n\n\nConfigures VersionPress. See \nconfiguration\n.\n\n\nvp undo\n\n\nUndoes a commit.\n\n\nIt is the same action as clicking the \nUndo this\n button in the admin screen, and it can fail for the same reasons: invalid referential integrity (e.g., trying to restore a comment for which the post no longer exists), conflict (undoing something conflicts with a newer update of the same entity) and working directory not being clean (possible loss of user changes). In that cases, \nundo\n will simply do nothing.\n\n\nTakes a commit SHA-1 as an argument and which can either be a full SHA1 like \n4dadc69147fd19c8f6d9451aea1ded0de56cccf3\n or a shorter one like the first 7 chars only. It follows the \nsame rules as Git\n.\n\n\nExamples:\n\n\n$ wp vp undo a34bc28\n\n\n\n\nvp rollback\n\n\nReverts site to a previous state.\n\n\nIt is the same action as clicking the \nRoll back to this\n button in the admin screen.\n\n\nTakes a commit SHA-1 as an argument and which can either be a full SHA1 like \n4dadc69147fd19c8f6d9451aea1ded0de56cccf3\n or a shorter one like the first 7 chars only. It follows the \nsame rules as Git\n.\n\n\nExamples:\n\n\n$ wp vp rollback a34bc28\n\n\n\n\nvp restore-site\n\n\nRestores site from a Git repository.\n\n\nYou will typically use this command in two main situations:\n\n\n\n\nSomething \nwent really wrong with the database\n and you want to restore it\n\n\nYou want to restore a site \njust from a Git repository\n, e.g., after a fresh clone from GitHub on a new machine\n\n\n\n\nLet's focus on the first scenario now. In the worst case, you completely lost the database and running \nwp vp restore-site\n then will basically work like a restore of a backup, i.e., it will re-create the database tables (for tables that VersionPress can restore; it will leave other tables in the database alone so for example it will \nnot\n do anything with tables that are not WordPress related) and fill it with the site's data. This is useful also when the database was not completely lost, just something went wrong with it, e.g. by some plugin bug, human error and so on. Again, \nwp vp restore-site\n will just bring it back to an OK state.\n\n\nNote that with this command, you will \nneed to include the \n--require=...\n parameter\n because on a broken or non-existent site, WP-CLI will not be able to automatically detect the \nvp\n command. The complete command invocation will usually look like this:\n\n\n$ wp vp restore-site --siteurl\n=\nhttp://localhost/mysite\n --require\n=\nwp-content/plugins/versionpress/src/Cli/vp.php\n\n\n\n\nThe other, \ndevelopment scenario\n assumes that the only thing you have is a Git clone of a site. That is quite extreme because not only you don't have a database at all but you also don't have these two vital things due to the fact that VersionPress doesn't store them in the Git repo (for good reasons \ndescribed here\n):\n\n\n\n\nwp-config.php\n\n\nVersionPress itself, i.e., \nwp-content/plugins/versionpress\n\n\n\n\nThe second point means that you can't immediately run \nwp vp restore-site\n because there is no such thing as a \nvp\n command yet on the site. Follow these steps:\n\n\n\n\nManually put VersionPress into to \nwp-content/plugins/versionpress\n folder.\n\n\nRun \nwp core config\n from the site root to setup the database.\n\n\nRun \nwp vp restore-site\n with \nsiteurl\n and \nrequire\n parameters.\n\n\nEnjoy your up and running site.\n\n\n\n\nvp clone\n\n\nClones site to a new folder, database and Git branch. See \nCloning a site\n.\n\n\nvp pull\n\n\nPulls changes from another site instance and creates a merge if necessary. See \nmerging\n.\n\n\nvp push\n\n\nPushes changes to another site instance. Does not create a merge; see \nmerging\n.\n\n\nvp apply-changes\n\n\nApplies changes found on the disk to the database. Useful e.g. after resolving merge conflicts. See \nmerging\n.\n\n\nvp check-requirements\n\n\nChecks if all requirements for using VersionPress are met on the target environment.\n\n\nThis command is useful when you make changes on the server and want to check whether VersionPress requirements are still met.\n\n\nNote that you will mostly \nneed to include the \n--require=...\n parameter\n.", 
            "title": "WP-CLI Commands"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#wp-cli-commands", 
            "text": "For advanced usage, VersionPress comes with several  WP-CLI  commands. They are useful in two main scenarios:   You prefer doing some actions from the command line  You need to interact with VersionPress when the admin backed is not available for some reason, for example, after a failed update   As a note, we absolutely love WP-CLI. If you haven't come across this project before we recommend you familiarize yourself with what it can do at  wp-cli.org .", 
            "title": "WP-CLI Commands"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#installing-wp-cli", 
            "text": "WP-CLI runs best on UNIX-like systems (Linux, Mac OS X, Cygwin..) but we test our commands on Windows as well, and they work fine.  Here is an  overview of all the supported installation methods , we'll just assume for the rest of this page that the  wp  command is available in the console and executing  wp --info  prints a standard output.", 
            "title": "Installing WP-CLI"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#working-with-versionpress-commands", 
            "text": "When VersionPress is installed  and activated  on the plugins screen,  cd  into the site root and run:  $ wp vp  command   parameters   If VersionPress is not active or cannot be active, for example, in case of a broken site, use  --require  to load a specific WP-CLI command. For example,  restore-site  will usually need this so it will be called like this:  $ wp vp restore-site --siteurl = http://localhost/mysite  --require = wp-content/plugins/versionpress/src/Cli/vp.php", 
            "title": "Working with VersionPress commands"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#command-reference", 
            "text": "Generally,  use  wp help  as the primary source of information  as that will always be 100% up to date. Below is a descriptive overview of the commands available.", 
            "title": "Command reference"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-config", 
            "text": "Configures VersionPress. See  configuration .", 
            "title": "vp config"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-undo", 
            "text": "Undoes a commit.  It is the same action as clicking the  Undo this  button in the admin screen, and it can fail for the same reasons: invalid referential integrity (e.g., trying to restore a comment for which the post no longer exists), conflict (undoing something conflicts with a newer update of the same entity) and working directory not being clean (possible loss of user changes). In that cases,  undo  will simply do nothing.  Takes a commit SHA-1 as an argument and which can either be a full SHA1 like  4dadc69147fd19c8f6d9451aea1ded0de56cccf3  or a shorter one like the first 7 chars only. It follows the  same rules as Git .  Examples:  $ wp vp undo a34bc28", 
            "title": "vp undo"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-rollback", 
            "text": "Reverts site to a previous state.  It is the same action as clicking the  Roll back to this  button in the admin screen.  Takes a commit SHA-1 as an argument and which can either be a full SHA1 like  4dadc69147fd19c8f6d9451aea1ded0de56cccf3  or a shorter one like the first 7 chars only. It follows the  same rules as Git .  Examples:  $ wp vp rollback a34bc28", 
            "title": "vp rollback"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-restore-site", 
            "text": "Restores site from a Git repository.  You will typically use this command in two main situations:   Something  went really wrong with the database  and you want to restore it  You want to restore a site  just from a Git repository , e.g., after a fresh clone from GitHub on a new machine   Let's focus on the first scenario now. In the worst case, you completely lost the database and running  wp vp restore-site  then will basically work like a restore of a backup, i.e., it will re-create the database tables (for tables that VersionPress can restore; it will leave other tables in the database alone so for example it will  not  do anything with tables that are not WordPress related) and fill it with the site's data. This is useful also when the database was not completely lost, just something went wrong with it, e.g. by some plugin bug, human error and so on. Again,  wp vp restore-site  will just bring it back to an OK state.  Note that with this command, you will  need to include the  --require=...  parameter  because on a broken or non-existent site, WP-CLI will not be able to automatically detect the  vp  command. The complete command invocation will usually look like this:  $ wp vp restore-site --siteurl = http://localhost/mysite  --require = wp-content/plugins/versionpress/src/Cli/vp.php  The other,  development scenario  assumes that the only thing you have is a Git clone of a site. That is quite extreme because not only you don't have a database at all but you also don't have these two vital things due to the fact that VersionPress doesn't store them in the Git repo (for good reasons  described here ):   wp-config.php  VersionPress itself, i.e.,  wp-content/plugins/versionpress   The second point means that you can't immediately run  wp vp restore-site  because there is no such thing as a  vp  command yet on the site. Follow these steps:   Manually put VersionPress into to  wp-content/plugins/versionpress  folder.  Run  wp core config  from the site root to setup the database.  Run  wp vp restore-site  with  siteurl  and  require  parameters.  Enjoy your up and running site.", 
            "title": "vp restore-site"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-clone", 
            "text": "Clones site to a new folder, database and Git branch. See  Cloning a site .", 
            "title": "vp clone"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-pull", 
            "text": "Pulls changes from another site instance and creates a merge if necessary. See  merging .", 
            "title": "vp pull"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-push", 
            "text": "Pushes changes to another site instance. Does not create a merge; see  merging .", 
            "title": "vp push"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-apply-changes", 
            "text": "Applies changes found on the disk to the database. Useful e.g. after resolving merge conflicts. See  merging .", 
            "title": "vp apply-changes"
        }, 
        {
            "location": "/en/feature-focus/wp-cli/#vp-check-requirements", 
            "text": "Checks if all requirements for using VersionPress are met on the target environment.  This command is useful when you make changes on the server and want to check whether VersionPress requirements are still met.  Note that you will mostly  need to include the  --require=...  parameter .", 
            "title": "vp check-requirements"
        }, 
        {
            "location": "/en/feature-focus/git/", 
            "text": "Versioning Engine - Git\n\n\nUnder the hood, VersionPress relies on \nGit\n which is one of the most wide-spread version control systems in the world. It was an important decision up-front that brings many benefits but also one trade-off in form of higher system requirements (Git is currently required on the server). This page discusses why we chose Git and why it's such an important decision for the project.\n\n\nWhy Git\n\n\nGit was a perfect fit for VersionPress for a couple of reasons:\n\n\n\n\nIt is a \nworld-class, proven system\n. Many large and important projects depend on it (Android, Linux and \nmany others\n; even WordPress itself has a \nGit mirror\n).\n\n\nIt is \nopen source\n and \ncross-platform\n.\n\n\nGit is \ndecentralized\n. It will happily maintain history on a local computer without ever sending the data anywhere \u2013 important for your privacy and important for how VersionPress works.\n\n\nIt has a huge \ncommunity and ecosystem\n around it. There are many 3\nrd\n party tools and services that work well with Git.\n\n\n\n\nHow this benefits you\n\n\nOne practical benefit is that VersionPress repository is just a plain Git repository that you (if you are a power user) can work with the same way as with any other Git repo. For example, you can set up your own Git server and push your work there. Or you can push to GitHub, BitBucket and other Git hosting sites. Or you can inspect this site history in command line tools.\n\n\nOne thing that is especially worth pointing out is that \nyou can actively update the repository\n. It is not \"reserved\", \"locked\" or anything like that for VersionPress. You can even start with an existing Git repo in place \u2013 VersionPress will not overwrite it, it will just commit into it. Symmetrically, if you decide to stop using VersionPress you can still continue using the Git repo for later manual commits.\n\n\nThis really opens a whole new world for advanced WordPress admins.", 
            "title": "Versioning Engine - Git"
        }, 
        {
            "location": "/en/feature-focus/git/#versioning-engine-git", 
            "text": "Under the hood, VersionPress relies on  Git  which is one of the most wide-spread version control systems in the world. It was an important decision up-front that brings many benefits but also one trade-off in form of higher system requirements (Git is currently required on the server). This page discusses why we chose Git and why it's such an important decision for the project.", 
            "title": "Versioning Engine - Git"
        }, 
        {
            "location": "/en/feature-focus/git/#why-git", 
            "text": "Git was a perfect fit for VersionPress for a couple of reasons:   It is a  world-class, proven system . Many large and important projects depend on it (Android, Linux and  many others ; even WordPress itself has a  Git mirror ).  It is  open source  and  cross-platform .  Git is  decentralized . It will happily maintain history on a local computer without ever sending the data anywhere \u2013 important for your privacy and important for how VersionPress works.  It has a huge  community and ecosystem  around it. There are many 3 rd  party tools and services that work well with Git.", 
            "title": "Why Git"
        }, 
        {
            "location": "/en/feature-focus/git/#how-this-benefits-you", 
            "text": "One practical benefit is that VersionPress repository is just a plain Git repository that you (if you are a power user) can work with the same way as with any other Git repo. For example, you can set up your own Git server and push your work there. Or you can push to GitHub, BitBucket and other Git hosting sites. Or you can inspect this site history in command line tools.  One thing that is especially worth pointing out is that  you can actively update the repository . It is not \"reserved\", \"locked\" or anything like that for VersionPress. You can even start with an existing Git repo in place \u2013 VersionPress will not overwrite it, it will just commit into it. Symmetrically, if you decide to stop using VersionPress you can still continue using the Git repo for later manual commits.  This really opens a whole new world for advanced WordPress admins.", 
            "title": "How this benefits you"
        }, 
        {
            "location": "/en/feature-focus/performance/", 
            "text": "Performance Considerations\n\n\nVersionPress generally consumes server resources only after some change has occurred on the web site while for read-only requests, it adds hardly any overhead at all (WordPress fetches the data like if there was no VersionPress).\n\n\nIf you have a site that is very write-heavy then VersionPress might not be a good fit but for most websites out there where 99% of web requests are read-only, VersionPress is not a performance bottleneck. There are a couple of operations that are slow, however:\n\n\nSlow operations\n\n\nReverts\n\n\nIf there is one category of operations that is generally slow, it's reverts. It takes some time to Git itself to do the revert on the file-system level and VersionPress then spends some more time to reflect those changes into a database. We have done some significant performance optimizations in this area already so it's not too bad but still, reverts are generally slower than all other actions VersionPress does.\n\n\nInitialization\n\n\nThe other slow operation, that you'll fortunately encounter very rarely, ideally once, is the initial activation, or, initialization. When VersionPress first creates a mirror of the site in the Git repository, it basically needs to go through the whole database, extract data from it and commit it to the repository together with all the files. This can take many seconds or even minutes for large sites. The pre-activation screen will try to make an estimate of how many entities are there in the database and whether PHP time limit should allow it to run but if you encounter any issues, try increasing the timeout or allocate more hardware resources to the site.", 
            "title": "Performance Considerations"
        }, 
        {
            "location": "/en/feature-focus/performance/#performance-considerations", 
            "text": "VersionPress generally consumes server resources only after some change has occurred on the web site while for read-only requests, it adds hardly any overhead at all (WordPress fetches the data like if there was no VersionPress).  If you have a site that is very write-heavy then VersionPress might not be a good fit but for most websites out there where 99% of web requests are read-only, VersionPress is not a performance bottleneck. There are a couple of operations that are slow, however:", 
            "title": "Performance Considerations"
        }, 
        {
            "location": "/en/feature-focus/performance/#slow-operations", 
            "text": "", 
            "title": "Slow operations"
        }, 
        {
            "location": "/en/feature-focus/performance/#reverts", 
            "text": "If there is one category of operations that is generally slow, it's reverts. It takes some time to Git itself to do the revert on the file-system level and VersionPress then spends some more time to reflect those changes into a database. We have done some significant performance optimizations in this area already so it's not too bad but still, reverts are generally slower than all other actions VersionPress does.", 
            "title": "Reverts"
        }, 
        {
            "location": "/en/feature-focus/performance/#initialization", 
            "text": "The other slow operation, that you'll fortunately encounter very rarely, ideally once, is the initial activation, or, initialization. When VersionPress first creates a mirror of the site in the Git repository, it basically needs to go through the whole database, extract data from it and commit it to the repository together with all the files. This can take many seconds or even minutes for large sites. The pre-activation screen will try to make an estimate of how many entities are there in the database and whether PHP time limit should allow it to run but if you encounter any issues, try increasing the timeout or allocate more hardware resources to the site.", 
            "title": "Initialization"
        }, 
        {
            "location": "/en/sync/", 
            "text": "Sync / Team Workflows\n\n\nThis sections discusses how VersionPress handles multiple site instances like \nstaging\n and \nlive\n, cloning and merging between them, etc.\n\n\nSee also the \nblog post on staging\n.\n\n\n\n\nAvailable since VersionPress 2.0\n\n\nThe functionality described in this section is available since the \n2.0 release\n.", 
            "title": "Sync / Team Workflows Home"
        }, 
        {
            "location": "/en/sync/#sync-team-workflows", 
            "text": "This sections discusses how VersionPress handles multiple site instances like  staging  and  live , cloning and merging between them, etc.  See also the  blog post on staging .   Available since VersionPress 2.0  The functionality described in this section is available since the  2.0 release .", 
            "title": "Sync / Team Workflows"
        }, 
        {
            "location": "/en/sync/concepts/", 
            "text": "Concepts\n\n\nPrevious sections focused on using VersionPress on a single site, or more precisely, on a single site \ninstance\n. It offers many useful features there but where it truly shines is when it comes to \nmultiple instances\n (\nclones\n of the WP site, \nenvironments\n if you will) and \nsynchronization\n between them.\n\n\n\n\nTerminology\n\n\nThe terms \nclone\n, \nWP instance\n, \ninstallation\n, \nenvironment\n etc. all represent the same concept and are used interchangeably here.\n\n\n\n\nWhy multiple instances\n\n\nThere are two main reasons why you would want to have two or more instances of a WordPress site:\n\n\n\n\nSafe testing environment (\nstaging\n)\n\n\nTeam workflows\n\n\n\n\nA \nsafe testing environment\n is essential when you have a larger or risky change like trying out a new plugin, changing a theme or upgrading WordPress. While it is true that VersionPress greatly helps with the Undo / Rollback functionality even on the live site, it is even better to test those changes beforehand. The technique of this is sometimes broadly referred to as staging.\n\n\nAnother common scenario is \nteam work\n. On many projects, several people cooperate to get the work done, from developers, designers to copywriters. The best way to organize such work is to have a separate environment for each person involved so that there is no interference or disruption during the development period.\n\n\nThere is a \ncommon problem\n though: while it is simple to create multiple instances of a site, it is generally very hard to \nmerge\n them back together. And you need a merge because simply replacing one site with another could lose newer changes there.\n\n\nThat's where VersionPress comes in.\n\n\nCloning and merging with VersionPress\n\n\nLet's discuss a workflow that seems basic but actually covers almost any real-world scenario \u2013 you can use it for staging, team work, hosting the repository on GitHub, almost anything.\n\n\n\n\nSee Also\n\n\nThe workflow has been showcased in the blog post \nVersionPress 2.0: Easy Staging\n.\n\n\n\n\n(1)\n You start by \ncloning a site\n. That creates a new site instance that looks exactly like the original one but with its own files and database tables. Technically, it is a separate WordPress installation.\n\n\n(2)\n Then you \ndo the work\n there. You can experiment with new stuff, you can break things, it doesn't matter as the environment is completely separate and safe. If things go too crazy, you can always start over and clone from the origin again.\n\n\nThen, at some point, you're happy with the result and  you're going to \n(3)\n \nmerge\n the changes back. In VersionPress' (and Git's) terminology, you're going to \npush\n or \npull\n changes between environments.\n\n\nIn most cases, the merge will be fully automatic and painless. However, a \nconflict\n might also occur. This happens when two different edits are done to the same piece of data, for example, when two copywriters edit the same paragraph or the site title is updated differently in two environments.\n\n\n(4)\n In such case, the \nconflict needs to be resolved\n. This is always a human work and currently, we do not have a user interface for that but because VersionPress is powered by Git and very close to it, you can (and currently need to) do it manually. When the conflict is resolved, you commit the result and run a special synchronization command as discussed in the \nmerging\n topic again.\n\n\nThat's all there is to it, really. Happy cloning \n merging!", 
            "title": "Concepts"
        }, 
        {
            "location": "/en/sync/concepts/#concepts", 
            "text": "Previous sections focused on using VersionPress on a single site, or more precisely, on a single site  instance . It offers many useful features there but where it truly shines is when it comes to  multiple instances  ( clones  of the WP site,  environments  if you will) and  synchronization  between them.   Terminology  The terms  clone ,  WP instance ,  installation ,  environment  etc. all represent the same concept and are used interchangeably here.", 
            "title": "Concepts"
        }, 
        {
            "location": "/en/sync/concepts/#why-multiple-instances", 
            "text": "There are two main reasons why you would want to have two or more instances of a WordPress site:   Safe testing environment ( staging )  Team workflows   A  safe testing environment  is essential when you have a larger or risky change like trying out a new plugin, changing a theme or upgrading WordPress. While it is true that VersionPress greatly helps with the Undo / Rollback functionality even on the live site, it is even better to test those changes beforehand. The technique of this is sometimes broadly referred to as staging.  Another common scenario is  team work . On many projects, several people cooperate to get the work done, from developers, designers to copywriters. The best way to organize such work is to have a separate environment for each person involved so that there is no interference or disruption during the development period.  There is a  common problem  though: while it is simple to create multiple instances of a site, it is generally very hard to  merge  them back together. And you need a merge because simply replacing one site with another could lose newer changes there.  That's where VersionPress comes in.", 
            "title": "Why multiple instances"
        }, 
        {
            "location": "/en/sync/concepts/#cloning-and-merging-with-versionpress", 
            "text": "Let's discuss a workflow that seems basic but actually covers almost any real-world scenario \u2013 you can use it for staging, team work, hosting the repository on GitHub, almost anything.   See Also  The workflow has been showcased in the blog post  VersionPress 2.0: Easy Staging .   (1)  You start by  cloning a site . That creates a new site instance that looks exactly like the original one but with its own files and database tables. Technically, it is a separate WordPress installation.  (2)  Then you  do the work  there. You can experiment with new stuff, you can break things, it doesn't matter as the environment is completely separate and safe. If things go too crazy, you can always start over and clone from the origin again.  Then, at some point, you're happy with the result and  you're going to  (3)   merge  the changes back. In VersionPress' (and Git's) terminology, you're going to  push  or  pull  changes between environments.  In most cases, the merge will be fully automatic and painless. However, a  conflict  might also occur. This happens when two different edits are done to the same piece of data, for example, when two copywriters edit the same paragraph or the site title is updated differently in two environments.  (4)  In such case, the  conflict needs to be resolved . This is always a human work and currently, we do not have a user interface for that but because VersionPress is powered by Git and very close to it, you can (and currently need to) do it manually. When the conflict is resolved, you commit the result and run a special synchronization command as discussed in the  merging  topic again.  That's all there is to it, really. Happy cloning   merging!", 
            "title": "Cloning and merging with VersionPress"
        }, 
        {
            "location": "/en/sync/cloning/", 
            "text": "Cloning a Site\n\n\nCloning a site creates a separate WordPress instance that looks like the original one but doesn't share any of its files or database tables. Making changes in the clone doesn't affect the original site in any way, until those changes are \nmerged\n back.\n\n\nThe 'clone' command\n\n\nCurrently, the cloning functionality is exposed via a WP-CLI command. You need to have \nWP-CLI installed and working\n on your machine.\n\n\nCloning is started from the root of the site by executing the \nvp clone\n command. In its simplest form, it only needs the \n--name\n parameter:\n\n\nwp vp clone --name\n=\nstaging\n\n\n\n\nIf the site was \nC:\\www\\mysite\n and it was served as \nhttp://localhost/mysite\n, the command did the following:\n\n\n\n\nCreated a new folder \nC:\\www\\staging\n and cloned the site files there\n\n\nCreated database tables prefixed with \nwp_staging_...\n and filled them with data\n\n\nMade the site available at \nhttp://localhost/staging\n\n\n\n\nThe original site also stored a named reference to the clone so for instance, you can later \npull\n from the clone by executing a command like \nwp vp pull --from=staging\n.\n\n\nThe URL and database settings are all configurable so for example, you could run the command like this:\n\n\nwp vp clone --name\n=\nstaging\n            --dbname\n=\nstaging_db\n            --dbuser\n=\n...\n            --siteurl\n=\nhttp://staging.mysite.dev/\n\n\n\n\nFull help is available by running \nwp help vp clone\n.", 
            "title": "Cloning a Site"
        }, 
        {
            "location": "/en/sync/cloning/#cloning-a-site", 
            "text": "Cloning a site creates a separate WordPress instance that looks like the original one but doesn't share any of its files or database tables. Making changes in the clone doesn't affect the original site in any way, until those changes are  merged  back.", 
            "title": "Cloning a Site"
        }, 
        {
            "location": "/en/sync/cloning/#the-clone-command", 
            "text": "Currently, the cloning functionality is exposed via a WP-CLI command. You need to have  WP-CLI installed and working  on your machine.  Cloning is started from the root of the site by executing the  vp clone  command. In its simplest form, it only needs the  --name  parameter:  wp vp clone --name = staging  If the site was  C:\\www\\mysite  and it was served as  http://localhost/mysite , the command did the following:   Created a new folder  C:\\www\\staging  and cloned the site files there  Created database tables prefixed with  wp_staging_...  and filled them with data  Made the site available at  http://localhost/staging   The original site also stored a named reference to the clone so for instance, you can later  pull  from the clone by executing a command like  wp vp pull --from=staging .  The URL and database settings are all configurable so for example, you could run the command like this:  wp vp clone --name = staging\n            --dbname = staging_db\n            --dbuser = ...\n            --siteurl = http://staging.mysite.dev/  Full help is available by running  wp help vp clone .", 
            "title": "The 'clone' command"
        }, 
        {
            "location": "/en/sync/merging/", 
            "text": "Merging Sites\n\n\nAfter you \ncreated a clone\n of a site and tested the changes, you want to merge them back. Merge is an operation that maintains changes from both environments (as opposed to a copy\npaste / replace operation which is destructive by nature) and is achieved by a \npull\n command in VersionPress. The result can then be \npushed\n to another site instance, for example, the live site.\n\n\n\n\nNote\n\n\nThere is \nno 'merge' command\n. While the operation indeed does a merge, what you're really doing is pulling and pushing the changes between two environments. Git calls these commands \npush\n and \npull\n, and so do we. \nmerge\n in Git is used for merging between \nbranches\n, not clones, and we might introduce such command in the future when/if we support branches as well.\n\n\n\n\nMerge usually works automatically, however, there might be \nconflicts\n if a conflicting change has been done to a single piece of data. In such case, you need to \nresolve\n the conflict manually and commit the result using the \ngit commit\n + \nvp apply-changes\n commands.\n\n\nPulling and pushing changes\n\n\nThe important thing to realize that there is a \ndirection\n to these commands. You always push / pull between two environments and you need to stand in one of them to run the command, which determines the direction.\n\n\nPull\n fetches the changes from the other environment and \ndoes the merge\n. Well, that is the most common result but there might also be two others:\n\n\n\n\nIf there were no concurrent changes in the remote environment, no merge commit is created. The history will remain linear which is a so called \"fast-forward\" merge in the Git terminology.\n\n\nThere might have been merge conflicts, in which case the merge commit is postponed until after the conflicts are resolved. See a separate section below on that.\n\n\n\n\nPush\n is the opposite command but somewhat simpler because \nit doesn't do a merge\n. It will only succeed if there are no changes in the target environment. You typically push only after a pull.\n\n\nExamples\n\n\nLet's go through a couple of scenarios to see the commands in action.\n\n\n\n\nNote\n\n\nPush and pull are currently implemented as WP-CLI commands. You need to have \nWP-CLI installed and working\n on your machine.\n\n\n\n\nLet's start with the main site, e.g., \"live\", living in \nsome path\n/www/live\n and served from \nhttp://example.com/live\n. We want to create a staging environment so we call:\n\n\nwp vp clone --name\n=\nstaging\n\n\n\n\nThat creates a clone in \nwww/staging\n, running at \nhttp://example.com/staging\n (configurable, see \ncloning\n for more). Then we do some changes in this staging environment via the web.\n\n\nWhen done, we \ncd\n into the \nstaging\n folder and run:\n\n\n# /www/staging\n\nwp vp pull\n\n\n\n\nWe don't need to provide any additional parameters because by default, VersionPress will pull from the environment where this clone originated (in Git's language, it's called the \norigin\n). If we wanted to be explicit, this would have the same effect:\n\n\n# /www/staging\n\nwp vp pull --from\n=\norigin\n\n\n\n\nHere, the use of \norigin\n doesn't really add any value but sometimes, the \n--from\n parameter might be useful. For instance, if we wanted to pull changes from the staging environment into the live site, we would run this:\n\n\n# /www/live\n\nwp vp pull --from\n=\nstaging\n\n\n\n\nIn either case, the result is an updated site with both the local changes and the changes pulled from the other environment. A merge was performed here.\n\n\nThe push command is useful when we performed the pull standing in the \nstaging\n folder. In that case, we see the merged environment on the staging site but not on the live site yet. We need to push:\n\n\nwp vp push\n\n\n\n\nAgain, there is no need to provide the \n--to=origin\n parameter as \norigin\n is the default target of our clone. After this command, the live site is updated and looks exactly like the staging clone.\n\n\nResolving conflicts\n\n\nConflicts happen when one piece of data is updated in two environments, independently. Conflicts need to be resolved by a human as someone needs to decide which change to keep and which change to discard.\n\n\nConflicts can happen during the \npull\n command as it is the only one doing the merge. You will be given two options:\n\n\n\n\nKeep the conflict\n so that it can be resolved manually \nand\n keep the maintenance mode on\n (all merging / synchronization is always done under the maintenance mode; the site cannot be working while the conflict markers are in place). You'll typically choose this in a safe environment like staging or dev where downtime isn't that much of an issue.\n\n\nAbort the pull and turn the maintenance mode off\n. If you choose this, all will be like the pull never ran. You'll probably want to choose this on the live site where you cannot afford extensive downtime.\n\n\n\n\nTo resolve the actual conflict, after you've chosen the first option above, do this:\n\n\n\n\nResolve conflict\n manually with a standard Git workflow. There are \nmany\n \ngood\n \nresources\n on this but generally:\n\n\nResolve the conflict by editing the text files (in your favorite editor or a merge tool like KDiff3, WinMerge etc.)\n\n\nStage files\n\n\nCommit them\n\n\n\n\n\n\nRun the \napply-changes\n command: \nwp vp apply-changes\n\n\n\n\nAfter this, the conflicts are resolved and the resulting state with all the changes applied is visible on the WordPress site.\n\n\n\n\nTip\n\n\nThe \nvp apply-changes\n command can also be used outside of the conflict resolution scenario. For example, if you do a Git revert manually or edit some file in \nvpdb\n, you can then run \nvp apply-changes\n to see them reflected in the database and the running site.", 
            "title": "Merging Sites"
        }, 
        {
            "location": "/en/sync/merging/#merging-sites", 
            "text": "After you  created a clone  of a site and tested the changes, you want to merge them back. Merge is an operation that maintains changes from both environments (as opposed to a copy paste / replace operation which is destructive by nature) and is achieved by a  pull  command in VersionPress. The result can then be  pushed  to another site instance, for example, the live site.   Note  There is  no 'merge' command . While the operation indeed does a merge, what you're really doing is pulling and pushing the changes between two environments. Git calls these commands  push  and  pull , and so do we.  merge  in Git is used for merging between  branches , not clones, and we might introduce such command in the future when/if we support branches as well.   Merge usually works automatically, however, there might be  conflicts  if a conflicting change has been done to a single piece of data. In such case, you need to  resolve  the conflict manually and commit the result using the  git commit  +  vp apply-changes  commands.", 
            "title": "Merging Sites"
        }, 
        {
            "location": "/en/sync/merging/#pulling-and-pushing-changes", 
            "text": "The important thing to realize that there is a  direction  to these commands. You always push / pull between two environments and you need to stand in one of them to run the command, which determines the direction.  Pull  fetches the changes from the other environment and  does the merge . Well, that is the most common result but there might also be two others:   If there were no concurrent changes in the remote environment, no merge commit is created. The history will remain linear which is a so called \"fast-forward\" merge in the Git terminology.  There might have been merge conflicts, in which case the merge commit is postponed until after the conflicts are resolved. See a separate section below on that.   Push  is the opposite command but somewhat simpler because  it doesn't do a merge . It will only succeed if there are no changes in the target environment. You typically push only after a pull.", 
            "title": "Pulling and pushing changes"
        }, 
        {
            "location": "/en/sync/merging/#examples", 
            "text": "Let's go through a couple of scenarios to see the commands in action.   Note  Push and pull are currently implemented as WP-CLI commands. You need to have  WP-CLI installed and working  on your machine.   Let's start with the main site, e.g., \"live\", living in  some path /www/live  and served from  http://example.com/live . We want to create a staging environment so we call:  wp vp clone --name = staging  That creates a clone in  www/staging , running at  http://example.com/staging  (configurable, see  cloning  for more). Then we do some changes in this staging environment via the web.  When done, we  cd  into the  staging  folder and run:  # /www/staging \nwp vp pull  We don't need to provide any additional parameters because by default, VersionPress will pull from the environment where this clone originated (in Git's language, it's called the  origin ). If we wanted to be explicit, this would have the same effect:  # /www/staging \nwp vp pull --from = origin  Here, the use of  origin  doesn't really add any value but sometimes, the  --from  parameter might be useful. For instance, if we wanted to pull changes from the staging environment into the live site, we would run this:  # /www/live \nwp vp pull --from = staging  In either case, the result is an updated site with both the local changes and the changes pulled from the other environment. A merge was performed here.  The push command is useful when we performed the pull standing in the  staging  folder. In that case, we see the merged environment on the staging site but not on the live site yet. We need to push:  wp vp push  Again, there is no need to provide the  --to=origin  parameter as  origin  is the default target of our clone. After this command, the live site is updated and looks exactly like the staging clone.", 
            "title": "Examples"
        }, 
        {
            "location": "/en/sync/merging/#resolving-conflicts", 
            "text": "Conflicts happen when one piece of data is updated in two environments, independently. Conflicts need to be resolved by a human as someone needs to decide which change to keep and which change to discard.  Conflicts can happen during the  pull  command as it is the only one doing the merge. You will be given two options:   Keep the conflict  so that it can be resolved manually  and  keep the maintenance mode on  (all merging / synchronization is always done under the maintenance mode; the site cannot be working while the conflict markers are in place). You'll typically choose this in a safe environment like staging or dev where downtime isn't that much of an issue.  Abort the pull and turn the maintenance mode off . If you choose this, all will be like the pull never ran. You'll probably want to choose this on the live site where you cannot afford extensive downtime.   To resolve the actual conflict, after you've chosen the first option above, do this:   Resolve conflict  manually with a standard Git workflow. There are  many   good   resources  on this but generally:  Resolve the conflict by editing the text files (in your favorite editor or a merge tool like KDiff3, WinMerge etc.)  Stage files  Commit them    Run the  apply-changes  command:  wp vp apply-changes   After this, the conflicts are resolved and the resulting state with all the changes applied is visible on the WordPress site.   Tip  The  vp apply-changes  command can also be used outside of the conflict resolution scenario. For example, if you do a Git revert manually or edit some file in  vpdb , you can then run  vp apply-changes  to see them reflected in the database and the running site.", 
            "title": "Resolving conflicts"
        }, 
        {
            "location": "/en/integrations/", 
            "text": "3\nrd\n Party Integrations\n\n\nWordPress is a rich ecosystem and its plugins \n themes can do anything and everything. This is a huge advantage for users but also a challenge for VersionPress as some of these external pieces of code might need special handling.\n\n\nThis page provides general overview and there are three sub-pages discussing specific:\n\n\n\n\nplugins\n\n\nthemes\n\n\nand \nhosts\n\n\n\n\nGeneral notes on external plugins \n themes\n\n\nThere are two main groups of external plugins \n themes from VersionPress' point of view:\n\n\n\n\nThose that work out of the box\n\n\nThose that require specific support\n\n\n\n\nThough we don't have concrete stats, many plugins and almost all themes fall into the first category, which is good. It's mostly if the plugin / theme is relatively simple or does things \"the WordPress way\", i.e., uses the built-in database tables, standard functions etc.\n\n\nHowever, there are also plugins that are either not quite well coded or so complex that they require specific support. To a lesser extent, this is also true for themes, mostly the \"page builder\" themes that possibly use their own database tables, etc. But it is far more common for plugins.\n\n\nPlease refer to these to pages for the specifics:\n\n\n\n\nPlugins\n\n\nThemes\n\n\n\n\nNote for plugin developers\n\n\nIf you're a plugin or a theme developer and would like to work with us on support for your plugin / theme, please contact us at \n.", 
            "title": "3rd Party Integrations Home"
        }, 
        {
            "location": "/en/integrations/#3rd-party-integrations", 
            "text": "WordPress is a rich ecosystem and its plugins   themes can do anything and everything. This is a huge advantage for users but also a challenge for VersionPress as some of these external pieces of code might need special handling.  This page provides general overview and there are three sub-pages discussing specific:   plugins  themes  and  hosts", 
            "title": "3rd Party Integrations"
        }, 
        {
            "location": "/en/integrations/#general-notes-on-external-plugins-themes", 
            "text": "There are two main groups of external plugins   themes from VersionPress' point of view:   Those that work out of the box  Those that require specific support   Though we don't have concrete stats, many plugins and almost all themes fall into the first category, which is good. It's mostly if the plugin / theme is relatively simple or does things \"the WordPress way\", i.e., uses the built-in database tables, standard functions etc.  However, there are also plugins that are either not quite well coded or so complex that they require specific support. To a lesser extent, this is also true for themes, mostly the \"page builder\" themes that possibly use their own database tables, etc. But it is far more common for plugins.  Please refer to these to pages for the specifics:   Plugins  Themes", 
            "title": "General notes on external plugins &amp; themes"
        }, 
        {
            "location": "/en/integrations/#note-for-plugin-developers", 
            "text": "If you're a plugin or a theme developer and would like to work with us on support for your plugin / theme, please contact us at  .", 
            "title": "Note for plugin developers"
        }, 
        {
            "location": "/en/integrations/plugins/", 
            "text": "Plugins\n\n\nThis page lists supported, unsupported and partially supported plugins. For a general overview of how 3\nrd\n party plugins are handled, please see the \nintegrations\n page.\n\n\nGeneral notes\n\n\nThere are three general categories of plugins when it comes to VersionPress:\n\n\n\n\nPlugins that work just fine\n. This is when the db operations are relatively simple, for example, updating some site option will be captured and understood by VersionPress fine.\n\n\nPlugins that work, technically, but the messages are not very helpful\n. For example, if an e-commerce solution uses some custom post types and actions, you will see something like \n\"Updated post of type 'product'\"\n while the actual action could be much better described as \n\"Purchased product xyz\"\n.\n\n\nThe plugin isn't supported at all\n. This can happen for example when the plugin uses its own database table or does non-standard things.\n\n\n\n\nSupported plugins\n\n\nPlugins that are known to work fine, or very close to that, are:\n\n\n\n\nAll plugins that don't manipulate the database\n. Many plugins fall into this category, from scripts for adding Google Analytics to a page to various filters and smaller helpers.\n\n\nHello Dolly :-)\n\n\nAkismet\n\n\nACF\n\n\n\n\nUnsupported plugins\n\n\nThose that have custom database tables. No specific list at the moment.\n\n\nPartially supported plugins\n\n\nJetpack\n\n\nJetpack is actually a collection of plugins, most of which work fine. Some sub-plugins are of category 2 above, i.e., the actions are technically tracked but the descriptions could be improved.", 
            "title": "Plugins"
        }, 
        {
            "location": "/en/integrations/plugins/#plugins", 
            "text": "This page lists supported, unsupported and partially supported plugins. For a general overview of how 3 rd  party plugins are handled, please see the  integrations  page.", 
            "title": "Plugins"
        }, 
        {
            "location": "/en/integrations/plugins/#general-notes", 
            "text": "There are three general categories of plugins when it comes to VersionPress:   Plugins that work just fine . This is when the db operations are relatively simple, for example, updating some site option will be captured and understood by VersionPress fine.  Plugins that work, technically, but the messages are not very helpful . For example, if an e-commerce solution uses some custom post types and actions, you will see something like  \"Updated post of type 'product'\"  while the actual action could be much better described as  \"Purchased product xyz\" .  The plugin isn't supported at all . This can happen for example when the plugin uses its own database table or does non-standard things.", 
            "title": "General notes"
        }, 
        {
            "location": "/en/integrations/plugins/#supported-plugins", 
            "text": "Plugins that are known to work fine, or very close to that, are:   All plugins that don't manipulate the database . Many plugins fall into this category, from scripts for adding Google Analytics to a page to various filters and smaller helpers.  Hello Dolly :-)  Akismet  ACF", 
            "title": "Supported plugins"
        }, 
        {
            "location": "/en/integrations/plugins/#unsupported-plugins", 
            "text": "Those that have custom database tables. No specific list at the moment.", 
            "title": "Unsupported plugins"
        }, 
        {
            "location": "/en/integrations/plugins/#partially-supported-plugins", 
            "text": "", 
            "title": "Partially supported plugins"
        }, 
        {
            "location": "/en/integrations/plugins/#jetpack", 
            "text": "Jetpack is actually a collection of plugins, most of which work fine. Some sub-plugins are of category 2 above, i.e., the actions are technically tracked but the descriptions could be improved.", 
            "title": "Jetpack"
        }, 
        {
            "location": "/en/integrations/themes/", 
            "text": "Themes\n\n\nThemes are generally supported fine, as long they stay simple (for example, the default \nTwenty Xyzteen\n family of themes works without any issues). However, some themes might do a lot more than just simple theming, for example, certain \"page builders\" are popular and they are more like complex plugins, sometimes with custom database tables, etc., which means concerns for VersionPress compatibility.\n\n\nThis page lists supported, unsupported and partially supported themes.\n\n\nSupported themes\n\n\nAs stated above, most simple themes are supported out of the box. That should be around 99% themes by our strict scientific measurements.\n\n\nUnsupported themes\n\n\nHeadway\n\n\nHeadway page builder\n is currently incompatible with VersionPress because it uses external database tables that we don't track yet.", 
            "title": "Themes"
        }, 
        {
            "location": "/en/integrations/themes/#themes", 
            "text": "Themes are generally supported fine, as long they stay simple (for example, the default  Twenty Xyzteen  family of themes works without any issues). However, some themes might do a lot more than just simple theming, for example, certain \"page builders\" are popular and they are more like complex plugins, sometimes with custom database tables, etc., which means concerns for VersionPress compatibility.  This page lists supported, unsupported and partially supported themes.", 
            "title": "Themes"
        }, 
        {
            "location": "/en/integrations/themes/#supported-themes", 
            "text": "As stated above, most simple themes are supported out of the box. That should be around 99% themes by our strict scientific measurements.", 
            "title": "Supported themes"
        }, 
        {
            "location": "/en/integrations/themes/#unsupported-themes", 
            "text": "", 
            "title": "Unsupported themes"
        }, 
        {
            "location": "/en/integrations/themes/#headway", 
            "text": "Headway page builder  is currently incompatible with VersionPress because it uses external database tables that we don't track yet.", 
            "title": "Headway"
        }, 
        {
            "location": "/en/integrations/hosts/", 
            "text": "Hosts\n\n\nAs described on the \ninstallation page\n, VersionPress has stricter system requirements than vanilla WordPress \u2013 specifically, we require Git on the server and \nproc_open()\n enabled. This is for \ngood reasons\n but also means that hosting is a bit of a challenge. Most of our early users run VersionPress on dedicated servers or VPS's that allow complete control and that's still recommended, however, there are also a couple of shared hosts that fully support VersionPress today.\n\n\n\n\nImportant\n\n\nThe info here largely applies to the single-site features of VersionPress only. Version 2.0 added support for \nsync / team workflows\n that are even more tricky to support on a shared hosting. For those scenarios, VPS or a custom server is strongly recommended.\n\n\n\n\nSupported hosts\n\n\nHere are a couple of hosts that we or our users confirmed work fine with VersionPress:\n\n\n\n\n \nFastComet\n \u2013 SSD cloud hosting with CloudFlare \n 24/7 Premium Support\n\n\n \nByte\n \u2013 performance webhosting in Netherlands\n\n\n \nWebFaction\n \u2013 hosting for developers\n\n\n \nUberspace\n \u2013 hosting space in Germany (Git 1.7 pre-installed, upgradable to 1.9+)\n\n\n \nPair Shared Hosting\n \u2013 by pair Networks\n\n\n \nElbia Hosting (SK)\n \u2013 Slovak hosting company\n\n\n \nSiteGround\n \u2013 VersionPress can be installed but \nsome issues have been reported\n\n\n \nWebHostFace\n \u2013 SSD-powered hosting with Free SSLs \n 24/7 Expert WordPress Support\n\n\n \n45AIR\n \u2013 Low Cost WordPress Hosting - Git 2.10+, full shell access, and VersionPress pre-installed.\n\n\n\n\n\n\nHelp us improve this list\n\n\nIf you know of a host that supports VersionPress please \nsend a pull request\n.\n\n\n\n\nUnsupported hosts\n\n\nHere are some unsupported hosts for the moment. If you are their customer, please let them know that you'd be interested in VersionPress support \u2013 if they see more demand for it they might add support for it.\n\n\n\n\n \nWP Engine\n \u2013 they have intentionally restricted environment that doesn't allow \nproc_open()\n. We acknowledge that WPE is important to our users and are actively looking into how to support it.\n\n\n \nDreamHost\n\n\n \nFlyWheel\n \u2013 they don't have Git installed", 
            "title": "Hosts"
        }, 
        {
            "location": "/en/integrations/hosts/#hosts", 
            "text": "As described on the  installation page , VersionPress has stricter system requirements than vanilla WordPress \u2013 specifically, we require Git on the server and  proc_open()  enabled. This is for  good reasons  but also means that hosting is a bit of a challenge. Most of our early users run VersionPress on dedicated servers or VPS's that allow complete control and that's still recommended, however, there are also a couple of shared hosts that fully support VersionPress today.   Important  The info here largely applies to the single-site features of VersionPress only. Version 2.0 added support for  sync / team workflows  that are even more tricky to support on a shared hosting. For those scenarios, VPS or a custom server is strongly recommended.", 
            "title": "Hosts"
        }, 
        {
            "location": "/en/integrations/hosts/#supported-hosts", 
            "text": "Here are a couple of hosts that we or our users confirmed work fine with VersionPress:     FastComet  \u2013 SSD cloud hosting with CloudFlare   24/7 Premium Support    Byte  \u2013 performance webhosting in Netherlands    WebFaction  \u2013 hosting for developers    Uberspace  \u2013 hosting space in Germany (Git 1.7 pre-installed, upgradable to 1.9+)    Pair Shared Hosting  \u2013 by pair Networks    Elbia Hosting (SK)  \u2013 Slovak hosting company    SiteGround  \u2013 VersionPress can be installed but  some issues have been reported    WebHostFace  \u2013 SSD-powered hosting with Free SSLs   24/7 Expert WordPress Support    45AIR  \u2013 Low Cost WordPress Hosting - Git 2.10+, full shell access, and VersionPress pre-installed.    Help us improve this list  If you know of a host that supports VersionPress please  send a pull request .", 
            "title": "Supported hosts"
        }, 
        {
            "location": "/en/integrations/hosts/#unsupported-hosts", 
            "text": "Here are some unsupported hosts for the moment. If you are their customer, please let them know that you'd be interested in VersionPress support \u2013 if they see more demand for it they might add support for it.     WP Engine  \u2013 they have intentionally restricted environment that doesn't allow  proc_open() . We acknowledge that WPE is important to our users and are actively looking into how to support it.    DreamHost    FlyWheel  \u2013 they don't have Git installed", 
            "title": "Unsupported hosts"
        }, 
        {
            "location": "/en/troubleshooting/", 
            "text": "Troubleshooting\n\n\nWe collect solutions to various common issues here. Generally, if you want to report an issue, please file a new ticket in \nthis GitHub repo\n.", 
            "title": "Troubleshooting Home"
        }, 
        {
            "location": "/en/troubleshooting/#troubleshooting", 
            "text": "We collect solutions to various common issues here. Generally, if you want to report an issue, please file a new ticket in  this GitHub repo .", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/en/troubleshooting/system-info-page/", 
            "text": "System Info Page\n\n\nAs VersionPress is \nmore demanding\n on server environment than your common WordPress installation, we've created a system info page that gives more insight into what is actually available on the server.\n\n\nThe system info page is available at this URL:\n\n\nhttp://YOURSITE/wp-admin/admin.php?page\n=\nversionpress%2Fadmin%2Fsystem-info.php\n\n\n\n\nYou can also find a link to this page from the bottom left corner of the initialization page:\n\n\n\n  \n\n  \nLink to system info page from the initialization screen\n\n\n\n\n\nAfter the initialization, the only way to access the system info page is to use the URL above. (You shouldn't need it often.)", 
            "title": "System Info Page"
        }, 
        {
            "location": "/en/troubleshooting/system-info-page/#system-info-page", 
            "text": "As VersionPress is  more demanding  on server environment than your common WordPress installation, we've created a system info page that gives more insight into what is actually available on the server.  The system info page is available at this URL:  http://YOURSITE/wp-admin/admin.php?page = versionpress%2Fadmin%2Fsystem-info.php  You can also find a link to this page from the bottom left corner of the initialization page:  \n   \n   Link to system info page from the initialization screen   After the initialization, the only way to access the system info page is to use the URL above. (You shouldn't need it often.)", 
            "title": "System Info Page"
        }, 
        {
            "location": "/en/troubleshooting/ui-not-loading/", 
            "text": "UI Not Loading\n\n\nIf VersionPress admin screens aren't loading, there's probably some misconfiguration that prevents JavaScript to communicate with REST API on the server. It will be stuck at something like this:\n\n\n\n\nTo troubleshoot it:\n\n\n1)\n In your browser, do a request to \nhttp://yoursite/wp-json/\n (or \nhttp://yoursite/?rest_route=/\n if you don't have permalinks enabled; see \nREST API Discovery\n).\n\n\nYou should see VersionPress mentioned there. If not, try to change permalink settings to something else.\n\n\n2)\n In the browser dev tools, go to the \nNetwork\n tab and see if the request to REST API endpoints like \ncommits\n return 2xx OK values. If not, make note whether it's 403 (Forbidden), 404 (Not Found) or something else and open an issue in the \nsupport repo\n.\n\n\n3)\n If all the above works, try to collect all the useful console output and open an issue in the \nsupport repo\n.", 
            "title": "UI Not Loading"
        }, 
        {
            "location": "/en/troubleshooting/ui-not-loading/#ui-not-loading", 
            "text": "If VersionPress admin screens aren't loading, there's probably some misconfiguration that prevents JavaScript to communicate with REST API on the server. It will be stuck at something like this:   To troubleshoot it:  1)  In your browser, do a request to  http://yoursite/wp-json/  (or  http://yoursite/?rest_route=/  if you don't have permalinks enabled; see  REST API Discovery ).  You should see VersionPress mentioned there. If not, try to change permalink settings to something else.  2)  In the browser dev tools, go to the  Network  tab and see if the request to REST API endpoints like  commits  return 2xx OK values. If not, make note whether it's 403 (Forbidden), 404 (Not Found) or something else and open an issue in the  support repo .  3)  If all the above works, try to collect all the useful console output and open an issue in the  support repo .", 
            "title": "UI Not Loading"
        }, 
        {
            "location": "/en/troubleshooting/iis/", 
            "text": "IIS\n\n\nThough IIS is not an \nofficially recommended\n web server, WordPress core has some built-in support for it and VersionPress does too \u2013 for example, we generate \nweb.config\n files to protect certain locations from direct access by default.\n\n\nIn theory, IIS should work just fine but in practice, there are often setup issues related to users and permissions. This is what we know so far; if you're an IIS guru and can help us improve this page, please \nfile an issue on GitHub\n.\n\n\nThe problem\n\n\nThe core issue on IIS seems to be that the \nSymfony\\Process\n cannot read the process output. We use the Process component to interact with Git, and even when Git is installed and Symfony can successfully call it, it eventually fails because it cannot read what Git returned.\n\n\nThis seems to be happening for a cascade of reasons:\n\n\n\n\nSymfony internally uses \nproc_open()\n and for some reason, IIS spawns the processes created by \nproc_open()\n \nunder a different user\n than PHP standard user.\n\n\nBecause of a \nPHP bug on Windows\n, Symfony\\Process cannot read the process output directly and stores it to some temporary file first. It chooses to store it into the \nsys_get_temp_dir()\n directory.\n\n\nIf this directory doesn't have write permission for the user used for \nproc_open()\n, VersionPress cannot read the Git output. It will look this strange on the \nsystem info page\n:\n    \narray (\n\n\n    \ngit-binary-as-configured\n =\n \nC:/Program Files (x86)/Git/bin/git.exe\n,\n\n\n    \ngit-available\n =\n true,\n\n\n    \ngit-version\n =\n NULL,\n\n\n    \ngit-binary-as-called-by-vp\n =\nC:/Program Files (x86)/Git/bin/git.exe\n,\n\n\n    \ngit-full-path\n =\n \nC:/Program Files (x86)/Git/bin/git.exe\n,\n\n\n    \nversionpress-min-required-version\n =\n \n1.9\n,\n\n\n    \nmatches-min-required-version\n =\n false\n\n\n)\n\n\n\n\n\n\nSolution\n\n\n\n\nUse the \nsystem info page\n to determine which user is used for \nproc_open()\n calls.\n\n\nGive write access to \nsys_get_temp_dir()\n to this user.", 
            "title": "IIS"
        }, 
        {
            "location": "/en/troubleshooting/iis/#iis", 
            "text": "Though IIS is not an  officially recommended  web server, WordPress core has some built-in support for it and VersionPress does too \u2013 for example, we generate  web.config  files to protect certain locations from direct access by default.  In theory, IIS should work just fine but in practice, there are often setup issues related to users and permissions. This is what we know so far; if you're an IIS guru and can help us improve this page, please  file an issue on GitHub .", 
            "title": "IIS"
        }, 
        {
            "location": "/en/troubleshooting/iis/#the-problem", 
            "text": "The core issue on IIS seems to be that the  Symfony\\Process  cannot read the process output. We use the Process component to interact with Git, and even when Git is installed and Symfony can successfully call it, it eventually fails because it cannot read what Git returned.  This seems to be happening for a cascade of reasons:   Symfony internally uses  proc_open()  and for some reason, IIS spawns the processes created by  proc_open()   under a different user  than PHP standard user.  Because of a  PHP bug on Windows , Symfony\\Process cannot read the process output directly and stores it to some temporary file first. It chooses to store it into the  sys_get_temp_dir()  directory.  If this directory doesn't have write permission for the user used for  proc_open() , VersionPress cannot read the Git output. It will look this strange on the  system info page :\n     array (       git-binary-as-configured  =   C:/Program Files (x86)/Git/bin/git.exe ,       git-available  =  true,       git-version  =  NULL,       git-binary-as-called-by-vp  = C:/Program Files (x86)/Git/bin/git.exe ,       git-full-path  =   C:/Program Files (x86)/Git/bin/git.exe ,       versionpress-min-required-version  =   1.9 ,       matches-min-required-version  =  false  )", 
            "title": "The problem"
        }, 
        {
            "location": "/en/troubleshooting/iis/#solution", 
            "text": "Use the  system info page  to determine which user is used for  proc_open()  calls.  Give write access to  sys_get_temp_dir()  to this user.", 
            "title": "Solution"
        }, 
        {
            "location": "/en/developer/dev-setup/", 
            "text": "Dev setup\n\n\nThis will set you up for VersionPress development. \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb\n\n\nGetting started\n\n\nOur approach is:\n\n\n\n\nYou develop in \nlocal tools\n you're comfortable with \u2013 PhpStorm, vim, VSCode, ...\n\n\nRuntime is handled by \nDocker\n. You don't need MAMP / XAMPP, local installation of Selenium, etc.\n\n\nCommon tasks are automated via \nnpm scripts\n, for example, \nnpm run tests:full\n.\n\n\n\n\nIf you're not familiar with Docker, this is \ngreat quick start\n. We also have some \ntips for you\n.\n\n\nThis software is expected on your machine:\n\n\n\n\nGit 2.10+\n\n\nNode.js 8+, npm 6+\n\n\nDocker 18.03+\n\n\nPHP 7+ and Composer 1.4+\n\n\n\n\nWindows users: use Git Bash\n\n\nGit Bash (part of \nGit for Windows\n) is required on Windows, please use it instead of \ncmd.exe\n / PowerShell for both interactive sessions and as your npm script shell:\n\n\nnpm config set script-shell \nc:\\Program Files\\git\\bin\\bash.exe\n\n\n\n\n\nSee also \nWindows tips\n below.\n\n\nProject initialization\n\n\n\n\ngit clone https://github.com/versionpress/versionpress\n\n\ncd versionpress\n\n\nnpm install\n\n\n\n\nHave a \u2615, this will take a while.\n\n\n\n\nTip\n: From time to time, it's useful to clean up everything and pull latest Docker images. Run \nnpm run refresh-dev\n.\n\n\n\n\nDockerized development environment\n\n\nTo start a development site:\n\n\n\n\nMake sure Docker is running and ports 80 and 3306 are free (no local MAMP / XAMPP / MySQL running).\n\n\nRun \nnpm start\n.\n\n\n\n\nThis will start a set of Docker containers in the background. When everything boots up, log into the test site at \nhttp://localhost\n, install WordPress and activate VersionPress on the \nPlugins\n page. You're now all set up! \ud83c\udf89\n\n\n\n\nLet's explore your development environment:\n\n\n\n\nVersionPress source files are directly mapped to the site's \nwp-content/plugins/versionpress\n. Any changes you make locally are immediately live.\n\n\nDatabase can be inspected using \nAdminer\n at \nhttp://localhost:8099\n, server name \nmysql\n, login \nroot\n / \nr00tpwd\n. You can also use tools like MySQL Workbench or \nmysql\n command-line client, e.g., \nmysql -u root -p\n.\n\n\nWordPress root is mapped to \n./dev-env/wp\n. You can use your local Git client to inspect the site's history there.\n\n\nTo invoke WP-CLI or Git commands in the site, create a terminal session via \ndocker-compose exec wordpress /bin/bash\n or invoke the command directly, e.g., \ndocker-compose exec wordpress git log\n or \ndocker-compose exec wordpress wp option update blogname \nHello\n.\n\n\n\n\nSome useful tips for managing your Docker environment:\n\n\n\n\ndocker-compose ps\n lists running containers\n\n\ndocker-compose logs -f\n displays live logs\n\n\ndocker-compose logs wordpress\n displays logs of a single service\n\n\ndocker stats\n show live CPU / memory usage\n\n\n\n\nSee also \nDocker tips\n below.\n\n\nRun \nnpm stop\n to stop the development environment. Run \nnpm run stop-and-cleanup\n to also clean up WordPress files and MySQL database for a fresh start next time.\n\n\nPhpStorm setup\n\n\nFor PHP development, we recommend \nPhpStorm\n and ship project files for it. The steps here have been tested in PhpStorm \n2018.1\n.\n\n\nRun \nnpm run init-phpstorm\n. This copies \n.idea\n to \nplugins/versionpress\n.\n\n\nOpen the \nplugins/versionpress\n project in PhpStorm. On the first start, you'll see two prompts:\n\n\n\n\nEnable WordPress support\n but leave the installation path empty (ignore the warning):\n\n\n\n\nEnable \nComposer sync\n.\n\n\nFor \nCode Sniffer inspections\n to work, there's a one-time configuration: Go to \nSettings\n \n \nLanguages \n Frameworks\n \n \nPHP\n \n \nCode Sniffer\n, select \nLocal\n, click the three dots next to it and provide your full system path to \n./vendor/bin/phpcs\n.\n\n\n\n\nNote\n: Most VersionPress code uses the \nPSR-2\n coding standard with only the parts directly interacting with WordPress using WordPress conventions. For example, global functions are defined as \nvp_register_hooks()\n, not \nregisterHooks()\n.\n\n\n\n\nIt is also useful to \ninstall the \nEditorConfig\n extension\n, VersionPress ships with some basic formatting rules.\n\n\nWriting code\n\n\nPlease refer to the \nContributing code\n section in \nCONTRIBUTING.md\n.\n\n\nDebugging\n\n\nThe development containers have \nXdebug\n installed and configured. Here is how to make debugging work in PhpStorm; the \nDebugging tests\n section gives an example of how to make debugging work in VSCode.\n\n\nStart the Docker stack with \nnpm start\n.\n\n\nIn PhpStorm, go to \nSettings\n \n \nLanguages \n Frameworks\n \n \nPHP\n \n \nServers\n and check the path mappings of the pre-configured \nVersionPress-dev\n server. Specifically, update the WordPress mapping which PhpStorm does not persist automatically:\n\n\n\n\nThe two mappings should be:\n\n\n\n\nyour local path\n/plugins/versionpress\n -\n \n/var/www/html/wp-content/plugins/versionpress\n\n\nyour local path\n/ext-libs/wordpress\n -\n \n/var/www/html\n\n\n\n\nThe default zero configuration settings in \nSettings\n \n \nLanguages \n Frameworks\n \n \nPHP\n \n \nDebug\n should be fine:\n\n\n\n\nEnable debugging in the browser, most commonly using a \nbrowser extension or a bookmarklet\n:\n\n\n\n\nPlace a breakpoint somewhere, e.g., in the main \nversionpress.php\n file, and start listening for debug connections in PhpStorm.\n\n\nReload a page in your browser. Debugging should now work:\n\n\n\n\nAfter you're done with debugging, run \nnpm stop\n or \nnpm run stop-and-cleanup\n.\n\n\nTesting\n\n\nTests are a significant part of the VersionPress project, we care about writing and maintaining them. They live in \nplugins/versionpress/tests\n and there are several types of them, from unit to full end2end tests. They all run in a dockerized test environment.\n\n\n\n\nNote\n: the \n./frontend\n app has its own tests, this section is about core VersionPress tests (PHP code) only.\n\n\n\n\nDockerized testing environment\n\n\nSimilarly to the \ndevelopment environment\n, tests utilize Docker Compose as well. The main benefit is that you don't need to set up things like Selenium or Java locally.\n\n\nMost tasks are scripted, for example, you just run \nnpm run tests:unit\n but you can also drop to the raw Docker Compose mode and do things like \ndocker-compose run --rm tests ...\n. In that case, one thing to understand is that there are two services in \ndocker-compose.yml\n to choose from:\n\n\n\n\ntests\n \u2013 just a test runner.\n\n\ntests-with-wordpress\n \u2013 starts a WordPress stack.\n\n\n\n\nAll scripts also come with a \n...:debug\n version, for example, \ntests:unit:debug\n. See \nStarting a debugging session from command line\n.\n\n\nRunning tests from command line\n\n\n\n\nMake sure you have run \nnpm install\n as described above and have Docker running.\n\n\nRun \nnpm run tests:unit\n or \nnpm run tests:full\n.\n\n\n\n\nUnit tests use a simpler \ntests\n service and are fast to execute.\n\n\nThe full tests include \nend2end tests\n and are relatively slow to run, however, if they pass, there's a good chance that VersionPress works correctly.\n\n\nCustomizing what tests run\n\n\ntests:custom\n and \ntests:custom-with-wordpress\n scripts allow you to run custom tests easily. Here are some examples:\n\n\n\n\n\u2755 Notice how PHPUnit arguments come after \n--\n.\n\n\n\n\n# Pick a test suite from the default phpunit.xml\n\nnpm run tests:custom -- -c phpunit.xml --testsuite Unit\n\n\n# Create your own phpunit.*.xml (gitignored)\n\nnpm run tests:custom -- -c phpunit.custom.xml\n\n\n# Run specific test class\n\nnpm run tests:custom-with-wordpress -- -c phpunit.xml --filter RevertTest\n\n\n\n\nIf you want to go entirely custom, use raw \ndocker-compose\n:\n\n\n# PhpStorm-like invocation (copy/pasted from its console):\n\ndocker-compose run --rm tests ../vendor/bin/phpunit --bootstrap /opt/versionpress/tests/phpunit-bootstrap.php --no-configuration /opt/versionpress/tests/Unit\n\n\n\n\nTest output\n\n\nNpm scripts are configured to log in a TestDox format to container's \n/var/opt/versionpress/logs\n which is mapped to your local folder \n./dev-env/test-logs\n.\n\n\nTo log in \nanother supported format\n, run tests manually like this:\n\n\ndocker-compose run --rm tests ../vendor/bin/phpunit -c phpunit.xml --log-junit /var/opt/versionpress/logs/vp-tests.log\n\n\n\n\nClean up tests\n\n\nIf you've run tests that use the \ntests-with-wordpress\n service, the whole Docker stack is kept running so that you can inspect it. For example, you can use your local Git client to explore the site's history in \ndev-env/wp-for-tests/wptest\n. The \nend2end tests\n section provides more info on this.\n\n\nWhen you're done with tests, run \nnpm stop\n to shut down the Docker stack or \nnpm run stop-and-cleanup\n to also remove the volumes so that the next start is entirely fresh.\n\n\nTips for tests\n\n\n\n\nIf you're trying to narrow down a bug, it's useful to run a smaller test suite via one of the options above and add \nstopOnFailure=\ntrue\n to the XML file or \n--stop-on-failure\n on the command line.\n\n\nUnit tests can also easily be run using a local \nphp\n interpreter, basically just run them in PhpStorm.\n\n\n\n\nRunning and debugging tests from PhpStorm\n\n\nPhpStorm makes it easy to select specific tests and to debug them. Also, if you stop debugging, you will see messages gathered so far. There is a one-time setup to go through.\n\n\n\n\n\ud83d\udca1 If this doesn't work for you, e.g., due to some Docker Compose bug in PhpStorm, you can \nstart debugging from command line\n.\n\n\n\n\nFirst, if you're using \nDocker for Mac\n or \nDocker for Windows\n, expose a daemon in Docker settings:\n\n\n\n\nIn PhpStorm, create a new Docker environment in \nSettings\n \n \nBuild, Execution, Deployment\n \n \nDocker\n:\n\n\n\n\nIn the Docker panel, you should now be able to connect:\n\n\n\n\nNext, define a remote interpreter. Make sure you have the \nPHP Docker\n plugin enabled and go to \nSettings\n \n \nLanguages \n Frameworks\n \n \nPHP\n. Add a new interpreter there:\n\n\n\n\nNote that the \ndocker-compose.yml\n is at the repo root, not inside \n./plugins/versionpress\n:\n\n\n\n\nIf this doesn't go smoothly, try unchecking the \nInclude parent environment variables\n checkbox in the \nEnvironment variables\n field:\n\n\n\n\nSelect this CLI interpreter as the main one for the project and make sure the path mappings are correct:\n\n\n\n\nThe final step is to set up a test framework in \nPHP\n \n \nTest Frameworks\n. Add a new \nPHPUnit by Remote Interpreter\n:\n\n\n\n\nDon't forget to set the \nDefault bootstrap file\n to \n/opt/versionpress/tests/phpunit-bootstrap.php\n.\n\n\nNow you're ready to run the tests. For example, to run all unit tests, right-click the \nUnit\n folder and select \nRun\n:\n\n\n\n\nDebugging also works, just select \nDebug\n instead of \nRun\n:\n\n\n\n\nThis works equally well other types of tests as well, for example, Selenium tests:\n\n\n\n\nStarting debugging session from command line\n\n\nThis method is more universal and works for PhpStorm, VSCode and other IDEs. You generally do this:\n\n\n\n\nSet a breakpoint.\n\n\nStart listening in your IDE.\n\n\nLaunch a debug-enabled script like \nnpm run tests:unit:debug\n (see \npackage.json\n).\n\n\n\n\nPhpStorm example\n\n\nFirst, make sure you have the 'VersionPress-tests' server defined in \nSettings \n Languages \n Frameworks \n PHP \n Servers\n. If not, run \nnpm run init-phpstorm\n.\n\n\nThen, set a breakpoint in some test and start listening for debug connections in the toolbar.\n\n\nRun \nnpm run tests:unit:debug\n in the console, skip the first break at the \nwp\n binary and see your breakpoint hit:\n\n\n\n\nSee \nthis JetBrains help page\n for more.\n\n\nVSCode example\n\n\nIn VSCode, install \nPHP Debug extension\n and create a \nlaunch.json\n config containing this:\n\n\n{\n\n  \nname\n:\n \nPHP: Listen for Xdebug\n,\n\n  \ntype\n:\n \nphp\n,\n\n  \nrequest\n:\n \nlaunch\n,\n\n  \nport\n:\n \n9000\n,\n\n  \npathMappings\n:\n \n{\n\n    \n/opt/versionpress\n:\n \n${workspaceRoot}/plugins/versionpress\n,\n\n  \n}\n\n\n}\n\n\n\n\n\nThen, start a debugging session in VSCode and set a breakpoint. Run the \ntests:unit:debug\n script and see the breakpoint hit:\n\n\n\n\nUnit tests\n\n\nUnit tests are best suited for small pieces of algorithmic functionality. For example, \nIniSerializer\n is covered by unit tests extensively.\n\n\nYou can either run unit tests in a dockerized environment as described above or set up a local CLI interpret which makes the execution faster and more convenient.\n\n\nEnd2end tests\n\n\nEnd2end tests exercise a WordPress site and check that VersionPress creates the right Git commits, that the database is in correct state, etc. These tests are quite heavy and slow to run but if they pass, there's a good chance that VersionPress works correctly. (Before the project had these, long and painful manual testing period was necessary before each release.)\n\n\nEnd2end tests use the concept of \nworkers\n: each test itself is implemented once but how e.g. a post is created or a user deleted is up to a specific worker. There are currently two types of workers:\n\n\n\n\nWP-CLI workers\n \u2013 run WP-CLI commands against the test site.\n\n\nSelenium workers\n \u2013 simulate real user by clicking in a browser.\n\n\n\n\nIn the future, we might add REST API workers; you get the idea.\n\n\nCurrently, the default worker is WP-CLI and the only way to switch workers is to update \ntests/test-config.yml\n, the \nend2end-test-type\n key. We'll make it more flexible in the future.\n\n\nAfter you've run the tests, the Docker stack is left up and running so that you can inspect it:\n\n\n\n\nThe site is running at \nhttp://wordpress-for-tests/\n \u2013 \nupdate your hosts file\n accordingly and log in using the info in \ntest-config.yml\n.\n\n\nThe files are mapped to \n./dev-env/wp-for-tests\n, you can use your local Git client to inspect it.\n\n\nConnect to the database via \nmysql -u root -p\n or Adminer which you can access by running \ndocker-compose run -d --service-ports adminer\n and visiting \nhttp://localhost:8099\n. The database name is \nmysql-for-wordpress\n.\n\n\n\n\nStop the Docker stack with \nnpm run stop-and-cleanup\n (stop-and-cleanup is strongly recommended here; end2end tests are not perfectly isolated yet).\n\n\nOther tests\n\n\nThe project has these other types of tests (folders in the \n./plugins/versionpress/tests\n folder and also test suite names in \nphpunit.xml\n so that you can run them using \n--testsuite \nSuiteName\n):\n\n\n\n\nGitRepositoryTests\n \u2013 test Git repository manipulation in \nGitRepository\n.\n\n\nSynchronizerTests\n \u2013 these are quite slow and test that given some INI files on disk, the database is in a correct state after synchronization runs.\n\n\nStorageTests\n \u2013 test that entities are stored correctly as INI files.\n\n\nLoadTests\n \u2013 they are run together with other tests but with very few iterations; manually update their source files and execute them separately to properly exercise them.\n\n\nSelenium\n \u2013 a bit like end2end tests but for rarer cases, like VersionPress not being activated yet.\n\n\nWorkflow\n \u2013 exercise cloning and merging between environments.\n\n\n\n\nFrontend development\n\n\nVersionPress uses a JavaScript frontend implemented as a React app in the \n./frontend\n folder.\n\n\nPhpStorm / WebStorm setup\n\n\n\n\nRun \nnpm run init-phpstorm\n if you haven't done that already.\n\n\nOpen the \nfrontend\n project in PhpStorm.\n\n\nAnswer \"No\" to \nCompile TypeScript to JavaScript?\n prompt.\n\n\n\n\nLinting task is set up for the frontend project. Run \nnpm run lint\n in the \nfrontend\n directory.\n\n\nRunning frontend separately\n\n\nFor pure frontend development, it's more convenient to run it outside of the WordPress administration. Let's assume you run the frontend against the default Docker site.\n\n\n\n\nMake sure that the site is running and that VersionPress is activated in it. You should be able to visit \nhttp://localhost\n in the browser and the \nfrontend/src/config/config.local.ts\n should contain this URL as API root.\n\n\nIn your test WordPress site, put this to \nwp-config.php\n (the file should be editable at \n./dev-env/wp/wp-config.php\n):\n    \ndefine(\nVERSIONPRESS_REQUIRE_API_AUTH\n, false);\n\n\n\nRun \nnpm start\n in the \nfrontend\n directory.\n\n\n\n\nThis launches \nwebpack dev server\n at \nhttp://localhost:8888\n:\n\n\n\n\nSource code edits will be automatically reflected in the browser.\n\n\nProduction build\n\n\nRun \nnpm run build\n, it will produce a file like \ndist/versionpress-3.0.2.zip\n.\n\n\nThe version number is based on the nearest Git tag and can also be something like \n3.0.2-27-g0e1ce7f\n meaning that the closest tag is \n3.0.2\n, there have been 27 commits since then and the package was built from \n0e1ce7f\n. See \ngit describe --tags\n for more examples.\n\n\nDeveloping the dev setup\n\n\nMeta! If you're working on updating the dev setup (this document, Docker images, etc.), here are some tips for you.\n\n\nnpm scripts\n\n\nSimpler tasks are scripted directly in \npackage.json\n, more complex ones in the \n./scripts\n folder, see for example \nscripts/build.ts\n.\n\n\nTo debug the scripts in VSCode, run the script via \ndebug-script\n, e.g.:\n\n\nnpm run debug-script scripts/init-dev.ts\n\n\n\n\nThen in VSCode, create a \"Node attach\" configuration and run it.\n\n\nBuilding and pushing images\n\n\nWe're keeping our images close to two \nofficial ones\n, \nwordpress:php7.2-apache\n and \nwordpress:cli\n.\n\n\nThe only goal of our images is to be close to the official project and have the right environment in it, e.g., the PHP version. We don't care that much about specific WordPress versions (WordPress is often installed dynamically anyway, based on \ntest-config.yml\n) so we only use \"vague\" tags like \nphp7.2-apache\n or \ncli\n.\n\n\nTo build and push tags to Docker Hub:\n\n\n\n\nnpm run build-images\n\n\ndocker login\n\n\nnpm run push-images\n\n\n\n\nYou can get Docker Hub digests by running:\n\n\n$ npm run get-image-digests\n\ncli sha256:11c49ba4d7198c17660f30e8db4d00ca356b1c4414f338076bf99ab4dd295184\nphp7.2-apache sha256:39ed34f84a5ccf8ab47eb1db4041c226ffe6f874127ead4c26f0b607457b7377\n\n\n\n\nLinks to older documents\n\n\nLegacy approach is documented at the \n4.0-alpha1\n tag:\n\n\n\n\nDev-Setup.md\n\n\nTesting.md\n\n\n\n\nDocker tips\n\n\nHere are some tips for working with Docker / Docker Compose:\n\n\n\n\nAliasing \ndocker-compose\n to \ndc\n will save you some typing.\n\n\nValues in \ndocker-compose.yml\n can be customized via \ndocker-compose.override.yml\n.\n\n\n\n\nWindows tips\n\n\nGit Bash\n\n\nAs noted in \nGetting started\n, we only support Git Bash on Windows, a shell that comes with \nGit for Windows\n. \ncmd.exe\n or PowerShell will not work as we use Linux-style syntax (single quotes, setting environment variables, etc.) and tools like \ncurl\n or \nrm -rf\n in scripts.\n\n\nGit Bash is generally an awesome shell, the only problems you might encounter are related to paths. For example, Docker messes with them and when you try to run \ndocker run --rm -it ubuntu /bin/bash\n, you'll see an error like \nC:/Program Files/Git/usr/bin/bash.exe: no such file or directory\n. Docker prepends \nC:/Program Files/Git\n for some reason but you can \nuse this workaround\n or use double slash like \n//bin/bash\n.\n\n\nDocker for Windows\n\n\nIf you can, use \nDocker for Windows\n, not \nDocker Toolbox\n. The experience will be generally smoother.\n\n\nIf you need to use Docker Toolbox:\n\n\n\n\nEnable port forwarding in VirtualBox (especially for ports 80, 3306, 8080 and 8099), see \ndetails\n.\n\n\nDocker Toolbox is slower, but you can try to adjust system performance in VirtualBox settings. However, you can run into timeout issues in Workflow tests sometimes and exceed default value of 5 seconds in \nwp_remote_get()\n in End2End tests.\n\n\nRun Git Bash and Docker Quickstart Terminal as an Administrator to avoid potential problems (for example permissions and symlinks).\n\n\n\n\nDisable antivirus software\n\n\nYou might want to disable your antivirus software when working with Docker. Recommendations differ between version, please look it up.", 
            "title": "Dev Setup"
        }, 
        {
            "location": "/en/developer/dev-setup/#dev-setup", 
            "text": "This will set you up for VersionPress development. \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb", 
            "title": "Dev setup"
        }, 
        {
            "location": "/en/developer/dev-setup/#getting-started", 
            "text": "Our approach is:   You develop in  local tools  you're comfortable with \u2013 PhpStorm, vim, VSCode, ...  Runtime is handled by  Docker . You don't need MAMP / XAMPP, local installation of Selenium, etc.  Common tasks are automated via  npm scripts , for example,  npm run tests:full .   If you're not familiar with Docker, this is  great quick start . We also have some  tips for you .  This software is expected on your machine:   Git 2.10+  Node.js 8+, npm 6+  Docker 18.03+  PHP 7+ and Composer 1.4+", 
            "title": "Getting started"
        }, 
        {
            "location": "/en/developer/dev-setup/#windows-users-use-git-bash", 
            "text": "Git Bash (part of  Git for Windows ) is required on Windows, please use it instead of  cmd.exe  / PowerShell for both interactive sessions and as your npm script shell:  npm config set script-shell  c:\\Program Files\\git\\bin\\bash.exe   See also  Windows tips  below.", 
            "title": "Windows users: use Git Bash"
        }, 
        {
            "location": "/en/developer/dev-setup/#project-initialization", 
            "text": "git clone https://github.com/versionpress/versionpress  cd versionpress  npm install   Have a \u2615, this will take a while.   Tip : From time to time, it's useful to clean up everything and pull latest Docker images. Run  npm run refresh-dev .", 
            "title": "Project initialization"
        }, 
        {
            "location": "/en/developer/dev-setup/#dockerized-development-environment", 
            "text": "To start a development site:   Make sure Docker is running and ports 80 and 3306 are free (no local MAMP / XAMPP / MySQL running).  Run  npm start .   This will start a set of Docker containers in the background. When everything boots up, log into the test site at  http://localhost , install WordPress and activate VersionPress on the  Plugins  page. You're now all set up! \ud83c\udf89   Let's explore your development environment:   VersionPress source files are directly mapped to the site's  wp-content/plugins/versionpress . Any changes you make locally are immediately live.  Database can be inspected using  Adminer  at  http://localhost:8099 , server name  mysql , login  root  /  r00tpwd . You can also use tools like MySQL Workbench or  mysql  command-line client, e.g.,  mysql -u root -p .  WordPress root is mapped to  ./dev-env/wp . You can use your local Git client to inspect the site's history there.  To invoke WP-CLI or Git commands in the site, create a terminal session via  docker-compose exec wordpress /bin/bash  or invoke the command directly, e.g.,  docker-compose exec wordpress git log  or  docker-compose exec wordpress wp option update blogname  Hello .   Some useful tips for managing your Docker environment:   docker-compose ps  lists running containers  docker-compose logs -f  displays live logs  docker-compose logs wordpress  displays logs of a single service  docker stats  show live CPU / memory usage   See also  Docker tips  below.  Run  npm stop  to stop the development environment. Run  npm run stop-and-cleanup  to also clean up WordPress files and MySQL database for a fresh start next time.", 
            "title": "Dockerized development environment"
        }, 
        {
            "location": "/en/developer/dev-setup/#phpstorm-setup", 
            "text": "For PHP development, we recommend  PhpStorm  and ship project files for it. The steps here have been tested in PhpStorm  2018.1 .  Run  npm run init-phpstorm . This copies  .idea  to  plugins/versionpress .  Open the  plugins/versionpress  project in PhpStorm. On the first start, you'll see two prompts:   Enable WordPress support  but leave the installation path empty (ignore the warning):   Enable  Composer sync .  For  Code Sniffer inspections  to work, there's a one-time configuration: Go to  Settings     Languages   Frameworks     PHP     Code Sniffer , select  Local , click the three dots next to it and provide your full system path to  ./vendor/bin/phpcs .   Note : Most VersionPress code uses the  PSR-2  coding standard with only the parts directly interacting with WordPress using WordPress conventions. For example, global functions are defined as  vp_register_hooks() , not  registerHooks() .   It is also useful to  install the  EditorConfig  extension , VersionPress ships with some basic formatting rules.", 
            "title": "PhpStorm setup"
        }, 
        {
            "location": "/en/developer/dev-setup/#writing-code", 
            "text": "Please refer to the  Contributing code  section in  CONTRIBUTING.md .", 
            "title": "Writing code"
        }, 
        {
            "location": "/en/developer/dev-setup/#debugging", 
            "text": "The development containers have  Xdebug  installed and configured. Here is how to make debugging work in PhpStorm; the  Debugging tests  section gives an example of how to make debugging work in VSCode.  Start the Docker stack with  npm start .  In PhpStorm, go to  Settings     Languages   Frameworks     PHP     Servers  and check the path mappings of the pre-configured  VersionPress-dev  server. Specifically, update the WordPress mapping which PhpStorm does not persist automatically:   The two mappings should be:   your local path /plugins/versionpress  -   /var/www/html/wp-content/plugins/versionpress  your local path /ext-libs/wordpress  -   /var/www/html   The default zero configuration settings in  Settings     Languages   Frameworks     PHP     Debug  should be fine:   Enable debugging in the browser, most commonly using a  browser extension or a bookmarklet :   Place a breakpoint somewhere, e.g., in the main  versionpress.php  file, and start listening for debug connections in PhpStorm.  Reload a page in your browser. Debugging should now work:   After you're done with debugging, run  npm stop  or  npm run stop-and-cleanup .", 
            "title": "Debugging"
        }, 
        {
            "location": "/en/developer/dev-setup/#testing", 
            "text": "Tests are a significant part of the VersionPress project, we care about writing and maintaining them. They live in  plugins/versionpress/tests  and there are several types of them, from unit to full end2end tests. They all run in a dockerized test environment.   Note : the  ./frontend  app has its own tests, this section is about core VersionPress tests (PHP code) only.", 
            "title": "Testing"
        }, 
        {
            "location": "/en/developer/dev-setup/#dockerized-testing-environment", 
            "text": "Similarly to the  development environment , tests utilize Docker Compose as well. The main benefit is that you don't need to set up things like Selenium or Java locally.  Most tasks are scripted, for example, you just run  npm run tests:unit  but you can also drop to the raw Docker Compose mode and do things like  docker-compose run --rm tests ... . In that case, one thing to understand is that there are two services in  docker-compose.yml  to choose from:   tests  \u2013 just a test runner.  tests-with-wordpress  \u2013 starts a WordPress stack.   All scripts also come with a  ...:debug  version, for example,  tests:unit:debug . See  Starting a debugging session from command line .", 
            "title": "Dockerized testing environment"
        }, 
        {
            "location": "/en/developer/dev-setup/#running-tests-from-command-line", 
            "text": "Make sure you have run  npm install  as described above and have Docker running.  Run  npm run tests:unit  or  npm run tests:full .   Unit tests use a simpler  tests  service and are fast to execute.  The full tests include  end2end tests  and are relatively slow to run, however, if they pass, there's a good chance that VersionPress works correctly.", 
            "title": "Running tests from command line"
        }, 
        {
            "location": "/en/developer/dev-setup/#customizing-what-tests-run", 
            "text": "tests:custom  and  tests:custom-with-wordpress  scripts allow you to run custom tests easily. Here are some examples:   \u2755 Notice how PHPUnit arguments come after  -- .   # Pick a test suite from the default phpunit.xml \nnpm run tests:custom -- -c phpunit.xml --testsuite Unit # Create your own phpunit.*.xml (gitignored) \nnpm run tests:custom -- -c phpunit.custom.xml # Run specific test class \nnpm run tests:custom-with-wordpress -- -c phpunit.xml --filter RevertTest  If you want to go entirely custom, use raw  docker-compose :  # PhpStorm-like invocation (copy/pasted from its console): \ndocker-compose run --rm tests ../vendor/bin/phpunit --bootstrap /opt/versionpress/tests/phpunit-bootstrap.php --no-configuration /opt/versionpress/tests/Unit", 
            "title": "Customizing what tests run"
        }, 
        {
            "location": "/en/developer/dev-setup/#test-output", 
            "text": "Npm scripts are configured to log in a TestDox format to container's  /var/opt/versionpress/logs  which is mapped to your local folder  ./dev-env/test-logs .  To log in  another supported format , run tests manually like this:  docker-compose run --rm tests ../vendor/bin/phpunit -c phpunit.xml --log-junit /var/opt/versionpress/logs/vp-tests.log", 
            "title": "Test output"
        }, 
        {
            "location": "/en/developer/dev-setup/#clean-up-tests", 
            "text": "If you've run tests that use the  tests-with-wordpress  service, the whole Docker stack is kept running so that you can inspect it. For example, you can use your local Git client to explore the site's history in  dev-env/wp-for-tests/wptest . The  end2end tests  section provides more info on this.  When you're done with tests, run  npm stop  to shut down the Docker stack or  npm run stop-and-cleanup  to also remove the volumes so that the next start is entirely fresh.", 
            "title": "Clean up tests"
        }, 
        {
            "location": "/en/developer/dev-setup/#tips-for-tests", 
            "text": "If you're trying to narrow down a bug, it's useful to run a smaller test suite via one of the options above and add  stopOnFailure= true  to the XML file or  --stop-on-failure  on the command line.  Unit tests can also easily be run using a local  php  interpreter, basically just run them in PhpStorm.", 
            "title": "Tips for tests"
        }, 
        {
            "location": "/en/developer/dev-setup/#running-and-debugging-tests-from-phpstorm", 
            "text": "PhpStorm makes it easy to select specific tests and to debug them. Also, if you stop debugging, you will see messages gathered so far. There is a one-time setup to go through.   \ud83d\udca1 If this doesn't work for you, e.g., due to some Docker Compose bug in PhpStorm, you can  start debugging from command line .   First, if you're using  Docker for Mac  or  Docker for Windows , expose a daemon in Docker settings:   In PhpStorm, create a new Docker environment in  Settings     Build, Execution, Deployment     Docker :   In the Docker panel, you should now be able to connect:   Next, define a remote interpreter. Make sure you have the  PHP Docker  plugin enabled and go to  Settings     Languages   Frameworks     PHP . Add a new interpreter there:   Note that the  docker-compose.yml  is at the repo root, not inside  ./plugins/versionpress :   If this doesn't go smoothly, try unchecking the  Include parent environment variables  checkbox in the  Environment variables  field:   Select this CLI interpreter as the main one for the project and make sure the path mappings are correct:   The final step is to set up a test framework in  PHP     Test Frameworks . Add a new  PHPUnit by Remote Interpreter :   Don't forget to set the  Default bootstrap file  to  /opt/versionpress/tests/phpunit-bootstrap.php .  Now you're ready to run the tests. For example, to run all unit tests, right-click the  Unit  folder and select  Run :   Debugging also works, just select  Debug  instead of  Run :   This works equally well other types of tests as well, for example, Selenium tests:", 
            "title": "Running and debugging tests from PhpStorm"
        }, 
        {
            "location": "/en/developer/dev-setup/#starting-debugging-session-from-command-line", 
            "text": "This method is more universal and works for PhpStorm, VSCode and other IDEs. You generally do this:   Set a breakpoint.  Start listening in your IDE.  Launch a debug-enabled script like  npm run tests:unit:debug  (see  package.json ).", 
            "title": "Starting debugging session from command line"
        }, 
        {
            "location": "/en/developer/dev-setup/#phpstorm-example", 
            "text": "First, make sure you have the 'VersionPress-tests' server defined in  Settings   Languages   Frameworks   PHP   Servers . If not, run  npm run init-phpstorm .  Then, set a breakpoint in some test and start listening for debug connections in the toolbar.  Run  npm run tests:unit:debug  in the console, skip the first break at the  wp  binary and see your breakpoint hit:   See  this JetBrains help page  for more.", 
            "title": "PhpStorm example"
        }, 
        {
            "location": "/en/developer/dev-setup/#vscode-example", 
            "text": "In VSCode, install  PHP Debug extension  and create a  launch.json  config containing this:  { \n   name :   PHP: Listen for Xdebug , \n   type :   php , \n   request :   launch , \n   port :   9000 , \n   pathMappings :   { \n     /opt/versionpress :   ${workspaceRoot}/plugins/versionpress , \n   }  }   Then, start a debugging session in VSCode and set a breakpoint. Run the  tests:unit:debug  script and see the breakpoint hit:", 
            "title": "VSCode example"
        }, 
        {
            "location": "/en/developer/dev-setup/#unit-tests", 
            "text": "Unit tests are best suited for small pieces of algorithmic functionality. For example,  IniSerializer  is covered by unit tests extensively.  You can either run unit tests in a dockerized environment as described above or set up a local CLI interpret which makes the execution faster and more convenient.", 
            "title": "Unit tests"
        }, 
        {
            "location": "/en/developer/dev-setup/#end2end-tests", 
            "text": "End2end tests exercise a WordPress site and check that VersionPress creates the right Git commits, that the database is in correct state, etc. These tests are quite heavy and slow to run but if they pass, there's a good chance that VersionPress works correctly. (Before the project had these, long and painful manual testing period was necessary before each release.)  End2end tests use the concept of  workers : each test itself is implemented once but how e.g. a post is created or a user deleted is up to a specific worker. There are currently two types of workers:   WP-CLI workers  \u2013 run WP-CLI commands against the test site.  Selenium workers  \u2013 simulate real user by clicking in a browser.   In the future, we might add REST API workers; you get the idea.  Currently, the default worker is WP-CLI and the only way to switch workers is to update  tests/test-config.yml , the  end2end-test-type  key. We'll make it more flexible in the future.  After you've run the tests, the Docker stack is left up and running so that you can inspect it:   The site is running at  http://wordpress-for-tests/  \u2013  update your hosts file  accordingly and log in using the info in  test-config.yml .  The files are mapped to  ./dev-env/wp-for-tests , you can use your local Git client to inspect it.  Connect to the database via  mysql -u root -p  or Adminer which you can access by running  docker-compose run -d --service-ports adminer  and visiting  http://localhost:8099 . The database name is  mysql-for-wordpress .   Stop the Docker stack with  npm run stop-and-cleanup  (stop-and-cleanup is strongly recommended here; end2end tests are not perfectly isolated yet).", 
            "title": "End2end tests"
        }, 
        {
            "location": "/en/developer/dev-setup/#other-tests", 
            "text": "The project has these other types of tests (folders in the  ./plugins/versionpress/tests  folder and also test suite names in  phpunit.xml  so that you can run them using  --testsuite  SuiteName ):   GitRepositoryTests  \u2013 test Git repository manipulation in  GitRepository .  SynchronizerTests  \u2013 these are quite slow and test that given some INI files on disk, the database is in a correct state after synchronization runs.  StorageTests  \u2013 test that entities are stored correctly as INI files.  LoadTests  \u2013 they are run together with other tests but with very few iterations; manually update their source files and execute them separately to properly exercise them.  Selenium  \u2013 a bit like end2end tests but for rarer cases, like VersionPress not being activated yet.  Workflow  \u2013 exercise cloning and merging between environments.", 
            "title": "Other tests"
        }, 
        {
            "location": "/en/developer/dev-setup/#frontend-development", 
            "text": "VersionPress uses a JavaScript frontend implemented as a React app in the  ./frontend  folder.", 
            "title": "Frontend development"
        }, 
        {
            "location": "/en/developer/dev-setup/#phpstorm-webstorm-setup", 
            "text": "Run  npm run init-phpstorm  if you haven't done that already.  Open the  frontend  project in PhpStorm.  Answer \"No\" to  Compile TypeScript to JavaScript?  prompt.   Linting task is set up for the frontend project. Run  npm run lint  in the  frontend  directory.", 
            "title": "PhpStorm / WebStorm setup"
        }, 
        {
            "location": "/en/developer/dev-setup/#running-frontend-separately", 
            "text": "For pure frontend development, it's more convenient to run it outside of the WordPress administration. Let's assume you run the frontend against the default Docker site.   Make sure that the site is running and that VersionPress is activated in it. You should be able to visit  http://localhost  in the browser and the  frontend/src/config/config.local.ts  should contain this URL as API root.  In your test WordPress site, put this to  wp-config.php  (the file should be editable at  ./dev-env/wp/wp-config.php ):\n     define( VERSIONPRESS_REQUIRE_API_AUTH , false);  Run  npm start  in the  frontend  directory.   This launches  webpack dev server  at  http://localhost:8888 :   Source code edits will be automatically reflected in the browser.", 
            "title": "Running frontend separately"
        }, 
        {
            "location": "/en/developer/dev-setup/#production-build", 
            "text": "Run  npm run build , it will produce a file like  dist/versionpress-3.0.2.zip .  The version number is based on the nearest Git tag and can also be something like  3.0.2-27-g0e1ce7f  meaning that the closest tag is  3.0.2 , there have been 27 commits since then and the package was built from  0e1ce7f . See  git describe --tags  for more examples.", 
            "title": "Production build"
        }, 
        {
            "location": "/en/developer/dev-setup/#developing-the-dev-setup", 
            "text": "Meta! If you're working on updating the dev setup (this document, Docker images, etc.), here are some tips for you.", 
            "title": "Developing the dev setup"
        }, 
        {
            "location": "/en/developer/dev-setup/#npm-scripts", 
            "text": "Simpler tasks are scripted directly in  package.json , more complex ones in the  ./scripts  folder, see for example  scripts/build.ts .  To debug the scripts in VSCode, run the script via  debug-script , e.g.:  npm run debug-script scripts/init-dev.ts  Then in VSCode, create a \"Node attach\" configuration and run it.", 
            "title": "npm scripts"
        }, 
        {
            "location": "/en/developer/dev-setup/#building-and-pushing-images", 
            "text": "We're keeping our images close to two  official ones ,  wordpress:php7.2-apache  and  wordpress:cli .  The only goal of our images is to be close to the official project and have the right environment in it, e.g., the PHP version. We don't care that much about specific WordPress versions (WordPress is often installed dynamically anyway, based on  test-config.yml ) so we only use \"vague\" tags like  php7.2-apache  or  cli .  To build and push tags to Docker Hub:   npm run build-images  docker login  npm run push-images   You can get Docker Hub digests by running:  $ npm run get-image-digests\n\ncli sha256:11c49ba4d7198c17660f30e8db4d00ca356b1c4414f338076bf99ab4dd295184\nphp7.2-apache sha256:39ed34f84a5ccf8ab47eb1db4041c226ffe6f874127ead4c26f0b607457b7377", 
            "title": "Building and pushing images"
        }, 
        {
            "location": "/en/developer/dev-setup/#links-to-older-documents", 
            "text": "Legacy approach is documented at the  4.0-alpha1  tag:   Dev-Setup.md  Testing.md", 
            "title": "Links to older documents"
        }, 
        {
            "location": "/en/developer/dev-setup/#docker-tips", 
            "text": "Here are some tips for working with Docker / Docker Compose:   Aliasing  docker-compose  to  dc  will save you some typing.  Values in  docker-compose.yml  can be customized via  docker-compose.override.yml .", 
            "title": "Docker tips"
        }, 
        {
            "location": "/en/developer/dev-setup/#windows-tips", 
            "text": "", 
            "title": "Windows tips"
        }, 
        {
            "location": "/en/developer/dev-setup/#git-bash", 
            "text": "As noted in  Getting started , we only support Git Bash on Windows, a shell that comes with  Git for Windows .  cmd.exe  or PowerShell will not work as we use Linux-style syntax (single quotes, setting environment variables, etc.) and tools like  curl  or  rm -rf  in scripts.  Git Bash is generally an awesome shell, the only problems you might encounter are related to paths. For example, Docker messes with them and when you try to run  docker run --rm -it ubuntu /bin/bash , you'll see an error like  C:/Program Files/Git/usr/bin/bash.exe: no such file or directory . Docker prepends  C:/Program Files/Git  for some reason but you can  use this workaround  or use double slash like  //bin/bash .", 
            "title": "Git Bash"
        }, 
        {
            "location": "/en/developer/dev-setup/#docker-for-windows", 
            "text": "If you can, use  Docker for Windows , not  Docker Toolbox . The experience will be generally smoother.  If you need to use Docker Toolbox:   Enable port forwarding in VirtualBox (especially for ports 80, 3306, 8080 and 8099), see  details .  Docker Toolbox is slower, but you can try to adjust system performance in VirtualBox settings. However, you can run into timeout issues in Workflow tests sometimes and exceed default value of 5 seconds in  wp_remote_get()  in End2End tests.  Run Git Bash and Docker Quickstart Terminal as an Administrator to avoid potential problems (for example permissions and symlinks).", 
            "title": "Docker for Windows"
        }, 
        {
            "location": "/en/developer/dev-setup/#disable-antivirus-software", 
            "text": "You might want to disable your antivirus software when working with Docker. Recommendations differ between version, please look it up.", 
            "title": "Disable antivirus software"
        }, 
        {
            "location": "/en/developer/plugin-support/", 
            "text": "Plugin Support\n\n\n\n\nPlugin Support\n\n\n Plugin support is the main theme of \nVersionPress 4.0\n which is currently in \nbeta\n. Plugin developers, we'd like your feedback on this, feel free to \nopen new issues\n or chat with us \non Gitter\n.\n\n\n\n\nVersionPress needs to understand plugin data, actions, shortcodes and other things to automatically provide version control for them. This document describes how plugins (and themes, later) can hook into VersionPress functionality.\n\n\nIntroduction\n\n\nPlugins are described to VersionPress by a set of files stored in the \n.versionpress\n folder in the plugin root (with other discovery options available, see below). They include:\n\n\n\n\nactions.yml\n \u2013 plugin actions, i.e., what the plugin does\n\n\nschema.yml\n \u2013 database schema (how the plugin stores data)\n\n\nshortcodes.yml\n \u2013 shortcodes\n\n\nhooks.php\n \u2013 other hooks\n\n\n\n\nAll files are optional so for example, if a plugin doesn't define any new shortcodes it can omit the \nshortcodes.yml\n file. Simple plugins like \nHello Dolly\n might even omit everything.\n\n\n\n\nTip\n\n\nWordPress core is described using the very same format and you can find the definition files in the \n.versionpress\n folder inside the plugin.\n\n\n\n\nActions\n\n\nActions represent what the plugin does. For example, WordPress core has actions like \"update option\", \"publish post\" and many others. They are the smallest changes in a WordPress site and are eventually stored as Git commits by VersionPress.\n\n\nAn action is identified by a string like \noption/edit\n or \npost/publish\n, commits some file(s) with it and has a human-readable message like \"Updated option blogname\", \"Published post Hello World\", etc.\n\n\nSome commits may even contain multiple actions. For example, if a user switches to a new theme that also creates some options of its own, a single commit with \ntheme/switch\n and several \noption/create\n actions will be created. When this operation is undone, it takes back both the theme switching and options creation.\n\n\nActions are described in the \nactions.yml\n file.\n\n\nactions.yml\n\n\nHere's an example from the \nWordPress core \nactions.yml\n file\n:\n\n\npost\n:\n\n  \ntags\n:\n\n    \nVP-Post-Title\n:\n \npost_title\n\n    \nVP-Post-Type\n:\n \npost_type\n\n  \nactions\n:\n\n    \ncreate\n:\n \nCreated %VP-Post-Type% \n%VP-Post-Title%\n\n    \nedit\n:\n\n      \nmessage\n:\n \nEdited %VP-Post-Type% \n%VP-Post-Title%\n\n      \npriority\n:\n \n12\n\n\n\npostmeta\n:\n\n  \ntags\n:\n\n    \nVP-Post-Id\n:\n \nvp_post_id\n\n    \nVP-Post-Title\n:\n \n/\n\n  \nparent-id-tag\n:\n \nVP-Post-Id\n\n  \nactions\n:\n\n    \n...\n\n\n\ntheme\n:\n\n  \ntags\n:\n\n    \nVP-Theme-Name\n:\n \n/\n\n  \nactions\n:\n\n    \ninstall\n:\n \nInstalled theme \n%VP-Theme-Name%\n\n    \nupdate\n:\n \nUpdated theme \n%VP-Theme-Name%\n\n\n\n\n\nThese are the main elements:\n\n\n\n\nThe top-level elements are \nscopes\n that basically group related actions together. For example, actions related to posts are in the \npost\n scope, theme actions are in the \ntheme\n scope, etc. Scopes use a singular form.\n\n\nTags\n are values saved in commit messages and are typically used to make user-facing messages more useful. For example, it's better to display \nCreated post 'Hello World'\n than \nCreated post 123\n and tags make this possible.\n\n\nTags are either mapped to database fields as in the \npost\n example, or use the \n/\n character to indicate that the value is provided by a filter (see below).\n\n\n\n\n\n\nThe \nactions\n section\n defines all actions of a scope.\n\n\nAn action has a \nmessage\n that can reference tags to make it more user-friendly. Messages use past tense.\n\n\nEach action has a \npriority\n \u2013 10 by default. Priorities behave like on WordPress filters and actions: the lower the number, the higher the priority. A more important action beats the less important one if both appear in the same commit. For example, \ntheme/switch\n beats \noption/edit\n which means that the user will see a message about changing themes, not updating some internal option.\n\n\nPriorities can be set dynamically using the \nvp_action_priority_{$scope}\n filter, see \nWPLANG handling\n as an example.\n\n\nA combination of a scope and an action, e.g., \npost/create\n or \ntheme/install\n, uniquely identifies the action and can be \nsearched for in the UI\n.\n\n\n\n\n\n\nAn action has a \nmessage\n, usually in past tense, and a \npriority\n. If priority is not set, the default value of 10 is used.\n\n\nPriorities behave like on WordPress filters and actions: the lower the number, the higher the priority. A more important action beats the less important one if both appear in the same commit. For example, \ntheme/switch\n beats \noption/edit\n which means that the user will see a message about changing themes, not updating some internal option.\n\n\n\n\n\n\nMeta entities\n also contain \nparent-id-tag\n with the name of a tag containing ID of the parent entity.\n\n\n\n\nAction detection\n\n\nThere are generally two types of actions:\n\n\n\n\nDatabase actions\n like manipulating posts, options, users, etc.\n\n\nNon-database actions\n like updating WordPress, deleting themes, etc.\n\n\n\n\nDatabase actions\n are more common (at least in WordPress core) and get a pretty convenient treatment by default. Based on the SQL query issued, a \ncreate\n, \nedit\n or \ndelete\n action is created automatically.\n\n\nIf you need more specific actions like \npost/trash\n or \ncomment/approve\n, filters are used: \nvp_entity_action_{$entityName}\n for standard entities and \nvp_meta_entity_action_{$entityName}\n for meta entities.\n\n\n\n\n\ud83d\udea7 Hooks are not properly documented yet, please click through the hook names to at least browse the source codes on GitHub.\n\n\n\n\nTags are automatically extracted from the database entity. For example,\n\n\n  \ntags\n:\n\n    \nVP-Post-Title\n:\n \npost_title\n\n\n\n\n\nmakes sure that the message (defined as \nCreated post '%VP-Post-Title%'\n) automatically stores the real post title.\n\n\nTags can be altered (or created entirely if the YAML only uses \n/\n as a tag value) by filters \nvp_entity_tags_{$entityName}\n and \nvp_meta_entity_tags_{$entityName}\n.\n\n\nNon-database actions\n are tracked manually by calling a global \nvp_force_action()\n function. This overwrites all other actions VersionPress might have collected during the request. For example, this is how \nwordpress/update\n action is tracked:\n\n\nvp_force_action(\nwordpress\n, \nupdate\n, $version, [], $wpFiles);\n\n\n\n\n\n\n\n We're planning to change this for the final VersionPress 4.0 release. Some filter will probably be used instead.\n\n\n\n\nFiles to commit with an action\n\n\nEvery action has a message and some content. It's this content that is undone when the user clicks the Undo button in the UI.\n\n\nFor \ndatabase actions\n, VersionPress automatically commits the corresponding INI file. For example, for a \npost/edit\n action, a post's INI file is committed.\n\n\n\n\nSide note: VersionPress stores database entities in the \nwp-content/vpdb\n folder as a set of INI files.\n\n\n\n\nThis behavior is sufficient most of the time, however, some changes should commit more files. For example, when the post is an attachment, the uploaded file should also be committed. For this, the list of files to commit can be filtered using the \nvp_entity_files_{$entityName}\n or \nvp_meta_entity_files_{$entityName}\n filters.\n\n\nThe array of files to commit can contain three different types of items:\n\n\n\n\nNote\n\n\nConcepts like VPIDs are explained in the \"\nDatabase schema\n\" section below.\n\n\n\n\n\n\n\n\nSingle file corresponding to an entity, for example:\n\n\n[\n\n\n  \ntype\n =\n \nstorage-file\n,\n\n\n  \nentity\n =\n \npost\n,\n\n\n  \nid\n =\n $vpid,\n\n\n  \nparent-id\n =\n $parentVpid  // for meta entities\n\n\n]\n\n\n\n\n\nVersionPress automatically calculates the right path to the file.\n\n\n\n\n\n\nAll files of an entity type:\n\n\n[\n\n\n  \ntype\n =\n \nall-storage-files\n,\n\n\n  \nentity\n =\n \noption\n\n\n]\n\n\n\n\n\n\n\n\n\nPath on the filesystem:\n\n\n[\n\n\n  \ntype\n =\n \npath\n,\n\n\n  \npath\n =\n \nsome/path/supports/wildcards/*\n\n\n]\n\n\n\n\n\n\n\n\n\nThe full example might look something like this:\n\n\n[\n\n\n  [\ntype\n =\n \nstorage-file\n, \nentity\n =\n \npost\n, \nid\n =\n $vpid, \nparent-id\n =\n null],\n\n\n  [\ntype\n =\n \nstorage-file\n, \nentity\n =\n \nusermeta\n, \nid\n =\n $vpid, \nparent-id\n =\n $userVpid],\n\n\n  [\ntype\n =\n \nall-storage-files\n, \nentity\n =\n \noption\n],\n\n\n  [\ntype\n =\n \npath\n, \npath\n =\n \n/var/www/wp/example.txt\n],\n\n\n  [\ntype\n =\n \npath\n, \npath\n =\n \n/var/www/wp/folder/*\n]\n\n\n]\n\n\n\n\n\nFor \nnon-database actions\n, this list is one of the arguments of the \nvp_force_action()\n function.\n\n\n\n\nAs noted above, we'll be getting rid of this approach so this is temporary info.\n\n\n\n\nDatabase schema\n\n\nIf the plugin adds custom data into the database it must provide a \nschema.yml\n file describing the database model. For example, this is how WordPress posts are described:\n\n\npost\n:\n\n  \ntable\n:\n \nposts\n\n  \nid\n:\n \nID\n\n  \nreferences\n:\n\n    \npost_author\n:\n \nuser\n\n    \npost_parent\n:\n \npost\n\n  \nmn-references\n:\n\n    \nterm_relationships.term_taxonomy_id\n:\n \nterm_taxonomy\n\n  \nignored-entities\n:\n\n    \n-\n \npost_type:\n \nrevision\n\n    \n-\n \npost_status:\n \nauto-draft\n\n  \nignored-columns\n:\n\n    \n-\n \ncomment_count\n:\n \n@vp_fix_comments_count\n\n  \nclean-cache\n:\n\n    \n-\n \npost\n:\n \nid\n\n\n\n\n\nDefining entities\n\n\nThe top-level keys define entities such as \npost\n, \ncomment\n, \noption\n or \npostmeta\n. Entity names use a singular form.\n\n\nBy default, entity names match database table names without the \nwp_\n (or custom) prefix. It is possible to specify a different table using the \ntable\n property:\n\n\npost\n:\n\n  \ntable\n:\n \nposts\n\n  \n...\n\n\n\n\n\nAgain, this is prefix-less; \nwp_\n or another prefix will be added automatically.\n\n\nIdentifying entities\n\n\nVersionPress needs to know how to identify entities. There are two approaches and they are represented by either using a \nid\n or \nvpid\n property in the schema:\n\n\n\n\n\n\nid\n points to a standard WordPress auto-increment primary key. \nVersionPress will generate VPIDs\n (globally unique IDs) for such entities. Most entities are of this type \u2013 posts, comments, users etc.\n\n\n\n\n\n\nvpid\n points VersionPress directly to use the given column as a unique identifier and skip the whole VPID generation and maintenance process. Entities of this type \nwill not have artificial VPIDs\n. The \noptions\n table is an example of this \u2013 even though it has an \noption_id\n auto-increment primary key, from VersionPress' point of view the unique identifier is \noption_name\n.\n\n\n\n\n\n\nExamples:\n\n\npost\n:\n\n  \ntable\n:\n \nposts\n\n  \nid\n:\n \nID\n\n\n\noption\n:\n\n  \ntable\n:\n \noptions\n\n  \nvpid\n:\n \noption_name\n\n\n\n\n\nReferences\n\n\nVersionPress needs to understand relationships between entities so that it can update their IDs between environments. There are several types of references, each using a slightly different notation in the schema file.\n\n\nBasic references\n\n\nThe most basic references are \"foreign keys\". For example:\n\n\npost\n:\n\n  \nreferences\n:\n\n    \npost_author\n:\n \nuser\n\n    \npost_parent\n:\n \npost\n\n\n\n\n\nThis says that the \npost_author\n field points to a user while the \npost_parent\n references another post.\n\n\nValue references\n\n\nValue references are used when a reference to an entity depends on another column value. For example, options might point to posts, terms or users and it will depend on which option it is. This is how it's encoded:\n\n\noption\n:\n\n  \nvalue-references\n:\n\n    \noption_name@option_value\n:\n\n      \npage_on_front\n:\n \npost\n\n      \ndefault_category\n:\n \nterm\n\n      \n...\n\n\n\n\n\nThis is the simplest case but it can also get more fancy:\n\n\nIf the entity type needs to be \ndetermined dynamically\n it can reference a PHP function:\n\n\npostmeta\n:\n\n  \nvalue-references\n:\n\n    \nmeta_key@meta_value\n:\n\n      \n_menu_item_object_id\n:\n \n@\\VersionPress\\Database\\VpidRepository::getMenuReference\n\n\n\n\n\nNote that there are no parenthesis at the end of this (it's a method reference, not a call) and that it is prefixed with \n@\n. The function gets the entity as a parameter and returns a target entity name. For example, for \n_menu_item_object_id\n, the function looks for a related DB row with \n_menu_item_type\n and returns its value.\n\n\nIf the \nID is in a serialized object\n, you can specify the path by a suffix of the source column. It looks like an array access but also supports regular expressions, for example:\n\n\noption\n:\n\n  \nvalue-references\n:\n\n    \noption_name@option_value\n:\n\n      \nwidget_pages[/\\d+/][\nexclude\n]\n:\n \npost\n\n\n\n\n\nTo visualize this, the \nwidget_pages\n option contains a value like \na:2:{i:2;a:3:{s:5:\ntitle\n;s:0:\n;s:7:\nexclude\n;s:7:\n1, 2, 3\n;...}...}\n which, unserialized, looks like this:\n\n\n[\n\n\n  2 =\n [\n\n\n    \ntitle\n =\n \n,\n\n\n    \nsortby\n =\n \npost_title\n,\n\n\n    \nexclude\n =\n \n1, 2, 3\n\n\n  ],\n\n\n  \n_multiwidget\n =\n 1\n\n\n]\n\n\n\n\n\nThe schema says that the numbers in the \"exclude\" key reference posts.\n\n\nValue references also support \nwildcards\n in the name of the source column. It's useful e.g. for options named \ntheme_mods_\nname of theme\n. An example that mixes this with the serialized data syntax is:\n\n\noption\n:\n\n  \nvalue-references\n:\n\n    \noption_name@option_value\n:\n\n      \ntheme_mods_*[\nnav_menu_locations\n][/.*/]\n:\n \nterm\n\n      \ntheme_mods_*[\nheader_image_data\n][\nattachment_id\n]\n:\n \npost\n\n      \ntheme_mods_*[\ncustom_logo\n]\n:\n \npost\n\n\n\n\n\nIt probably won't surprise you that this is a real example used in WordPress' \nschema.yml\n. \n\n\nAnother supported feature are IDs in serialized data in serialized data (really).\n\n\nAn example from WooCommerce: \na:1:{s:4:\ncart\n;s:99:\na:1:{s:32:\na5bfc9e07964f8dddeb95fc584cd965d\n;a:2:{s:10:\nproduct_id\n;i:37;s:12:\nvariation_id\n;i:0;}}\n;}\n.\n\n\nsession\n:\n\n  \nvalue-references\n:\n\n    \nsession_key@session_value\n:\n\n      \n*[\\\ncart\\\n]..[/.*/][\\\nproduct_id\\\n]\n:\n \nproduct\n\n      \n*[\\\ncart\\\n]..[/.*/][\\\nvariation_id\\\n]\n:\n \nvariation\n\n\n\n\n\nThe complete syntax is:\n\n\nvalue-references\n:\n\n  \nsource_column_name\n@\nvalue_column_name\n:\n\n    \nsource_column_value\n:\n \nforeign_entity_name | @mapping_function\n\n    \nsource_column_value\n[\npath-in-serialized-objects\n][/\\d+/][0]..[\nkey-in-nested-serialized-array\n]\n:\n \nforeign_entity_name | @mapping_function\n\n    \ncolumns_with_prefix_*\n:\n \nforeign_entity_name | @mapping_function\n\n\n\n\n\nM:N references\n\n\nSome entities are in an M:N relationship like posts and term_taxonomies. This is how it's written:\n\n\npost\n:\n\n  \nmn-references\n:\n\n    \nterm_relationships.term_taxonomy_id\n:\n \nterm_taxonomy\n\n\n\n\n\nOne entity is considered the main one which is kind of arbitrary as technically, VersionPress treats them equally. Here, we decided that posts will store tags and categories in them, not the other way around.\n\n\nThe syntax is:\n\n\nmn-references\n:\n\n  \njunction_table_name_without_prefix\n.\ncolumn_name\n:\n \nforeign_entity_name\n\n\n\n\n\nReferences can also be prefixed with a tilde (\n~\n) which makes them \n\"virtual\"\n:\n\n\nmn-references\n:\n\n  \n~\njunction_table_name_without_prefix\n.\ncolumn_name\n:\n \nforeign_entity_name\n\n\n\n\n\nA virtual reference is not stored in the INI file but the relationships are still checked during reverts. For example, when a revert would delete a category (revert of \nterm_taxonomy/create\n) and there is some post referencing it, the operation would fail. This is ensured by:\n\n\nterm_taxonomy\n:\n\n  \nmn-references\n:\n\n    \n~term_relationships.object_id\n:\n \npost\n\n\n\n\n\nParent references\n\n\nSome entities are stored within other entities, for example, postmeta are stored in the same INI file as their parent post. This is captured using a \nparent-reference\n property:\n\n\npostmeta\n:\n\n  \nparent-reference\n:\n \npost_id\n\n  \nreferences\n:\n\n    \npost_id\n:\n \npost\n\n\n\n\n\nThis references one of the basic reference column names, not the final entity. The notation above reads \"postmeta stores a parent reference in the \npost_id\n column, and that points to the \npost\n entity\".\n\n\nFrequently written entities\n\n\nSome entities are changed very often, e.g., view counters, Akismet spam count, etc. VersionPress only saves them once in a while and the \nfrequently-written\n section influences this:\n\n\nentity\n:\n\n  \nfrequently-written\n:\n\n    \n-\n \ncolumn_name:\n \nvalue\n\n    \n-\n \nquery\n:\n \ncolumn1_name:\n \nvalue1\n \ncolumn2_name:\n \nvalue2\n\n      \ninterval\n:\n \n5min\n\n\n\n\n\nThe values in the \nfrequently-written\n array can either be strings which are then interpreted as queries, or objects with \nquery\n and \ninterval\n keys.\n\n\n\n\nQueries\n use the same syntax as search / filtering in the UI, with some small differences like that the date range operator cannot be used but overall, the syntax is pretty intuitive. \nTODO add link\n\n\nThe \ninterval\n is parsed by the \nstrtotime()\n function and the default value is one hour.\n\n\n\n\nIgnoring entities\n\n\nSome entities should be ignored (not tracked at all) like transient options, environment-specific options, etc. This is an example from the \noption\n entity:\n\n\n  \nignored-entities\n:\n\n    \n-\n \noption_name:\n \n_transient_*\n\n    \n-\n \noption_name:\n \n_site_transient_*\n\n    \n-\n \noption_name:\n \nsiteurl\n\n\n\n\n\nAgain, queries are used. Wildcards are supported.\n\n\nIgnoring columns\n\n\nIt is possible to ignore just parts of entities. The columns might either be ignored entirely or computed dynamically using a PHP function:\n\n\nentity\n:\n\n  \nignored-columns\n:\n\n    \n-\n \ncolumn_name_1\n\n    \n-\n \ncolumn_name_2\n\n    \n-\n \ncomputed_column_name\n:\n \n@functionReference\n\n\n\n\n\nThe function is called whenever VersionPress does its INI files =\n DB synchronization. The function will get an instance of \nVersionPress\\Database\\Database\n as an argument and is expected to update the database appropriately. The \nDatabase\n class has the same methods as \nwpdb\n but the changes it make are not tracked by VersionPress itself.\n\n\nCache invalidation\n\n\nWordPress uses cache for posts, comments, users, terms, etc. This cache needs to be invalidated when VersionPress updates database (on undo, rollback, pull, etc.). It is possible to tell VersionPress which cache to invalidate and where to find the related IDs.\n\n\nFor example, when some post is deleted using the Undo functionality, it is necessary to call \nclean_post_cache(\npost-id\n)\n. VersionPress will do it automatically based on following piece of schema:\n\n\npost\n:\n\n  \ntable\n:\n \nposts\n\n  \nid\n:\n \nID\n\n  \nclean-cache\n:\n\n    \n-\n \npost\n:\n \nid\n\n\n\n\n\nIt tells VersionPress to delete the post cache (VP resolves the function name as \nclean_\ncache-type\n_cache\n). You can use \nid\n as the source of IDs for invalidation or a reference. For example like this:\n\n\npost\n:\n\n  \nreferences\n:\n\n      \npost_author\n:\n \nuser\n\n      \npost_parent\n:\n \npost\n\n  \nclean-cache\n:\n\n    \n-\n \npost\n:\n \nid\n\n    \n-\n \nuser\n:\n \npost_author\n\n    \n-\n \npost\n:\n \npost_parent\n\n\n\n\n\nShortcodes\n\n\nSimilarly to database schema, VersionPress needs to understand shortcodes as they can also contain entity references. \nshortcodes.yml\n describes this, here is an example:\n\n\nshortcode-locations\n:\n\n  \npost\n:\n\n    \n-\n \npost_content\n\n\n\nshortcodes\n:\n\n  \ngallery\n:\n\n    \nid\n:\n \npost\n\n    \nids\n:\n \npost\n\n    \ninclude\n:\n\n    \nexclude\n:\n \npost\n\n  \nplaylist\n:\n\n    \nid\n:\n \npost\n\n    \nids\n:\n \npost\n\n    \ninclude\n:\n \npost\n\n    \nexclude\n:\n \npost\n\n\n\n\n\nThe \nshortcode-locations\n array tells VersionPress where the shortcodes can appear. By default, WordPress only allows shortcodes in post content but here's an example of how it could look if it also supported them in post titles and comments:\n\n\nshortcode-locations\n:\n\n  \npost\n:\n\n    \n-\n \npost_content\n\n    \n-\n \npost_title\n\n  \ncomment\n:\n\n    \n-\n \ncomment_content\n\n\n\n\n\nNote that WordPress doesn't restrict shortcode \ntype\n for various locations, so if some shortcode is supported in e.g. \ncomment_content\n, all shortcodes are.\n\n\nThe \nshortcodes\n array holds the actual shortcodes, but only those that contain references to other entities so things like \n[embed]\n or \n[audio]\n are not present. Here's an example:\n\n\nshortcodes\n:\n\n  \ngallery\n:\n\n    \nid\n:\n \npost\n\n    \nids\n:\n \npost\n\n    \ninclude\n:\n\n    \nexclude\n:\n \npost\n\n  \nplaylist\n:\n\n    \nid\n:\n \npost\n\n    \nids\n:\n \npost\n\n    \ninclude\n:\n \npost\n\n    \nexclude\n:\n \npost\n\n\n\n\n\nFor example the \n[gallery]\n shortcode has four attributes that can contain references, and they all point to the \npost\n entity (it's an entity, not a table; the table will eventually be something like \nwp_posts\n).\n\n\nNote that you don't have to worry about the attribute type, whether it contains a single ID or a list of IDs. VersionPress handles both cases automatically:\n\n\n[gallery id=\n1\n]\n\n\n[gallery id=\n1,2,3,6,11,20\n]\n\n\n\n\n\nHooks\n\n\nIf something cannot be described statically, VersionPress offers several filters, actions and functions to define behavior through code. Implement them in the \nhooks.php\n file.\n\n\nMost of the filters have already been discussed in the text above, you can find the full API reference below.\n\n\nIgnored folders\n\n\nFeel free to use custom \n.gitignore\n for files in the plugin directory. You can also ignore files / directories outside the plugin directory. There will be a filter to let VersionPress know which files / directories you want to ignore.\n\n\nDiscovery mechanism\n\n\nVersionPress looks for plugin definitions in these locations, in this order:\n\n\n\n\nWP_CONTENT_DIR/.versionpress/plugins/\nplugin-slug\n (user-editable definitions in the \nwp-content\n directory)\n\n\nWP_PLUGIN_DIR/\nplugin-slug\n/.versionpress\n (definitions bundled with plugins)\n\n\n\n\nThe first definition found is used.\n\n\nResources\n\n\n\n\nIssue \n#1036\n \u2013 everything was discussed there.\n\n\n\n\nAPI reference\n\n\nTODO this will be auto-generated from code.\n\n\nFilters\n\n\n\n\nvp_entity_action_{$entityName}\n\n\napply_filters(\nvp_entity_action_{$entityName}\n, $action, $oldEntity, $newEntity)\n\n\n\n\n\n\nvp_meta_entity_action_{$entityName}\n\n\napply_filters(\nvp_meta_entity_action_{$entityName}\n, $action, $oldEntity, $newEntity, $oldParentEntity, $newParentEntity)\n\n\n\n\n\n\nvp_entity_tags_{$entityName}\n\n\napply_filters(\nvp_entity_tags_{$entityName}\n, $tags, $oldEntity, $newEntity, $action)\n\n\n\n\n\n\nvp_meta_entity_tags_{$entityName}\n\n\napply_filters(\nvp_meta_entity_tags_{$entityName}\n, $tags, $oldEntity, $newEntity, $action, $oldParentEntity, $newParentEntity)\n\n\n\n\n\n\nvp_entity_files_{$entityName}\n\n\napply_filters(\nvp_entity_files_{$entityName}\n, $files, $oldEntity, $newEntity)\n\n\n\n\n\n\nvp_meta_entity_files_{$entityName}\n\n\napply_filters(\nvp_meta_entity_files_{$entityName}\n, $files, $oldEntity, $newEntity, $oldParentEntity, $newParentEntity)\n\n\n\n\n\n\nvp_entity_should_be_saved_{$entityName}\n\n\napply_filters(\nvp_entity_should_be_saved_{$entityName}\n, $shouldBeSaved, $data, $storage)\n\n\n\n\n\n\nvp_bulk_change_description_{$entityName}\n\n\napply_filters(\nvp_bulk_change_description_{$entityName}\n, $description, $action, $count, $tags)\n\n\n\n\n\n\nvp_action_description_{$scope}\n\n\napply_filters(\nvp_action_description_{$scope}\n, $message, $action, $vpid, $tags)\n\n\n\n\n\n\nvp_action_priority_{$scope}\n\n\napply_filters(\nvp_action_priority_{$entityName}\n, $defaultPriority, $action, $vpid, $entity)\n\n\napply_filters(\nvp_action_priority_{$entityName}\n, $defaultPriority, $action, $vpid)\n\n\n\n\n\n\n\n\nActions (API)\n\n\n\n\nvp_before_synchronization_{$entityName}\n\n\ndo_action(\nvp_before_synchronization_{$entityName}\n)\n\n\n\n\n\n\nvp_after_synchronization_{$entityName}\n\n\ndo_action(\nvp_after_synchronization_{$entityName}\n)\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\nvp_force_action\n\n\nvp_force_action($scope, $action, $id = '', $tags = [], $files = [])", 
            "title": "Plugin Support"
        }, 
        {
            "location": "/en/developer/plugin-support/#plugin-support", 
            "text": "Plugin Support   Plugin support is the main theme of  VersionPress 4.0  which is currently in  beta . Plugin developers, we'd like your feedback on this, feel free to  open new issues  or chat with us  on Gitter .   VersionPress needs to understand plugin data, actions, shortcodes and other things to automatically provide version control for them. This document describes how plugins (and themes, later) can hook into VersionPress functionality.", 
            "title": "Plugin Support"
        }, 
        {
            "location": "/en/developer/plugin-support/#introduction", 
            "text": "Plugins are described to VersionPress by a set of files stored in the  .versionpress  folder in the plugin root (with other discovery options available, see below). They include:   actions.yml  \u2013 plugin actions, i.e., what the plugin does  schema.yml  \u2013 database schema (how the plugin stores data)  shortcodes.yml  \u2013 shortcodes  hooks.php  \u2013 other hooks   All files are optional so for example, if a plugin doesn't define any new shortcodes it can omit the  shortcodes.yml  file. Simple plugins like  Hello Dolly  might even omit everything.   Tip  WordPress core is described using the very same format and you can find the definition files in the  .versionpress  folder inside the plugin.", 
            "title": "Introduction"
        }, 
        {
            "location": "/en/developer/plugin-support/#actions", 
            "text": "Actions represent what the plugin does. For example, WordPress core has actions like \"update option\", \"publish post\" and many others. They are the smallest changes in a WordPress site and are eventually stored as Git commits by VersionPress.  An action is identified by a string like  option/edit  or  post/publish , commits some file(s) with it and has a human-readable message like \"Updated option blogname\", \"Published post Hello World\", etc.  Some commits may even contain multiple actions. For example, if a user switches to a new theme that also creates some options of its own, a single commit with  theme/switch  and several  option/create  actions will be created. When this operation is undone, it takes back both the theme switching and options creation.  Actions are described in the  actions.yml  file.", 
            "title": "Actions"
        }, 
        {
            "location": "/en/developer/plugin-support/#actionsyml", 
            "text": "Here's an example from the  WordPress core  actions.yml  file :  post : \n   tags : \n     VP-Post-Title :   post_title \n     VP-Post-Type :   post_type \n   actions : \n     create :   Created %VP-Post-Type%  %VP-Post-Title% \n     edit : \n       message :   Edited %VP-Post-Type%  %VP-Post-Title% \n       priority :   12  postmeta : \n   tags : \n     VP-Post-Id :   vp_post_id \n     VP-Post-Title :   / \n   parent-id-tag :   VP-Post-Id \n   actions : \n     ...  theme : \n   tags : \n     VP-Theme-Name :   / \n   actions : \n     install :   Installed theme  %VP-Theme-Name% \n     update :   Updated theme  %VP-Theme-Name%   These are the main elements:   The top-level elements are  scopes  that basically group related actions together. For example, actions related to posts are in the  post  scope, theme actions are in the  theme  scope, etc. Scopes use a singular form.  Tags  are values saved in commit messages and are typically used to make user-facing messages more useful. For example, it's better to display  Created post 'Hello World'  than  Created post 123  and tags make this possible.  Tags are either mapped to database fields as in the  post  example, or use the  /  character to indicate that the value is provided by a filter (see below).    The  actions  section  defines all actions of a scope.  An action has a  message  that can reference tags to make it more user-friendly. Messages use past tense.  Each action has a  priority  \u2013 10 by default. Priorities behave like on WordPress filters and actions: the lower the number, the higher the priority. A more important action beats the less important one if both appear in the same commit. For example,  theme/switch  beats  option/edit  which means that the user will see a message about changing themes, not updating some internal option.  Priorities can be set dynamically using the  vp_action_priority_{$scope}  filter, see  WPLANG handling  as an example.  A combination of a scope and an action, e.g.,  post/create  or  theme/install , uniquely identifies the action and can be  searched for in the UI .    An action has a  message , usually in past tense, and a  priority . If priority is not set, the default value of 10 is used.  Priorities behave like on WordPress filters and actions: the lower the number, the higher the priority. A more important action beats the less important one if both appear in the same commit. For example,  theme/switch  beats  option/edit  which means that the user will see a message about changing themes, not updating some internal option.    Meta entities  also contain  parent-id-tag  with the name of a tag containing ID of the parent entity.", 
            "title": "actions.yml"
        }, 
        {
            "location": "/en/developer/plugin-support/#action-detection", 
            "text": "There are generally two types of actions:   Database actions  like manipulating posts, options, users, etc.  Non-database actions  like updating WordPress, deleting themes, etc.   Database actions  are more common (at least in WordPress core) and get a pretty convenient treatment by default. Based on the SQL query issued, a  create ,  edit  or  delete  action is created automatically.  If you need more specific actions like  post/trash  or  comment/approve , filters are used:  vp_entity_action_{$entityName}  for standard entities and  vp_meta_entity_action_{$entityName}  for meta entities.   \ud83d\udea7 Hooks are not properly documented yet, please click through the hook names to at least browse the source codes on GitHub.   Tags are automatically extracted from the database entity. For example,     tags : \n     VP-Post-Title :   post_title   makes sure that the message (defined as  Created post '%VP-Post-Title%' ) automatically stores the real post title.  Tags can be altered (or created entirely if the YAML only uses  /  as a tag value) by filters  vp_entity_tags_{$entityName}  and  vp_meta_entity_tags_{$entityName} .  Non-database actions  are tracked manually by calling a global  vp_force_action()  function. This overwrites all other actions VersionPress might have collected during the request. For example, this is how  wordpress/update  action is tracked:  vp_force_action( wordpress ,  update , $version, [], $wpFiles);     We're planning to change this for the final VersionPress 4.0 release. Some filter will probably be used instead.", 
            "title": "Action detection"
        }, 
        {
            "location": "/en/developer/plugin-support/#files-to-commit-with-an-action", 
            "text": "Every action has a message and some content. It's this content that is undone when the user clicks the Undo button in the UI.  For  database actions , VersionPress automatically commits the corresponding INI file. For example, for a  post/edit  action, a post's INI file is committed.   Side note: VersionPress stores database entities in the  wp-content/vpdb  folder as a set of INI files.   This behavior is sufficient most of the time, however, some changes should commit more files. For example, when the post is an attachment, the uploaded file should also be committed. For this, the list of files to commit can be filtered using the  vp_entity_files_{$entityName}  or  vp_meta_entity_files_{$entityName}  filters.  The array of files to commit can contain three different types of items:   Note  Concepts like VPIDs are explained in the \" Database schema \" section below.     Single file corresponding to an entity, for example:  [     type  =   storage-file ,     entity  =   post ,     id  =  $vpid,     parent-id  =  $parentVpid  // for meta entities  ]   VersionPress automatically calculates the right path to the file.    All files of an entity type:  [     type  =   all-storage-files ,     entity  =   option  ]     Path on the filesystem:  [     type  =   path ,     path  =   some/path/supports/wildcards/*  ]     The full example might look something like this:  [    [ type  =   storage-file ,  entity  =   post ,  id  =  $vpid,  parent-id  =  null],    [ type  =   storage-file ,  entity  =   usermeta ,  id  =  $vpid,  parent-id  =  $userVpid],    [ type  =   all-storage-files ,  entity  =   option ],    [ type  =   path ,  path  =   /var/www/wp/example.txt ],    [ type  =   path ,  path  =   /var/www/wp/folder/* ]  ]   For  non-database actions , this list is one of the arguments of the  vp_force_action()  function.   As noted above, we'll be getting rid of this approach so this is temporary info.", 
            "title": "Files to commit with an action"
        }, 
        {
            "location": "/en/developer/plugin-support/#database-schema", 
            "text": "If the plugin adds custom data into the database it must provide a  schema.yml  file describing the database model. For example, this is how WordPress posts are described:  post : \n   table :   posts \n   id :   ID \n   references : \n     post_author :   user \n     post_parent :   post \n   mn-references : \n     term_relationships.term_taxonomy_id :   term_taxonomy \n   ignored-entities : \n     -   post_type:   revision \n     -   post_status:   auto-draft \n   ignored-columns : \n     -   comment_count :   @vp_fix_comments_count \n   clean-cache : \n     -   post :   id", 
            "title": "Database schema"
        }, 
        {
            "location": "/en/developer/plugin-support/#defining-entities", 
            "text": "The top-level keys define entities such as  post ,  comment ,  option  or  postmeta . Entity names use a singular form.  By default, entity names match database table names without the  wp_  (or custom) prefix. It is possible to specify a different table using the  table  property:  post : \n   table :   posts \n   ...   Again, this is prefix-less;  wp_  or another prefix will be added automatically.", 
            "title": "Defining entities"
        }, 
        {
            "location": "/en/developer/plugin-support/#identifying-entities", 
            "text": "VersionPress needs to know how to identify entities. There are two approaches and they are represented by either using a  id  or  vpid  property in the schema:    id  points to a standard WordPress auto-increment primary key.  VersionPress will generate VPIDs  (globally unique IDs) for such entities. Most entities are of this type \u2013 posts, comments, users etc.    vpid  points VersionPress directly to use the given column as a unique identifier and skip the whole VPID generation and maintenance process. Entities of this type  will not have artificial VPIDs . The  options  table is an example of this \u2013 even though it has an  option_id  auto-increment primary key, from VersionPress' point of view the unique identifier is  option_name .    Examples:  post : \n   table :   posts \n   id :   ID  option : \n   table :   options \n   vpid :   option_name", 
            "title": "Identifying entities"
        }, 
        {
            "location": "/en/developer/plugin-support/#references", 
            "text": "VersionPress needs to understand relationships between entities so that it can update their IDs between environments. There are several types of references, each using a slightly different notation in the schema file.", 
            "title": "References"
        }, 
        {
            "location": "/en/developer/plugin-support/#basic-references", 
            "text": "The most basic references are \"foreign keys\". For example:  post : \n   references : \n     post_author :   user \n     post_parent :   post   This says that the  post_author  field points to a user while the  post_parent  references another post.", 
            "title": "Basic references"
        }, 
        {
            "location": "/en/developer/plugin-support/#value-references", 
            "text": "Value references are used when a reference to an entity depends on another column value. For example, options might point to posts, terms or users and it will depend on which option it is. This is how it's encoded:  option : \n   value-references : \n     option_name@option_value : \n       page_on_front :   post \n       default_category :   term \n       ...   This is the simplest case but it can also get more fancy:  If the entity type needs to be  determined dynamically  it can reference a PHP function:  postmeta : \n   value-references : \n     meta_key@meta_value : \n       _menu_item_object_id :   @\\VersionPress\\Database\\VpidRepository::getMenuReference   Note that there are no parenthesis at the end of this (it's a method reference, not a call) and that it is prefixed with  @ . The function gets the entity as a parameter and returns a target entity name. For example, for  _menu_item_object_id , the function looks for a related DB row with  _menu_item_type  and returns its value.  If the  ID is in a serialized object , you can specify the path by a suffix of the source column. It looks like an array access but also supports regular expressions, for example:  option : \n   value-references : \n     option_name@option_value : \n       widget_pages[/\\d+/][ exclude ] :   post   To visualize this, the  widget_pages  option contains a value like  a:2:{i:2;a:3:{s:5: title ;s:0: ;s:7: exclude ;s:7: 1, 2, 3 ;...}...}  which, unserialized, looks like this:  [    2 =  [       title  =   ,       sortby  =   post_title ,       exclude  =   1, 2, 3    ],     _multiwidget  =  1  ]   The schema says that the numbers in the \"exclude\" key reference posts.  Value references also support  wildcards  in the name of the source column. It's useful e.g. for options named  theme_mods_ name of theme . An example that mixes this with the serialized data syntax is:  option : \n   value-references : \n     option_name@option_value : \n       theme_mods_*[ nav_menu_locations ][/.*/] :   term \n       theme_mods_*[ header_image_data ][ attachment_id ] :   post \n       theme_mods_*[ custom_logo ] :   post   It probably won't surprise you that this is a real example used in WordPress'  schema.yml .   Another supported feature are IDs in serialized data in serialized data (really).  An example from WooCommerce:  a:1:{s:4: cart ;s:99: a:1:{s:32: a5bfc9e07964f8dddeb95fc584cd965d ;a:2:{s:10: product_id ;i:37;s:12: variation_id ;i:0;}} ;} .  session : \n   value-references : \n     session_key@session_value : \n       *[\\ cart\\ ]..[/.*/][\\ product_id\\ ] :   product \n       *[\\ cart\\ ]..[/.*/][\\ variation_id\\ ] :   variation   The complete syntax is:  value-references : \n   source_column_name @ value_column_name : \n     source_column_value :   foreign_entity_name | @mapping_function \n     source_column_value [ path-in-serialized-objects ][/\\d+/][0]..[ key-in-nested-serialized-array ] :   foreign_entity_name | @mapping_function \n     columns_with_prefix_* :   foreign_entity_name | @mapping_function", 
            "title": "Value references"
        }, 
        {
            "location": "/en/developer/plugin-support/#mn-references", 
            "text": "Some entities are in an M:N relationship like posts and term_taxonomies. This is how it's written:  post : \n   mn-references : \n     term_relationships.term_taxonomy_id :   term_taxonomy   One entity is considered the main one which is kind of arbitrary as technically, VersionPress treats them equally. Here, we decided that posts will store tags and categories in them, not the other way around.  The syntax is:  mn-references : \n   junction_table_name_without_prefix . column_name :   foreign_entity_name   References can also be prefixed with a tilde ( ~ ) which makes them  \"virtual\" :  mn-references : \n   ~ junction_table_name_without_prefix . column_name :   foreign_entity_name   A virtual reference is not stored in the INI file but the relationships are still checked during reverts. For example, when a revert would delete a category (revert of  term_taxonomy/create ) and there is some post referencing it, the operation would fail. This is ensured by:  term_taxonomy : \n   mn-references : \n     ~term_relationships.object_id :   post", 
            "title": "M:N references"
        }, 
        {
            "location": "/en/developer/plugin-support/#parent-references", 
            "text": "Some entities are stored within other entities, for example, postmeta are stored in the same INI file as their parent post. This is captured using a  parent-reference  property:  postmeta : \n   parent-reference :   post_id \n   references : \n     post_id :   post   This references one of the basic reference column names, not the final entity. The notation above reads \"postmeta stores a parent reference in the  post_id  column, and that points to the  post  entity\".", 
            "title": "Parent references"
        }, 
        {
            "location": "/en/developer/plugin-support/#frequently-written-entities", 
            "text": "Some entities are changed very often, e.g., view counters, Akismet spam count, etc. VersionPress only saves them once in a while and the  frequently-written  section influences this:  entity : \n   frequently-written : \n     -   column_name:   value \n     -   query :   column1_name:   value1   column2_name:   value2 \n       interval :   5min   The values in the  frequently-written  array can either be strings which are then interpreted as queries, or objects with  query  and  interval  keys.   Queries  use the same syntax as search / filtering in the UI, with some small differences like that the date range operator cannot be used but overall, the syntax is pretty intuitive.  TODO add link  The  interval  is parsed by the  strtotime()  function and the default value is one hour.", 
            "title": "Frequently written entities"
        }, 
        {
            "location": "/en/developer/plugin-support/#ignoring-entities", 
            "text": "Some entities should be ignored (not tracked at all) like transient options, environment-specific options, etc. This is an example from the  option  entity:     ignored-entities : \n     -   option_name:   _transient_* \n     -   option_name:   _site_transient_* \n     -   option_name:   siteurl   Again, queries are used. Wildcards are supported.", 
            "title": "Ignoring entities"
        }, 
        {
            "location": "/en/developer/plugin-support/#ignoring-columns", 
            "text": "It is possible to ignore just parts of entities. The columns might either be ignored entirely or computed dynamically using a PHP function:  entity : \n   ignored-columns : \n     -   column_name_1 \n     -   column_name_2 \n     -   computed_column_name :   @functionReference   The function is called whenever VersionPress does its INI files =  DB synchronization. The function will get an instance of  VersionPress\\Database\\Database  as an argument and is expected to update the database appropriately. The  Database  class has the same methods as  wpdb  but the changes it make are not tracked by VersionPress itself.", 
            "title": "Ignoring columns"
        }, 
        {
            "location": "/en/developer/plugin-support/#cache-invalidation", 
            "text": "WordPress uses cache for posts, comments, users, terms, etc. This cache needs to be invalidated when VersionPress updates database (on undo, rollback, pull, etc.). It is possible to tell VersionPress which cache to invalidate and where to find the related IDs.  For example, when some post is deleted using the Undo functionality, it is necessary to call  clean_post_cache( post-id ) . VersionPress will do it automatically based on following piece of schema:  post : \n   table :   posts \n   id :   ID \n   clean-cache : \n     -   post :   id   It tells VersionPress to delete the post cache (VP resolves the function name as  clean_ cache-type _cache ). You can use  id  as the source of IDs for invalidation or a reference. For example like this:  post : \n   references : \n       post_author :   user \n       post_parent :   post \n   clean-cache : \n     -   post :   id \n     -   user :   post_author \n     -   post :   post_parent", 
            "title": "Cache invalidation"
        }, 
        {
            "location": "/en/developer/plugin-support/#shortcodes", 
            "text": "Similarly to database schema, VersionPress needs to understand shortcodes as they can also contain entity references.  shortcodes.yml  describes this, here is an example:  shortcode-locations : \n   post : \n     -   post_content  shortcodes : \n   gallery : \n     id :   post \n     ids :   post \n     include : \n     exclude :   post \n   playlist : \n     id :   post \n     ids :   post \n     include :   post \n     exclude :   post   The  shortcode-locations  array tells VersionPress where the shortcodes can appear. By default, WordPress only allows shortcodes in post content but here's an example of how it could look if it also supported them in post titles and comments:  shortcode-locations : \n   post : \n     -   post_content \n     -   post_title \n   comment : \n     -   comment_content   Note that WordPress doesn't restrict shortcode  type  for various locations, so if some shortcode is supported in e.g.  comment_content , all shortcodes are.  The  shortcodes  array holds the actual shortcodes, but only those that contain references to other entities so things like  [embed]  or  [audio]  are not present. Here's an example:  shortcodes : \n   gallery : \n     id :   post \n     ids :   post \n     include : \n     exclude :   post \n   playlist : \n     id :   post \n     ids :   post \n     include :   post \n     exclude :   post   For example the  [gallery]  shortcode has four attributes that can contain references, and they all point to the  post  entity (it's an entity, not a table; the table will eventually be something like  wp_posts ).  Note that you don't have to worry about the attribute type, whether it contains a single ID or a list of IDs. VersionPress handles both cases automatically:  [gallery id= 1 ]  [gallery id= 1,2,3,6,11,20 ]", 
            "title": "Shortcodes"
        }, 
        {
            "location": "/en/developer/plugin-support/#hooks", 
            "text": "If something cannot be described statically, VersionPress offers several filters, actions and functions to define behavior through code. Implement them in the  hooks.php  file.  Most of the filters have already been discussed in the text above, you can find the full API reference below.", 
            "title": "Hooks"
        }, 
        {
            "location": "/en/developer/plugin-support/#ignored-folders", 
            "text": "Feel free to use custom  .gitignore  for files in the plugin directory. You can also ignore files / directories outside the plugin directory. There will be a filter to let VersionPress know which files / directories you want to ignore.", 
            "title": "Ignored folders"
        }, 
        {
            "location": "/en/developer/plugin-support/#discovery-mechanism", 
            "text": "VersionPress looks for plugin definitions in these locations, in this order:   WP_CONTENT_DIR/.versionpress/plugins/ plugin-slug  (user-editable definitions in the  wp-content  directory)  WP_PLUGIN_DIR/ plugin-slug /.versionpress  (definitions bundled with plugins)   The first definition found is used.", 
            "title": "Discovery mechanism"
        }, 
        {
            "location": "/en/developer/plugin-support/#resources", 
            "text": "Issue  #1036  \u2013 everything was discussed there.", 
            "title": "Resources"
        }, 
        {
            "location": "/en/developer/plugin-support/#api-reference", 
            "text": "TODO this will be auto-generated from code.", 
            "title": "API reference"
        }, 
        {
            "location": "/en/developer/plugin-support/#filters", 
            "text": "vp_entity_action_{$entityName}  apply_filters( vp_entity_action_{$entityName} , $action, $oldEntity, $newEntity)    vp_meta_entity_action_{$entityName}  apply_filters( vp_meta_entity_action_{$entityName} , $action, $oldEntity, $newEntity, $oldParentEntity, $newParentEntity)    vp_entity_tags_{$entityName}  apply_filters( vp_entity_tags_{$entityName} , $tags, $oldEntity, $newEntity, $action)    vp_meta_entity_tags_{$entityName}  apply_filters( vp_meta_entity_tags_{$entityName} , $tags, $oldEntity, $newEntity, $action, $oldParentEntity, $newParentEntity)    vp_entity_files_{$entityName}  apply_filters( vp_entity_files_{$entityName} , $files, $oldEntity, $newEntity)    vp_meta_entity_files_{$entityName}  apply_filters( vp_meta_entity_files_{$entityName} , $files, $oldEntity, $newEntity, $oldParentEntity, $newParentEntity)    vp_entity_should_be_saved_{$entityName}  apply_filters( vp_entity_should_be_saved_{$entityName} , $shouldBeSaved, $data, $storage)    vp_bulk_change_description_{$entityName}  apply_filters( vp_bulk_change_description_{$entityName} , $description, $action, $count, $tags)    vp_action_description_{$scope}  apply_filters( vp_action_description_{$scope} , $message, $action, $vpid, $tags)    vp_action_priority_{$scope}  apply_filters( vp_action_priority_{$entityName} , $defaultPriority, $action, $vpid, $entity)  apply_filters( vp_action_priority_{$entityName} , $defaultPriority, $action, $vpid)", 
            "title": "Filters"
        }, 
        {
            "location": "/en/developer/plugin-support/#actions-api", 
            "text": "vp_before_synchronization_{$entityName}  do_action( vp_before_synchronization_{$entityName} )    vp_after_synchronization_{$entityName}  do_action( vp_after_synchronization_{$entityName} )", 
            "title": "Actions (API)"
        }, 
        {
            "location": "/en/developer/plugin-support/#functions", 
            "text": "vp_force_action  vp_force_action($scope, $action, $id = '', $tags = [], $files = [])", 
            "title": "Functions"
        }, 
        {
            "location": "/en/developer/development-process/", 
            "text": "Development Process\n\n\nHere is a set of tools and approaches we use during VersionPress development.\n\n\nOverview\n\n\nIssues\n are the most important tool to plan and manage almost everything around VersionPress. They are described in more detail in a \nseparate section below\n.\n\n\nMilestones\n are used to assign issues to major releases like 4.0 or 5.0 (we don't use minor releases like 4.1 or 4.2, see \nbelow\n).\n\n\nProjects\n are then used for more granular planning, e.g., to assign issues to various alpha, beta or final releases.\n\n\n\n\nBacklog\n\n\nIssues not assigned to any milestone are in a backlog \u2013 we want to do them one day but there are no immediate plans.\n\n\n\n\nPull requests\n implement issues. Commonly, a piece of functionality starts as an issue but quickly transitions into a PR where most of the technical discussion happens. In other words, issues are the original ideas of how to improve or fix something, PR's are how it was actually done.\n\n\nDevelopment workflow\n\n\nWe use the \nGitHub flow\n:\n\n\n\n\nSome tips:\n\n\n\n\nDevelopment setup is described in \ndev-setup.md\n.\n\n\nBranches are commonly named \nissue_number\n-\nshort_description\n, e.g., \n123-row-filtering\n.\n\n\nAll branches start from \nmaster\n.\n\n\nWe care about small and focused commits with good commit messages.\n\n\nPull request should contain a link to the parent issue (if applicable) and a summary of the change. Every pull request is reviewed.\n\n\n\n\nIssues\n\n\nSome more details on our issues:\n\n\nLabels\n\n\nWe use \nthese labels\n to tag GitHub issues:\n\n\n\n\nIssue type:\n\n\nbug\n \u2013 a major bug has an additional \nmajor\n label\n\n\nfeature\n \u2013 something new in a release\n\n\nimprovement\n \u2013 an improvement of an existing feature\n\n\ntask\n\n\nquestion\n\n\nsupport\n \u2013 issue that should have been opened in the \nsupport repo\n\n\n\n\n\n\nImportance:\n\n\nminor\n\n\nmajor\n \u2013 only used with bugs, see above\n\n\nsignificant\n \u2013 used to highlight issues that are worth mentioning in release notes or otherwise significant\n\n\n\n\n\n\nScopes (areas of work):\n\n\nscope: core\n \u2013 the core VersionPress functionality like tracking actions, creating Git commits etc.\n\n\nscope: workflows\n \u2013 things like cloning, pulling, pushing, etc.\n\n\nscope: gui\n \u2013 issue for the 'frontend' React app and other UI things\n\n\nscope: tests\n\n\nscope: dev-infrastructure\n \u2013 IDE settings, build scripts, etc.\n\n\nscope: docs\n\n\nscope: integrations\n \u2013 integrations with WordPress plugins, themes, hosts etc.\n\n\nSome historic labels like \nscope: website\n, \nscope: blog\n etc. Those are commonly managed via separate repositories now.\n\n\n\n\n\n\nEffort, roughly:\n\n\nsize: xs\n \u2013 1 to 2 hours\n\n\nsize: s\n \u2013 about half a day\n\n\nsize: m\n \u2013 day or two\n\n\nsize: l\n \u2013 three to five days\n\n\nsize: xl\n \u2013 multiple weeks\n\n\n\n\n\n\nResolution:\n\n\nMost issues are just closed when done without any additional label. They are also moved to the \nDone\n column in a GitHub project.\n\n\nduplicate\n \u2013 issue is resolved by some other ticket\n\n\ninvalid\n \u2013 incorrectly reported, not an actual bug etc.\n\n\nobsolete\n \u2013 no longer valid\n\n\nwon't fix\n \u2013 we don't plan to implement this\n\n\n\n\n\n\nOther:\n\n\nneeds-migration\n \u2013 such issues change a storage format and require migration between two VersionPress versions. (Currently, we do not have migrations which means that if a release contains one or more \nneeds-migration\n issues, full deactivation and re-activation is required. See \n#275\n.)\n\n\nWP 4.7\n \u2013 compatibility with WordPress 4.7.\n\n\nplugin-support\n \u2013 issues implementing the plugin support in VersionPress 4.0.\n\n\n\n\n\n\n\n\nNote on imported issues 1..522\n\n\nIn the early days, we used JIRA and the Czech language to track the project (\nbad\n decision in retrospect \ud83d\ude05), with the earliest issues not even up to the common standards as we were a team of two and discussed many things face to face.\n\n\nIn October 2015, we decided to move to GitHub and take the project \nhistory\n with us, both on the repo level (no \"initial commit\" with thousands of lines of code) and the issues. The issues were not fun as we needed to write a migration script, fight the GitHub API limitations (e.g., dates cannot be set properly) and eventually translate the issues to English. But there's valuable information in there so we didn't want to throw that part of the project history away.\n\n\nStill, please consider \nissues #1 through #522 \"quick and dirty\"\n \u2013 the translation may be poor, the issues may not explain everything in detail, etc.\n\n\nFor newer issues, we try to make them useful and high-quality; they are one of our key artifacts.\n\n\nRelease versioning\n\n\nWe bump major version with every release like browsers do so VersionPress quickly advances from \n4.0\n to \n5.0\n to \n6.0\n etc. We do not use minor versions like \n4.1\n or \n4.2\n. We do, however, use patch releases like \n4.0.1\n or \n4.0.2\n.\n\n\nPreview versions are marked e.g. \n4.0-alpha\n or \n4.0-beta2\n, as per \nsemver\n.\n\n\nBranching model\n\n\nThe current release being worked on is \nmaster\n. All tests should be passing before any code is merged to \nmaster\n.\n\n\nThere are \nlong-running branches\n for every release named \n1.x\n, \n2.x\n etc. For bug fixes, always merge from older to newer, e.g., \n1.x\n -\n \n2.x\n -\n \nmaster\n, never the other way around, see \nthis blog post\n. With that being said, during the Developer Preview program, we mostly care about the \"latest and greatest\" only.", 
            "title": "Development Process"
        }, 
        {
            "location": "/en/developer/development-process/#development-process", 
            "text": "Here is a set of tools and approaches we use during VersionPress development.", 
            "title": "Development Process"
        }, 
        {
            "location": "/en/developer/development-process/#overview", 
            "text": "Issues  are the most important tool to plan and manage almost everything around VersionPress. They are described in more detail in a  separate section below .  Milestones  are used to assign issues to major releases like 4.0 or 5.0 (we don't use minor releases like 4.1 or 4.2, see  below ).  Projects  are then used for more granular planning, e.g., to assign issues to various alpha, beta or final releases.   Backlog  Issues not assigned to any milestone are in a backlog \u2013 we want to do them one day but there are no immediate plans.   Pull requests  implement issues. Commonly, a piece of functionality starts as an issue but quickly transitions into a PR where most of the technical discussion happens. In other words, issues are the original ideas of how to improve or fix something, PR's are how it was actually done.", 
            "title": "Overview"
        }, 
        {
            "location": "/en/developer/development-process/#development-workflow", 
            "text": "We use the  GitHub flow :   Some tips:   Development setup is described in  dev-setup.md .  Branches are commonly named  issue_number - short_description , e.g.,  123-row-filtering .  All branches start from  master .  We care about small and focused commits with good commit messages.  Pull request should contain a link to the parent issue (if applicable) and a summary of the change. Every pull request is reviewed.", 
            "title": "Development workflow"
        }, 
        {
            "location": "/en/developer/development-process/#issues", 
            "text": "Some more details on our issues:", 
            "title": "Issues"
        }, 
        {
            "location": "/en/developer/development-process/#labels", 
            "text": "We use  these labels  to tag GitHub issues:   Issue type:  bug  \u2013 a major bug has an additional  major  label  feature  \u2013 something new in a release  improvement  \u2013 an improvement of an existing feature  task  question  support  \u2013 issue that should have been opened in the  support repo    Importance:  minor  major  \u2013 only used with bugs, see above  significant  \u2013 used to highlight issues that are worth mentioning in release notes or otherwise significant    Scopes (areas of work):  scope: core  \u2013 the core VersionPress functionality like tracking actions, creating Git commits etc.  scope: workflows  \u2013 things like cloning, pulling, pushing, etc.  scope: gui  \u2013 issue for the 'frontend' React app and other UI things  scope: tests  scope: dev-infrastructure  \u2013 IDE settings, build scripts, etc.  scope: docs  scope: integrations  \u2013 integrations with WordPress plugins, themes, hosts etc.  Some historic labels like  scope: website ,  scope: blog  etc. Those are commonly managed via separate repositories now.    Effort, roughly:  size: xs  \u2013 1 to 2 hours  size: s  \u2013 about half a day  size: m  \u2013 day or two  size: l  \u2013 three to five days  size: xl  \u2013 multiple weeks    Resolution:  Most issues are just closed when done without any additional label. They are also moved to the  Done  column in a GitHub project.  duplicate  \u2013 issue is resolved by some other ticket  invalid  \u2013 incorrectly reported, not an actual bug etc.  obsolete  \u2013 no longer valid  won't fix  \u2013 we don't plan to implement this    Other:  needs-migration  \u2013 such issues change a storage format and require migration between two VersionPress versions. (Currently, we do not have migrations which means that if a release contains one or more  needs-migration  issues, full deactivation and re-activation is required. See  #275 .)  WP 4.7  \u2013 compatibility with WordPress 4.7.  plugin-support  \u2013 issues implementing the plugin support in VersionPress 4.0.", 
            "title": "Labels"
        }, 
        {
            "location": "/en/developer/development-process/#note-on-imported-issues-1522", 
            "text": "In the early days, we used JIRA and the Czech language to track the project ( bad  decision in retrospect \ud83d\ude05), with the earliest issues not even up to the common standards as we were a team of two and discussed many things face to face.  In October 2015, we decided to move to GitHub and take the project  history  with us, both on the repo level (no \"initial commit\" with thousands of lines of code) and the issues. The issues were not fun as we needed to write a migration script, fight the GitHub API limitations (e.g., dates cannot be set properly) and eventually translate the issues to English. But there's valuable information in there so we didn't want to throw that part of the project history away.  Still, please consider  issues #1 through #522 \"quick and dirty\"  \u2013 the translation may be poor, the issues may not explain everything in detail, etc.  For newer issues, we try to make them useful and high-quality; they are one of our key artifacts.", 
            "title": "Note on imported issues 1..522"
        }, 
        {
            "location": "/en/developer/development-process/#release-versioning", 
            "text": "We bump major version with every release like browsers do so VersionPress quickly advances from  4.0  to  5.0  to  6.0  etc. We do not use minor versions like  4.1  or  4.2 . We do, however, use patch releases like  4.0.1  or  4.0.2 .  Preview versions are marked e.g.  4.0-alpha  or  4.0-beta2 , as per  semver .", 
            "title": "Release versioning"
        }, 
        {
            "location": "/en/developer/development-process/#branching-model", 
            "text": "The current release being worked on is  master . All tests should be passing before any code is merged to  master .  There are  long-running branches  for every release named  1.x ,  2.x  etc. For bug fixes, always merge from older to newer, e.g.,  1.x  -   2.x  -   master , never the other way around, see  this blog post . With that being said, during the Developer Preview program, we mostly care about the \"latest and greatest\" only.", 
            "title": "Branching model"
        }, 
        {
            "location": "/en/release-notes/", 
            "text": "Release Notes\n\n\nThe current release is \n3.0\n, released on 28 Apr 2016, and it is an \nEarly Access release\n. VersionPress can be obtained via the main \nversionpress.net\n site.\n\n\nRelease versioning\n\n\nVersionPress releases are marked so that it's easy to understand what to expect of them. Here is a couple of rules we follow:\n\n\n\n\nVersionPress generally \nbumps a major version with every release\n, so while WordPress uses a sequence like \n4.1\n \u2192 \n4.2\n \u2192 \n4.3\n etc., we generally use \n4.0\n \u2192 \n5.0\n \u2192 \n6.0\n etc., similarly to modern web browsers.\n\n\nMinor releases\n, e.g., \n4.1\n, with minor feature changes can happen but we generally aim to avoid them.\n\n\nPatch releases\n use the third segment of version identifier, e.g., \n4.0.1\n. We aim to avoid them too :-)\n\n\nPreview versions\n are marked with labels like \n4.0-alpha1\n, \n4.0-beta1\n, \n4.0-rc2\n and similar. Pre-release names have their well-defined meaning:\n\n\nAlpha\n means that we are not feature complete yet and that there \nwill\n be bugs, possibly even severe ones. Never use an alpha release on a production site, with production database or generally with any data that you care for.\n\n\nBeta\n means most if not all features are complete and the stability is quite good, however, running such version in production is still strongly discouraged.\n\n\nRC (Release Candidate)\n is close to the final / stable version.\n\n\n\n\n\n\n\n\nVersions are compared and ordered by the same rules that \nsemver\n uses \u2013 versions with two segments assume the \".0\" at the end so 1.0 is effectively the same as 1.0.0.\n\n\nRoadmap\n\n\nSee \nroadmap here\n.", 
            "title": "Release Notes Home"
        }, 
        {
            "location": "/en/release-notes/#release-notes", 
            "text": "The current release is  3.0 , released on 28 Apr 2016, and it is an  Early Access release . VersionPress can be obtained via the main  versionpress.net  site.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/en/release-notes/#release-versioning", 
            "text": "VersionPress releases are marked so that it's easy to understand what to expect of them. Here is a couple of rules we follow:   VersionPress generally  bumps a major version with every release , so while WordPress uses a sequence like  4.1  \u2192  4.2  \u2192  4.3  etc., we generally use  4.0  \u2192  5.0  \u2192  6.0  etc., similarly to modern web browsers.  Minor releases , e.g.,  4.1 , with minor feature changes can happen but we generally aim to avoid them.  Patch releases  use the third segment of version identifier, e.g.,  4.0.1 . We aim to avoid them too :-)  Preview versions  are marked with labels like  4.0-alpha1 ,  4.0-beta1 ,  4.0-rc2  and similar. Pre-release names have their well-defined meaning:  Alpha  means that we are not feature complete yet and that there  will  be bugs, possibly even severe ones. Never use an alpha release on a production site, with production database or generally with any data that you care for.  Beta  means most if not all features are complete and the stability is quite good, however, running such version in production is still strongly discouraged.  RC (Release Candidate)  is close to the final / stable version.     Versions are compared and ordered by the same rules that  semver  uses \u2013 versions with two segments assume the \".0\" at the end so 1.0 is effectively the same as 1.0.0.", 
            "title": "Release versioning"
        }, 
        {
            "location": "/en/release-notes/#roadmap", 
            "text": "See  roadmap here .", 
            "title": "Roadmap"
        }, 
        {
            "location": "/en/release-notes/roadmap/", 
            "text": "Roadmap\n\n\nThis page should give you an idea of where we are and what is planned for the future. The order roughly represents our priorities.\n\n\n\n\n \nCore versioning functionality\n \n(shipped in 1.0)\n\n\n \nAutomatic change tracking\n \n(shipped in 1.0)\n\n\n \nBasic UI for historic changes\n \n(shipped in 1.0)\n\n\n \nRollback functionality\n \n(shipped in 1.0)\n\n\n \nSelective Undo functionality\n \n(shipped in 1.0)\n\n\n \nSynchronization functionality - core\n \n(shipped in 2.0)\n\n\n \nRemove dependency on \ndb.php\n \n(shipped in 2.0)\n\n\n \nNew GUI stack (JS + REST API)\n \n(shipped in 2.0)\n\n\nImproved user interface \n(ongoing effort; major usability improvements shipped in 3.0)\n\n\nImproved support for complex 3\nrd\n party plugins\n \n(this one is really important now, will be focus of 4.0)\n\n\nUpdate mechanism \n(initial support in 3.0, more to come)\n\n\nMultisite support \n(quite hard to do, contributors welcome :) )\n\n\nLocalization\n\n\nSupport for large sites \n(many improvements done in 2.0, some more might come in the future but it's not a priority at the moment)\n\n\nRemove dependency on external Git processes \n(would be nice but quite hard to do in a host-independent way)", 
            "title": "Roadmap"
        }, 
        {
            "location": "/en/release-notes/roadmap/#roadmap", 
            "text": "This page should give you an idea of where we are and what is planned for the future. The order roughly represents our priorities.     Core versioning functionality   (shipped in 1.0)    Automatic change tracking   (shipped in 1.0)    Basic UI for historic changes   (shipped in 1.0)    Rollback functionality   (shipped in 1.0)    Selective Undo functionality   (shipped in 1.0)    Synchronization functionality - core   (shipped in 2.0)    Remove dependency on  db.php   (shipped in 2.0)    New GUI stack (JS + REST API)   (shipped in 2.0)  Improved user interface  (ongoing effort; major usability improvements shipped in 3.0)  Improved support for complex 3 rd  party plugins   (this one is really important now, will be focus of 4.0)  Update mechanism  (initial support in 3.0, more to come)  Multisite support  (quite hard to do, contributors welcome :) )  Localization  Support for large sites  (many improvements done in 2.0, some more might come in the future but it's not a priority at the moment)  Remove dependency on external Git processes  (would be nice but quite hard to do in a host-independent way)", 
            "title": "Roadmap"
        }, 
        {
            "location": "/en/release-notes/4.0-beta/", 
            "text": "4.0-beta Release Notes\n\n\nBuilding on \n4.0-alpha1\n, this beta brings user-editable plugin definitions, better stability and support for WordPress 4.7 \n 4.8.\n\n\nReleased 9 July 2017. \nAnnouncement blog post\n.\n\n\n\n\nDownload\n\n\nInstallation instructions\n\n\n\n\n\n\nDeveloper Preview\n\n\nDeveloper Preview is a period during which VersionPress is reasonably stable but still young, limited in scope and external backup is recommended at all times. \nLearn more\n.\n\n\n\n\nNotable changes\n\n\n\n\nFor plugin definitions, the \nWP_CONTENT_DIR/.versionpress/plugins/\nplugin-slug\n location is now supported and actually preferred \n#1176\n\n\nFilterable action priorities \n#1232\n\n\nSupport for serialized arrays inside serialized arrays, a.k.a., inception \n#1234\n\n\nMost actions now use the verb 'update' rather than 'edit' \n#1120\n\n\nSchema updates for WordPress 4.7 (\n#1164\n) and 4.8 (\n#1217\n)\n\n\nFixed \nmany bugs\n reported in 4.0-alpha1\n\n\nUpdates to Plugin-Support.md based on feedback (\ncurrent state\n)\n\n\nDockerized development environment and tests \n#1041\n\n\nBoth backend and frontend dependencies updated after a while\n\n\nWe've adopted \nGitHub projects\n to manage the development process\n\n\n'Developer Preview' is now used instead of 'Early Access' \n#1201\n\n\nDocs have been merged into the main repo (used to be \nversionpress/docs\n) \n#1218\n\n\n\n\nSee \nall 120+ issues and PRs resolved in 2.0-beta\n or the \nGitHub project\n.\n\n\nUpgrade notes\n\n\nTo upgrade from 4.0-alpha1 and earlier, uninstall (delete) the previous version and install again.\n\n\nSystem requirements\n\n\n\n\nWordPress 4.8+\n\n\nPHP 5.6+\n\n\nGit 1.9+ (2.13 or newer recommended)\n\n\nproc_open()\n enabled", 
            "title": "4.0-beta Release Notes"
        }, 
        {
            "location": "/en/release-notes/4.0-beta/#40-beta-release-notes", 
            "text": "Building on  4.0-alpha1 , this beta brings user-editable plugin definitions, better stability and support for WordPress 4.7   4.8.  Released 9 July 2017.  Announcement blog post .   Download  Installation instructions    Developer Preview  Developer Preview is a period during which VersionPress is reasonably stable but still young, limited in scope and external backup is recommended at all times.  Learn more .", 
            "title": "4.0-beta Release Notes"
        }, 
        {
            "location": "/en/release-notes/4.0-beta/#notable-changes", 
            "text": "For plugin definitions, the  WP_CONTENT_DIR/.versionpress/plugins/ plugin-slug  location is now supported and actually preferred  #1176  Filterable action priorities  #1232  Support for serialized arrays inside serialized arrays, a.k.a., inception  #1234  Most actions now use the verb 'update' rather than 'edit'  #1120  Schema updates for WordPress 4.7 ( #1164 ) and 4.8 ( #1217 )  Fixed  many bugs  reported in 4.0-alpha1  Updates to Plugin-Support.md based on feedback ( current state )  Dockerized development environment and tests  #1041  Both backend and frontend dependencies updated after a while  We've adopted  GitHub projects  to manage the development process  'Developer Preview' is now used instead of 'Early Access'  #1201  Docs have been merged into the main repo (used to be  versionpress/docs )  #1218   See  all 120+ issues and PRs resolved in 2.0-beta  or the  GitHub project .", 
            "title": "Notable changes"
        }, 
        {
            "location": "/en/release-notes/4.0-beta/#upgrade-notes", 
            "text": "To upgrade from 4.0-alpha1 and earlier, uninstall (delete) the previous version and install again.", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/4.0-beta/#system-requirements", 
            "text": "WordPress 4.8+  PHP 5.6+  Git 1.9+ (2.13 or newer recommended)  proc_open()  enabled", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/", 
            "text": "4.0-alpha1 Release Notes\n\n\nVersionPress 4.0 introduces support for WordPress plugins via \nplugin definitions\n. It also includes Slack-like search, staging visualization and initial support for Composer workflows.\n\n\nReleased on 10 October 2016. \nRelease blog post\n.\n\n\n\n\nDownload\n\n\nInstallation instructions\n\n\n\n\n\n\nThis is an Early Access Release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more\n.\n\n\n\n\nNew in 4.0-alpha1\n\n\nPlugin support\n\n\n\n\n\ud83d\udc4b We're looking for feedback on this, please chat with us \non Gitter\n.\n\n\n\n\nPlugins can now be described to VersionPress using a set of plugin definitions in a \n.versionpress\n folder. These include:\n\n\n\n\nactions.yml\n defining plugin actions\n\n\nschema.yml\n describing how the plugin stores data in the database\n\n\nshortcodes.yml\n defining any new shortcodes the plugin introduces\n\n\nhooks.php\n containing any filters and actions further customizing the functionality\n\n\n\n\nSee \nplugin-support.md\n for more details. Issue: \n#1036\n (\nPR #1075\n).\n\n\nNew features\n\n\n\n\nSignificant search improvements \u2013 \n#805\n\n\nBranching and merging visualization \u2013 \n#1043\n\n\nComposer workflows \u2013 \n#1037\n\n\n\n\nOther significant changes\n\n\n\n\nMobX introduced as a state management library for the React frontend \u2013 \n#1091\n\n\nFrontend generally reviewed and cleaned up (React component structure, code style, etc.) \u2013 \n#1083\n\n\n\n\nUpgrade notes\n\n\nTo upgrade from 3.0 and earlier, please do a full re-activation. The recommended procedure is:\n\n\n\n\nPut the site in a maintenance mode.\n\n\nDeactivate VersionPress (just deactivate, do not uninstall).\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract the current version there.\n\n\nActivate \n initialize the plugin again.\n\n\nDisable maintenance mode.\n\n\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.6.0 or later\n\n\nWordPress 4.4 or later\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled\n\n\n\n\nSystem requirements for sync / multi-environment workflows:\n\n\n\n\nCustom server or VPS is recommended.", 
            "title": "4.0-alpha1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#40-alpha1-release-notes", 
            "text": "VersionPress 4.0 introduces support for WordPress plugins via  plugin definitions . It also includes Slack-like search, staging visualization and initial support for Composer workflows.  Released on 10 October 2016.  Release blog post .   Download  Installation instructions    This is an Early Access Release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more .", 
            "title": "4.0-alpha1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#new-in-40-alpha1", 
            "text": "", 
            "title": "New in 4.0-alpha1"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#plugin-support", 
            "text": "\ud83d\udc4b We're looking for feedback on this, please chat with us  on Gitter .   Plugins can now be described to VersionPress using a set of plugin definitions in a  .versionpress  folder. These include:   actions.yml  defining plugin actions  schema.yml  describing how the plugin stores data in the database  shortcodes.yml  defining any new shortcodes the plugin introduces  hooks.php  containing any filters and actions further customizing the functionality   See  plugin-support.md  for more details. Issue:  #1036  ( PR #1075 ).", 
            "title": "Plugin support"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#new-features", 
            "text": "Significant search improvements \u2013  #805  Branching and merging visualization \u2013  #1043  Composer workflows \u2013  #1037", 
            "title": "New features"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#other-significant-changes", 
            "text": "MobX introduced as a state management library for the React frontend \u2013  #1091  Frontend generally reviewed and cleaned up (React component structure, code style, etc.) \u2013  #1083", 
            "title": "Other significant changes"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#upgrade-notes", 
            "text": "To upgrade from 3.0 and earlier, please do a full re-activation. The recommended procedure is:   Put the site in a maintenance mode.  Deactivate VersionPress (just deactivate, do not uninstall).  Delete the contents of  wp-content/plugins/versionpress  and extract the current version there.  Activate   initialize the plugin again.  Disable maintenance mode.", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/4.0-alpha1/#system-requirements", 
            "text": "General system requirements:   PHP 5.6.0 or later  WordPress 4.4 or later  Git 1.9 or later  proc_open()  enabled   System requirements for sync / multi-environment workflows:   Custom server or VPS is recommended.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/3.0.2/", 
            "text": "3.0.2 Release Notes\n\n\nMore reliable REST API response handling. Released on 22 July 2016. \nRelease blog post\n.\n\n\n\n\nNote: this is an EAP release\n\n\nEAP releases\n are generally stable but the software is still young, limited in scope and an external backup is recommended at all times.\n\n\n\n\nNew in 3.0.2\n\n\nThis release fixes \n3 issues via 2 pull requests\n. Main changes are:\n\n\n\n\nMalformed REST API responses, e.g. because of PHP notices, are handled better by the client-side, JavaScript code. \n#1074\n\n\nFixed \"Click here to show [uncommitted] changes\" bug introduced in 3.0.1. \n#1073\n\n\n\n\nUpdate notes\n\n\nThe best way to update from 3.0 or above is to run this WP-CLI command:\n\n\nwp vp update /path/to/versionpress-3.0.2.zip\n\n\n\n\nIf you're updating from an older release or cannot use WP-CLI, full reactivation is required, see \nUpdate\n.\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.6.0 or later\n\n\nWordPress 4.4 or later\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled\n\n\n\n\nSystem requirements for sync / multi-environment workflows:\n\n\n\n\nCustom server or VPS is recommended.", 
            "title": "3.0.2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/3.0.2/#302-release-notes", 
            "text": "More reliable REST API response handling. Released on 22 July 2016.  Release blog post .   Note: this is an EAP release  EAP releases  are generally stable but the software is still young, limited in scope and an external backup is recommended at all times.", 
            "title": "3.0.2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/3.0.2/#new-in-302", 
            "text": "This release fixes  3 issues via 2 pull requests . Main changes are:   Malformed REST API responses, e.g. because of PHP notices, are handled better by the client-side, JavaScript code.  #1074  Fixed \"Click here to show [uncommitted] changes\" bug introduced in 3.0.1.  #1073", 
            "title": "New in 3.0.2"
        }, 
        {
            "location": "/en/release-notes/3.0.2/#update-notes", 
            "text": "The best way to update from 3.0 or above is to run this WP-CLI command:  wp vp update /path/to/versionpress-3.0.2.zip  If you're updating from an older release or cannot use WP-CLI, full reactivation is required, see  Update .", 
            "title": "Update notes"
        }, 
        {
            "location": "/en/release-notes/3.0.2/#system-requirements", 
            "text": "General system requirements:   PHP 5.6.0 or later  WordPress 4.4 or later  Git 1.9 or later  proc_open()  enabled   System requirements for sync / multi-environment workflows:   Custom server or VPS is recommended.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/3.0.1/", 
            "text": "3.0.1 Release Notes\n\n\nBug fixes and reliability improvements. Released on 30 May 2016. \nRelease blog post\n.\n\n\n\n\nNote: this is an Early Access release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more\n.\n\n\n\n\nNew in 3.0.1\n\n\nThis release fixes \n6 bugs\n and brings \n3 other improvements\n. No issue has been identified as critical.\n\n\nUpdate notes\n\n\nThe best way to update from 3.0 is to run this WP-CLI command:\n\n\nwp vp update /path/to/versionpress-3.0.1.zip\n\n\n\n\nIf you're updating from an older release or cannot use WP-CLI, full reactivation is required, see \nUpdate\n.\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.6.0 or later\n\n\nWordPress 4.4 or later\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled\n\n\n\n\nSystem requirements for sync / multi-environment workflows:\n\n\n\n\nCustom server or VPS is recommended.", 
            "title": "3.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/3.0.1/#301-release-notes", 
            "text": "Bug fixes and reliability improvements. Released on 30 May 2016.  Release blog post .   Note: this is an Early Access release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more .", 
            "title": "3.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/3.0.1/#new-in-301", 
            "text": "This release fixes  6 bugs  and brings  3 other improvements . No issue has been identified as critical.", 
            "title": "New in 3.0.1"
        }, 
        {
            "location": "/en/release-notes/3.0.1/#update-notes", 
            "text": "The best way to update from 3.0 is to run this WP-CLI command:  wp vp update /path/to/versionpress-3.0.1.zip  If you're updating from an older release or cannot use WP-CLI, full reactivation is required, see  Update .", 
            "title": "Update notes"
        }, 
        {
            "location": "/en/release-notes/3.0.1/#system-requirements", 
            "text": "General system requirements:   PHP 5.6.0 or later  WordPress 4.4 or later  Git 1.9 or later  proc_open()  enabled   System requirements for sync / multi-environment workflows:   Custom server or VPS is recommended.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/3.0/", 
            "text": "3.0 Release Notes \ud83c\udf78\n\n\nVersionPress 3.0 is a major usability and reliability release. It is also the first release available \non GitHub\n as an open source project.\n\n\nReleased on 28 April 2016. \nRelease blog post\n.\n\n\n\n\nNote: this is an Early Access release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nNew in 3.0\n\n\nUsability improvements\n\n\n\n\nSearching (filtering) site's history\n (\n#586\n). You can search commits by authors, dates, commit messages, WordPress actions, etc. It's quite powerful, see the \ndocumentation\n.\n\n\nUndo multiple commits at once\n (\n#201\n). Say that you trashed a post and then deleted it. To fully undo these two actions, you can now select both of them using checkboxes and restore the post in one go.\n\n\nEnvironment tracking\n (\n#609\n, \n#459\n). VersionPress 3.0 tracks where a change originated, for example, in staging, production or Bob's PC. Environment names are customizable and displayed using a visual hint in the UI.\n\n\nOther UI improvements\n. For example, the main table now displays an avatar of users who made the changes (\n#853\n) and there have been some improvements to the full diff view.\n\n\nCustomizer changes produce nicer messages\n (\n#432\n). The generic \n\"Customized theme XYZ\"\n message is now replaced by more descriptive messages like \n\"Updated title ...\"\n, \n\"Updated menu ...\"\n, etc.\n\n\nService panel updates\n (\n#732\n). It now links to the System Info page and the GitHub support repo.\n\n\n\n\nCore versioning improvements\n\n\nMost of the development time was spent improving the core versioning engine. As a result, VersionPress 3.0 supports various scenarios better than the previous releases.\n\n\n\n\nSerialized data\n are diff- and merge-friendly (\n#619\n, \n#829\n). This automatically improves things like IDs in widgets (\n#814\n) or sticky posts (\n#819\n).\n\n\nCustom merge driver\n was implemented to handle some tricky scenarios. The two specific improvements are:\n\n\nDate modified field are now handled correctly\n (\n#588\n). Before VersionPress 3.0, \npost_modified\n and \npost_modified_gmt\n fields were ignored because tracking them created a lot of merge conflicts and we thought we could compute the values from Git history anyway. Unfortunately, that was not true for posts created before VersionPress was installed. VersionPress 3.0 tracks date modified's in a repo and avoids merge conflicts at the same time.\n\n\nChanges on adjacent lines no longer create conflicts\n (\n#719\n). For example, if Alice updated \npost_title\n and Bob updated \npost_content\n, merging their work no longer creates a conflict.\n\n\n\n\n\n\nShortcodes with IDs work across environments\n (\n#654\n). Shortcodes like \n[gallery ids=\n2,3,4\n]\n will now update these ID correctly across environments. New \n*-shortcodes.yml\n file format was developed to support that.\n\n\nFrequent DB writes\n no longer create excessive number of commits (\n#512\n). Things like view counters, Akismet spam count etc. are now committed once in an hour (configurable) or before actions like cloning or merging. This avoids floods of not very useful commits.\n\n\nConfigurable entity ignoring\n and, specifically, \nbetter spam comment handling\n (\n#511\n). Some entities just should not be part of the repository, e.g., transient options or spam comments. Previously, some of this was hardcoded (e.g., transient options) or not handled very well (e.g., spam comments). VersionPress 3.0 introduces a better, extensible ignoring mechanism that will be user-configurable in the future.\n\n\nIgnoring of specific database columns\n (\n#902\n). Similarly to ignoring entities (database rows), VersionPress can also ignore database columns. These columns are either plain ignored (for example, VersionPress doesn't care about \noption_id\n, only \noption_name\n) or ignored with a reference to a PHP function that computes the values (for example, post's \ncomment_count\n is computed dynamically).\n\n\nInitial support for custom directory layouts\n (\n#565\n). WordPress location, \nwp-content\n, \nplugins\n or \nuploads\n directories can now be customized. The support is initial, for example, the structure needs to be defined before VersionPress is activated, more complex setups like Bedrock are not fully supported yet, etc., but it's a good start.\n\n\nData updates via \nquery()\n are now understood\n (\n#510\n). Previously, VersionPress handled data updates via the \ninsert()\n, \nupdate()\n and \ndelete()\n methods which are quite straightforward to support and cover 99 % of the changes. However, that last 1 % was missing, and VersionPress 3.0 adds it by also supporting the \nquery()\n method.\n\n\nCommon (shared) config\n (\n#630\n). Most things in \nwp-config.php\n are environment-specific, for example, database connection, so VersionPress gitignored this file since 1.0-beta2. However, some config values should be shared, like the custom folder constants \nWP_CONTENT_DIR\n or \nWP_PLUGIN_DIR\n. So VersionPress 3.0 adds a config file called \nwp-config.common.php\n which is committed into the repository and \nrequire\n'd from the standard \nwp-config.php\n file.\n\n\nGeneral reliability improvements\n. We've improved how VersionPress stores and parses the internal data formats and added some more tests around that. VersionPress 3.0 should cover anything and everything that vanilla WordPress 4.5 does, in a reliable fashion.\n\n\n\n\nOther notable changes\n\n\n\n\nBetter update method that keeps the same INI files and VPIDs across VersionPress releases was added (\n#906\n). This makes inspecting history much easier. Note that this will only become useful \nafter\n 3.0, for instance, when updating to 4.0. Right now, we're only shipping the necessary underlying code. There's also a convenience WP-CLI command \nwp vp update\n available (\nPR #931\n).\n\n\nvpconfig.neon\n (custom configuration format) was replaced by the standard \nwp-config.php\n constants (\n#566\n).\n\n\nNEON\n file format was replaced with a similar but more common YAML (\n#703\n).\n\n\nPHP 5.6+ is now required (yes, we don't want our users to run on unsupported versions of PHP; \n#726\n).\n\n\nVersionPress underwent a security review and general code review by \n@danielbachhuber\n \u2013 thank you Daniel!\n\n\n\n\nSee all the changes in the \n3.0 milestone on GitHub\n.\n\n\nUpgrade notes\n\n\nVersionPress 3.0 is not upgradable from previous releases, full re-activation is required. The recommended procedure is:\n\n\n\n\nPut the site in a maintenance mode.\n\n\nDeactivate VersionPress (just deactivate, do not uninstall).\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract the current version there.\n\n\nActivate \n initialize the plugin again.\n\n\nDisable maintenance mode.\n\n\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.6.0 or later\n\n\nWordPress 4.4 or later\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled\n\n\n\n\nSystem requirements for sync / multi-environment workflows:\n\n\n\n\nCustom server or VPS is recommended.", 
            "title": "3.0 Release Notes"
        }, 
        {
            "location": "/en/release-notes/3.0/#30-release-notes", 
            "text": "VersionPress 3.0 is a major usability and reliability release. It is also the first release available  on GitHub  as an open source project.  Released on 28 April 2016.  Release blog post .   Note: this is an Early Access release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "3.0 Release Notes \ud83c\udf78"
        }, 
        {
            "location": "/en/release-notes/3.0/#new-in-30", 
            "text": "", 
            "title": "New in 3.0"
        }, 
        {
            "location": "/en/release-notes/3.0/#usability-improvements", 
            "text": "Searching (filtering) site's history  ( #586 ). You can search commits by authors, dates, commit messages, WordPress actions, etc. It's quite powerful, see the  documentation .  Undo multiple commits at once  ( #201 ). Say that you trashed a post and then deleted it. To fully undo these two actions, you can now select both of them using checkboxes and restore the post in one go.  Environment tracking  ( #609 ,  #459 ). VersionPress 3.0 tracks where a change originated, for example, in staging, production or Bob's PC. Environment names are customizable and displayed using a visual hint in the UI.  Other UI improvements . For example, the main table now displays an avatar of users who made the changes ( #853 ) and there have been some improvements to the full diff view.  Customizer changes produce nicer messages  ( #432 ). The generic  \"Customized theme XYZ\"  message is now replaced by more descriptive messages like  \"Updated title ...\" ,  \"Updated menu ...\" , etc.  Service panel updates  ( #732 ). It now links to the System Info page and the GitHub support repo.", 
            "title": "Usability improvements"
        }, 
        {
            "location": "/en/release-notes/3.0/#core-versioning-improvements", 
            "text": "Most of the development time was spent improving the core versioning engine. As a result, VersionPress 3.0 supports various scenarios better than the previous releases.   Serialized data  are diff- and merge-friendly ( #619 ,  #829 ). This automatically improves things like IDs in widgets ( #814 ) or sticky posts ( #819 ).  Custom merge driver  was implemented to handle some tricky scenarios. The two specific improvements are:  Date modified field are now handled correctly  ( #588 ). Before VersionPress 3.0,  post_modified  and  post_modified_gmt  fields were ignored because tracking them created a lot of merge conflicts and we thought we could compute the values from Git history anyway. Unfortunately, that was not true for posts created before VersionPress was installed. VersionPress 3.0 tracks date modified's in a repo and avoids merge conflicts at the same time.  Changes on adjacent lines no longer create conflicts  ( #719 ). For example, if Alice updated  post_title  and Bob updated  post_content , merging their work no longer creates a conflict.    Shortcodes with IDs work across environments  ( #654 ). Shortcodes like  [gallery ids= 2,3,4 ]  will now update these ID correctly across environments. New  *-shortcodes.yml  file format was developed to support that.  Frequent DB writes  no longer create excessive number of commits ( #512 ). Things like view counters, Akismet spam count etc. are now committed once in an hour (configurable) or before actions like cloning or merging. This avoids floods of not very useful commits.  Configurable entity ignoring  and, specifically,  better spam comment handling  ( #511 ). Some entities just should not be part of the repository, e.g., transient options or spam comments. Previously, some of this was hardcoded (e.g., transient options) or not handled very well (e.g., spam comments). VersionPress 3.0 introduces a better, extensible ignoring mechanism that will be user-configurable in the future.  Ignoring of specific database columns  ( #902 ). Similarly to ignoring entities (database rows), VersionPress can also ignore database columns. These columns are either plain ignored (for example, VersionPress doesn't care about  option_id , only  option_name ) or ignored with a reference to a PHP function that computes the values (for example, post's  comment_count  is computed dynamically).  Initial support for custom directory layouts  ( #565 ). WordPress location,  wp-content ,  plugins  or  uploads  directories can now be customized. The support is initial, for example, the structure needs to be defined before VersionPress is activated, more complex setups like Bedrock are not fully supported yet, etc., but it's a good start.  Data updates via  query()  are now understood  ( #510 ). Previously, VersionPress handled data updates via the  insert() ,  update()  and  delete()  methods which are quite straightforward to support and cover 99 % of the changes. However, that last 1 % was missing, and VersionPress 3.0 adds it by also supporting the  query()  method.  Common (shared) config  ( #630 ). Most things in  wp-config.php  are environment-specific, for example, database connection, so VersionPress gitignored this file since 1.0-beta2. However, some config values should be shared, like the custom folder constants  WP_CONTENT_DIR  or  WP_PLUGIN_DIR . So VersionPress 3.0 adds a config file called  wp-config.common.php  which is committed into the repository and  require 'd from the standard  wp-config.php  file.  General reliability improvements . We've improved how VersionPress stores and parses the internal data formats and added some more tests around that. VersionPress 3.0 should cover anything and everything that vanilla WordPress 4.5 does, in a reliable fashion.", 
            "title": "Core versioning improvements"
        }, 
        {
            "location": "/en/release-notes/3.0/#other-notable-changes", 
            "text": "Better update method that keeps the same INI files and VPIDs across VersionPress releases was added ( #906 ). This makes inspecting history much easier. Note that this will only become useful  after  3.0, for instance, when updating to 4.0. Right now, we're only shipping the necessary underlying code. There's also a convenience WP-CLI command  wp vp update  available ( PR #931 ).  vpconfig.neon  (custom configuration format) was replaced by the standard  wp-config.php  constants ( #566 ).  NEON  file format was replaced with a similar but more common YAML ( #703 ).  PHP 5.6+ is now required (yes, we don't want our users to run on unsupported versions of PHP;  #726 ).  VersionPress underwent a security review and general code review by  @danielbachhuber  \u2013 thank you Daniel!   See all the changes in the  3.0 milestone on GitHub .", 
            "title": "Other notable changes"
        }, 
        {
            "location": "/en/release-notes/3.0/#upgrade-notes", 
            "text": "VersionPress 3.0 is not upgradable from previous releases, full re-activation is required. The recommended procedure is:   Put the site in a maintenance mode.  Deactivate VersionPress (just deactivate, do not uninstall).  Delete the contents of  wp-content/plugins/versionpress  and extract the current version there.  Activate   initialize the plugin again.  Disable maintenance mode.", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/3.0/#system-requirements", 
            "text": "General system requirements:   PHP 5.6.0 or later  WordPress 4.4 or later  Git 1.9 or later  proc_open()  enabled   System requirements for sync / multi-environment workflows:   Custom server or VPS is recommended.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.2/", 
            "text": "2.2 Release Notes\n\n\nCompatibility release with WordPress 4.4 \u2013 support for \ntermmeta\n table.\n\n\nReleased on 15-Dec-2015.\n\n\n\n\nNote: this is an EAP release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nNew in 2.2\n\n\n\n\nSupport for term meta\n (#553). After many years, WordPress added a new database table in its 4.4 release. The core itself doesn't use it in any way but plugins will so we added support for that.\n\n\nTests for sync workflows\n introduced in VersionPress 2.0. As usual, when we don't have something covered by tests, there are bugs in it so it was time to patch this. (#557)\n\n\nTerms and term taxonomies are now stored similarly to other entities\n. During the past few releases, we've put some effort into unifying our internal structures so that they all follow the same scheme. Terms (#554) and term taxonomies (#578) were the last ones to join.\n\n\nFixed several bugs:\n\n\nCount of posts related to a term_taxonomy is not updated during synchronization (#590)\n\n\nDeleting category or menu with children doesn't update children's parent (#562)\n\n\nBug report didn't work (#569)\n\n\n\n\n\n\nOther smaller improvements:\n\n\n\"void\" VPID references (WordPress left-overs in the database) are now stored as zeros and are not excluded from our data structures. This helps when restoring the site from VersionPress repo. (#597)\n\n\nIf initialization fails, VersionPress now cleans up after itself properly (#585)\n\n\nBetter timeout handling in Initializer (#575)\n\n\nProcess timeout increased from the Symfony-hardcoded 60 seconds to one hour (#574)\n\n\nTests updated for WordPress 4.4 (#595) and back-fixed to work for WP 4.3 and below (pre-termmeta) (#594)\n\n\nwporg_favorites\n usermeta is no longer tracked (#598)\n\n\nIniSerializer was simplified \u2013 old code working with hierarchies removed (#596)\n\n\n.idea\n folder excluded from version control (internal dev thing) (#507)\n\n\n\n\n\n\n\n\nAlso, during this release, we introduced a \nnew support repo\n \nversionpress/support\n on GitHub which is now a preferred way to open support tickets. We'll be experimenting with this.\n\n\nUpgrade notes\n\n\nVersionPress 2.2 is not directly upgradable from 2.1.x and previous versions, full re-activation is required. The recommended procedure is:\n\n\n\n\nPut the site under maintenance mode\n\n\nDeactivate VersionPress (just deactivate, do not uninstall)\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract current VersionPress there\n\n\nActivate \n initialize the plugin again\n\n\nDisable maintenance mode\n\n\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.3.4 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled on the server\n\n\n\n\nSystem requirements for sync / multi-instance workflows:\n\n\n\n\nFor 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "2.2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.2/#22-release-notes", 
            "text": "Compatibility release with WordPress 4.4 \u2013 support for  termmeta  table.  Released on 15-Dec-2015.   Note: this is an EAP release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "2.2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.2/#new-in-22", 
            "text": "Support for term meta  (#553). After many years, WordPress added a new database table in its 4.4 release. The core itself doesn't use it in any way but plugins will so we added support for that.  Tests for sync workflows  introduced in VersionPress 2.0. As usual, when we don't have something covered by tests, there are bugs in it so it was time to patch this. (#557)  Terms and term taxonomies are now stored similarly to other entities . During the past few releases, we've put some effort into unifying our internal structures so that they all follow the same scheme. Terms (#554) and term taxonomies (#578) were the last ones to join.  Fixed several bugs:  Count of posts related to a term_taxonomy is not updated during synchronization (#590)  Deleting category or menu with children doesn't update children's parent (#562)  Bug report didn't work (#569)    Other smaller improvements:  \"void\" VPID references (WordPress left-overs in the database) are now stored as zeros and are not excluded from our data structures. This helps when restoring the site from VersionPress repo. (#597)  If initialization fails, VersionPress now cleans up after itself properly (#585)  Better timeout handling in Initializer (#575)  Process timeout increased from the Symfony-hardcoded 60 seconds to one hour (#574)  Tests updated for WordPress 4.4 (#595) and back-fixed to work for WP 4.3 and below (pre-termmeta) (#594)  wporg_favorites  usermeta is no longer tracked (#598)  IniSerializer was simplified \u2013 old code working with hierarchies removed (#596)  .idea  folder excluded from version control (internal dev thing) (#507)     Also, during this release, we introduced a  new support repo   versionpress/support  on GitHub which is now a preferred way to open support tickets. We'll be experimenting with this.", 
            "title": "New in 2.2"
        }, 
        {
            "location": "/en/release-notes/2.2/#upgrade-notes", 
            "text": "VersionPress 2.2 is not directly upgradable from 2.1.x and previous versions, full re-activation is required. The recommended procedure is:   Put the site under maintenance mode  Deactivate VersionPress (just deactivate, do not uninstall)  Delete the contents of  wp-content/plugins/versionpress  and extract current VersionPress there  Activate   initialize the plugin again  Disable maintenance mode", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/2.2/#system-requirements", 
            "text": "General system requirements:   PHP 5.3.4 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later  proc_open()  enabled on the server   System requirements for sync / multi-instance workflows:   For 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.1.1/", 
            "text": "2.1.1 Release Notes\n\n\nFixing a couple of bugs in WP-CLI commands for sync scenarios.\n\n\nReleased on 19-Nov-2015.\n\n\n\n\nNote: this is an EAP release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nNew in 2.1.1\n\n\n\n\nFixed regression from 2.1 that broke the \nvp clone\n command (#556).\n\n\nFixed a small bug in \nrestore-site\n command (#555). The bug occurred only on Windows.\n\n\nFixed bug in \nvp clone\n command when a domain didn't match the directory structure and \n--siteurl\n was ignored (#519).\n\n\n\n\nUpgrade notes\n\n\n2.1.1 is upgradable from \n2.1\n. Simply replace the plugin on your server.\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.3.4 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled on the server\n\n\n\n\nSystem requirements for sync / multi-instance workflows:\n\n\n\n\nFor 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "2.1.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.1.1/#211-release-notes", 
            "text": "Fixing a couple of bugs in WP-CLI commands for sync scenarios.  Released on 19-Nov-2015.   Note: this is an EAP release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "2.1.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.1.1/#new-in-211", 
            "text": "Fixed regression from 2.1 that broke the  vp clone  command (#556).  Fixed a small bug in  restore-site  command (#555). The bug occurred only on Windows.  Fixed bug in  vp clone  command when a domain didn't match the directory structure and  --siteurl  was ignored (#519).", 
            "title": "New in 2.1.1"
        }, 
        {
            "location": "/en/release-notes/2.1.1/#upgrade-notes", 
            "text": "2.1.1 is upgradable from  2.1 . Simply replace the plugin on your server.", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/2.1.1/#system-requirements", 
            "text": "General system requirements:   PHP 5.3.4 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later  proc_open()  enabled on the server   System requirements for sync / multi-instance workflows:   For 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.1/", 
            "text": "2.1 Release Notes\n\n\nOur first point release addresses several issues in sync scenarios.\n\n\nReleased on 12-Nov-2015.\n\n\n\n\nNote: this is an EAP release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nAbout point releases\n\n\nWe generally aim to release only major versions (\n2.0\n, \n3.0\n etc.) and their inevitable bugfix releases (\nx.0.1\n, \nx.0.2\n etc.). However, there were things in 2.0 that we wanted to improve before 3.0 and were also bigger than just bug fixes, hence the minor version release.\n\n\nNew in 2.1\n\n\n\n\nWe no longer version-control \nrewrite_rules\n (#521) and \n{taxonomy}_children\n (#541) options as they can be regenerated. This fixes some merge conflict situations and also a performance issue in case of \nrewrite_rules\n.\n\n\nThe \n--name\n parameter of the \nvp clone\n WP-CLI command is now restricted to numbers, letters, hyphens (\n-\n) and underscores (\n_\n) to be as compatible as possible with the derived domain names, DB prefixes etc. (#530)\n\n\nIIS / Windows Server issues were explored and documented. The System Info page now contains a separate section on permissions. (#522)\n\n\nFixed other small fixes:\n\n\nIncorrect message with \n--url\n in 'vp clone' command (#518)\n\n\nCloning doesn't work when domain doesn't match the folder and \n--siteurl\n doesn't help (#519)\n\n\nDelete vp_rest_api_plugin_version after deactivation VersionPress (#520)\n\n\n\"Discard changes\" doesn't work with directories containing untracked files (#523)\n\n\nPossible bug in vp_id query (#524)\n\n\nUpdate definition files and fix clean build (#526)\n\n\nReverting option change leads to warnings (#538)\n\n\n\n\n\n\n\n\nUpgrade notes\n\n\nVersionPress 2.1 is not directly upgradable from 2.0.1 and previous versions, full re-activation is required. The recommended procedure is:\n\n\n\n\nPut the site under maintenance mode\n\n\nDeactivate VersionPress (just deactivate, do not uninstall)\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract VersionPress 2.1 there\n\n\nActivate \n initialize the plugin again\n\n\nDisable maintenance mode\n\n\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.3.4 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled on the server\n\n\n\n\nSystem requirements for sync / multi-instance workflows:\n\n\n\n\nFor 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "2.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.1/#21-release-notes", 
            "text": "Our first point release addresses several issues in sync scenarios.  Released on 12-Nov-2015.   Note: this is an EAP release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "2.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.1/#about-point-releases", 
            "text": "We generally aim to release only major versions ( 2.0 ,  3.0  etc.) and their inevitable bugfix releases ( x.0.1 ,  x.0.2  etc.). However, there were things in 2.0 that we wanted to improve before 3.0 and were also bigger than just bug fixes, hence the minor version release.", 
            "title": "About point releases"
        }, 
        {
            "location": "/en/release-notes/2.1/#new-in-21", 
            "text": "We no longer version-control  rewrite_rules  (#521) and  {taxonomy}_children  (#541) options as they can be regenerated. This fixes some merge conflict situations and also a performance issue in case of  rewrite_rules .  The  --name  parameter of the  vp clone  WP-CLI command is now restricted to numbers, letters, hyphens ( - ) and underscores ( _ ) to be as compatible as possible with the derived domain names, DB prefixes etc. (#530)  IIS / Windows Server issues were explored and documented. The System Info page now contains a separate section on permissions. (#522)  Fixed other small fixes:  Incorrect message with  --url  in 'vp clone' command (#518)  Cloning doesn't work when domain doesn't match the folder and  --siteurl  doesn't help (#519)  Delete vp_rest_api_plugin_version after deactivation VersionPress (#520)  \"Discard changes\" doesn't work with directories containing untracked files (#523)  Possible bug in vp_id query (#524)  Update definition files and fix clean build (#526)  Reverting option change leads to warnings (#538)", 
            "title": "New in 2.1"
        }, 
        {
            "location": "/en/release-notes/2.1/#upgrade-notes", 
            "text": "VersionPress 2.1 is not directly upgradable from 2.0.1 and previous versions, full re-activation is required. The recommended procedure is:   Put the site under maintenance mode  Deactivate VersionPress (just deactivate, do not uninstall)  Delete the contents of  wp-content/plugins/versionpress  and extract VersionPress 2.1 there  Activate   initialize the plugin again  Disable maintenance mode", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/2.1/#system-requirements", 
            "text": "General system requirements:   PHP 5.3.4 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later  proc_open()  enabled on the server   System requirements for sync / multi-instance workflows:   For 2.x, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.0.1/", 
            "text": "2.0.1 Release Notes\n\n\nBugfix release.\n\n\nReleased on 16-Oct-2015.\n\n\n\n\nNote: this is an EAP release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nNew in 2.0.1\n\n\n\n\nFixed a bug that could cause the clone command to manipulate the original database, not the cloned one. Pretty serious but only Windows users could have been affected and only sometimes (the issue was related to the line endings in the \nwp-config.php\n file; we parse them more reliably now).\n\n\nFixed a bug with international characters in the options which caused VersionPress not to synchronize some database tables correctly.\n\n\nA couple of other minor fixes.\n\n\n\n\nUpgrade notes\n\n\n2.0.1 is upgradable from \n2.0\n. Simply replace the plugin on your server.\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.3.4 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled on the server\n\n\n\n\nSystem requirements for sync / multi-instance workflows:\n\n\n\n\nFor 2.0, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "2.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.0.1/#201-release-notes", 
            "text": "Bugfix release.  Released on 16-Oct-2015.   Note: this is an EAP release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "2.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.0.1/#new-in-201", 
            "text": "Fixed a bug that could cause the clone command to manipulate the original database, not the cloned one. Pretty serious but only Windows users could have been affected and only sometimes (the issue was related to the line endings in the  wp-config.php  file; we parse them more reliably now).  Fixed a bug with international characters in the options which caused VersionPress not to synchronize some database tables correctly.  A couple of other minor fixes.", 
            "title": "New in 2.0.1"
        }, 
        {
            "location": "/en/release-notes/2.0.1/#upgrade-notes", 
            "text": "2.0.1 is upgradable from  2.0 . Simply replace the plugin on your server.", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/2.0.1/#system-requirements", 
            "text": "General system requirements:   PHP 5.3.4 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later  proc_open()  enabled on the server   System requirements for sync / multi-instance workflows:   For 2.0, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.0/", 
            "text": "2.0 Release Notes \ud83c\udf78\n\n\nVersionPress 2.0 brings the basics of the sync feature, new GUI stack, resolved db.php dependency and a handful of other things.\n\n\nReleased on 12-Oct-2015, read the \nannouncement blog post\n.\n\n\n\n\nNote: this is an EAP release\n\n\nEarly Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nNew in 2.0\n\n\n\n\n\n\nSynchronization between multiple environments\n a.k.a. \nstaging\n, implemented as a set of WP-CLI commands. They are:\n\n\n\n\nvp clone\n \u2013 creates a new site instance.\n\n\nvp pull\n \u2013 pulls the changes from another clone. Creates a merge commit if the two environments had concurrent changes.\n\n\nvp push\n \u2013 pushes the changes to another clone. (Does not do a merge.)\n\n\n\n\nAlso, these other WP-CLI commands have been added:\n\n\n\n\nvp restore-site\n \u2013 when the only thing you have is a Git repository.\n\n\nvp apply-changes\n \u2013 refreshes database to reflect the current state of a site. Useful e.g. after a conflict has been resolved.\n\n\n\n\nSee the \nSync / Workflows section\n for more and \nthis blog post\n with a walkthrough.\n\n\n\n\n\n\nNew GUI stack\n built on top of technologies like React.js, WP REST API and TypeScript. See the blog post \nVersionPress 2.0: New User Interface\n.\n\n\n\n\nNew GUI features\n, namely:\n\n\nClickable table rows, showing details of every change\n. The panel will first show a quick overview of changes (for example, a list of updated properties) with the option to show a full diff which is a bit technical but displays all the details (for example, the option values).\n\n\nUI for manual commits\n. This is useful in scenarios where VersionPress couldn't commit the change automatically, e.g., after a FTP upload or after a manual change.\n\n\nMerge commits\n are visually marked in the main table.\n\n\nNotification of new commits\n. If new commits are detected, a refresh link is displayed.\n\n\nTimes in the main table refresh automatically\n so they will now display correct time even if you don't refresh the page.\n\n\nOther minor UI updates\n like an inline warning about the need to fully activate VersionPress or the explanation why commits done pre-activation cannot be undone / rolled back to.\n\n\n\n\n\n\nResolved db.php dependency\n. VersionPress no longer requires the \ndb.php\n drop-in to be available, enabling compatibility with various caching, monitoring and other WordPress plugins. See also \nblog post with the details\n.\n\n\nWordPress automatic background updates\n are no longer affected by VersionPress. In v1, if VersionPress was activated, WordPress \nstopped doing background updates\n. v2 maintains auto-updates if they were enabled before VersionPress activation.\n\n\nFixes / updates in automatic change tracking\n. Specifically:\n\n\nThe biggest one are \ntranslations\n which weren't tracked properly in v1.\n\n\nCertain \nbulk changes\n now better report what has changed.\n\n\nWordPress update\n is no longer a \"commit everything\" operation, we try to be more selective about it (as we are with other types of changes). Also, there were rare cases where WP update could have been tracked as other kind of update, e.g., an options update, which was fixed.\n\n\nSome changes via the \nCustomizer\n were not tracked correctly.\n\n\nImproved \nmenu\n change tracking.\n\n\n\n\n\n\n\n\nInternal format update\n:\n\n\n\n\nOptions now use a multi-file storage as other entity types, lowering a chance of merge conflicts.\n\n\nCertain special characters (backslashes, quotes) are stored differently now\n\n\n\n\nThe updates are not huge but mean that VersionPress 2.0 is not upgradable from 1.0 (or beta versions of 2.0) \u2013 see notes on that below.\n\n\n\n\n\n\nNew rollback implementation\n that works across merge commits.\n\n\n\n\nPlugin compatibility is reported live in the plugins list\n. When VersionPress is running, it will add indicators in the main plugins table and in the search/install page, utilizing the white- and black-lists available since \n1.0-rc3\n.\n\n\nMajor performance improvements during the initial activation\n. On some larger test sites, we saw dramatic improvements like the time necessary for the activation dropping down from 130 to 4 seconds. Large sites will always be a challenge when it comes to activation (because all needs to be indexed at once) but at least we now do the indexing as efficiently as possible, or very close to that.\n\n\nCompatibility fixes for WordPress 4.3\n. Relatively minor but we've found and fixed a few issues around favicons and menu updates.\n\n\n\n\nSystem requirements\n\n\nGeneral system requirements:\n\n\n\n\nPHP 5.3.4 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\nproc_open()\n enabled on the server\n\n\n\n\nSystem requirements for sync / multi-instance workflows:\n\n\n\n\nFor 2.0, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.\n\n\n\n\nUpgrade notes\n\n\nVersionPress 2.0 is \nnot\n upgradable from 1.0 and beta versions of 2.0, full re-activation is required. The recommended procedure is:\n\n\n\n\nPut the site under maintenance mode\n\n\nDeactivate VersionPress 1.0 (just deactivate, do not uninstall)\n\n\nDelete the contents of \nwp-content/plugins/versionpress\n and extract VersionPress 2.0 there\n\n\nActivate \n initialize the plugin again\n\n\nDisable maintenance mode\n\n\n\n\nBeta / RC notes\n\n\nThe 2.0 release is undergoing a much shorter release cycle than what we had in 1.0 but still, there will be some differences between betas which this sections documents.\n\n\n2.0-rc\n\n\nReleased on 5 Oct 2015. Main changes:\n\n\n\n\noptions.ini\n split into mutli-file storage\n\n\nNew rollback implementation that works across merge commits\n\n\nWP-CLI commands \nundo\n and \nrollback\n are now done under the maintenance mode\n\n\nFixed WP update action with language other than en_US\n\n\nDB synchronization is run automatically after manual commits\n\n\nOther minor fixes and UI improvements\n\n\n\n\n2.0-beta2\n\n\nReleased on 3 Oct 2015. Just a small fix to the original beta, see below. (This version isn't tagged in Git, it was a quick manual fix.)\n\n\n2.0-beta\n\n\nReleased on 18 Sep 2015. The main missing features are options.ini split and general polish of the WP-CLI commands; other than that, this release closely represents the final 2.0 state.\n\n\nKnown issues:\n\n\n\n\nIn \nadmin/index.php\n on line 22, \njavascriptGui.php\n file is incorrectly referenced as \njavascriptGUI.php\n which causes issues on case sensitive systems.", 
            "title": "2.0 Release Notes"
        }, 
        {
            "location": "/en/release-notes/2.0/#20-release-notes", 
            "text": "VersionPress 2.0 brings the basics of the sync feature, new GUI stack, resolved db.php dependency and a handful of other things.  Released on 12-Oct-2015, read the  announcement blog post .   Note: this is an EAP release  Early Access is a period during which VersionPress is reasonably stable but still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "2.0 Release Notes \ud83c\udf78"
        }, 
        {
            "location": "/en/release-notes/2.0/#new-in-20", 
            "text": "Synchronization between multiple environments  a.k.a.  staging , implemented as a set of WP-CLI commands. They are:   vp clone  \u2013 creates a new site instance.  vp pull  \u2013 pulls the changes from another clone. Creates a merge commit if the two environments had concurrent changes.  vp push  \u2013 pushes the changes to another clone. (Does not do a merge.)   Also, these other WP-CLI commands have been added:   vp restore-site  \u2013 when the only thing you have is a Git repository.  vp apply-changes  \u2013 refreshes database to reflect the current state of a site. Useful e.g. after a conflict has been resolved.   See the  Sync / Workflows section  for more and  this blog post  with a walkthrough.    New GUI stack  built on top of technologies like React.js, WP REST API and TypeScript. See the blog post  VersionPress 2.0: New User Interface .   New GUI features , namely:  Clickable table rows, showing details of every change . The panel will first show a quick overview of changes (for example, a list of updated properties) with the option to show a full diff which is a bit technical but displays all the details (for example, the option values).  UI for manual commits . This is useful in scenarios where VersionPress couldn't commit the change automatically, e.g., after a FTP upload or after a manual change.  Merge commits  are visually marked in the main table.  Notification of new commits . If new commits are detected, a refresh link is displayed.  Times in the main table refresh automatically  so they will now display correct time even if you don't refresh the page.  Other minor UI updates  like an inline warning about the need to fully activate VersionPress or the explanation why commits done pre-activation cannot be undone / rolled back to.    Resolved db.php dependency . VersionPress no longer requires the  db.php  drop-in to be available, enabling compatibility with various caching, monitoring and other WordPress plugins. See also  blog post with the details .  WordPress automatic background updates  are no longer affected by VersionPress. In v1, if VersionPress was activated, WordPress  stopped doing background updates . v2 maintains auto-updates if they were enabled before VersionPress activation.  Fixes / updates in automatic change tracking . Specifically:  The biggest one are  translations  which weren't tracked properly in v1.  Certain  bulk changes  now better report what has changed.  WordPress update  is no longer a \"commit everything\" operation, we try to be more selective about it (as we are with other types of changes). Also, there were rare cases where WP update could have been tracked as other kind of update, e.g., an options update, which was fixed.  Some changes via the  Customizer  were not tracked correctly.  Improved  menu  change tracking.     Internal format update :   Options now use a multi-file storage as other entity types, lowering a chance of merge conflicts.  Certain special characters (backslashes, quotes) are stored differently now   The updates are not huge but mean that VersionPress 2.0 is not upgradable from 1.0 (or beta versions of 2.0) \u2013 see notes on that below.    New rollback implementation  that works across merge commits.   Plugin compatibility is reported live in the plugins list . When VersionPress is running, it will add indicators in the main plugins table and in the search/install page, utilizing the white- and black-lists available since  1.0-rc3 .  Major performance improvements during the initial activation . On some larger test sites, we saw dramatic improvements like the time necessary for the activation dropping down from 130 to 4 seconds. Large sites will always be a challenge when it comes to activation (because all needs to be indexed at once) but at least we now do the indexing as efficiently as possible, or very close to that.  Compatibility fixes for WordPress 4.3 . Relatively minor but we've found and fixed a few issues around favicons and menu updates.", 
            "title": "New in 2.0"
        }, 
        {
            "location": "/en/release-notes/2.0/#system-requirements", 
            "text": "General system requirements:   PHP 5.3.4 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later  proc_open()  enabled on the server   System requirements for sync / multi-instance workflows:   For 2.0, we recommend custom server / VPS as most hosting providers will pose further restrictions on creating site clones.", 
            "title": "System requirements"
        }, 
        {
            "location": "/en/release-notes/2.0/#upgrade-notes", 
            "text": "VersionPress 2.0 is  not  upgradable from 1.0 and beta versions of 2.0, full re-activation is required. The recommended procedure is:   Put the site under maintenance mode  Deactivate VersionPress 1.0 (just deactivate, do not uninstall)  Delete the contents of  wp-content/plugins/versionpress  and extract VersionPress 2.0 there  Activate   initialize the plugin again  Disable maintenance mode", 
            "title": "Upgrade notes"
        }, 
        {
            "location": "/en/release-notes/2.0/#beta-rc-notes", 
            "text": "The 2.0 release is undergoing a much shorter release cycle than what we had in 1.0 but still, there will be some differences between betas which this sections documents.", 
            "title": "Beta / RC notes"
        }, 
        {
            "location": "/en/release-notes/2.0/#20-rc", 
            "text": "Released on 5 Oct 2015. Main changes:   options.ini  split into mutli-file storage  New rollback implementation that works across merge commits  WP-CLI commands  undo  and  rollback  are now done under the maintenance mode  Fixed WP update action with language other than en_US  DB synchronization is run automatically after manual commits  Other minor fixes and UI improvements", 
            "title": "2.0-rc"
        }, 
        {
            "location": "/en/release-notes/2.0/#20-beta2", 
            "text": "Released on 3 Oct 2015. Just a small fix to the original beta, see below. (This version isn't tagged in Git, it was a quick manual fix.)", 
            "title": "2.0-beta2"
        }, 
        {
            "location": "/en/release-notes/2.0/#20-beta", 
            "text": "Released on 18 Sep 2015. The main missing features are options.ini split and general polish of the WP-CLI commands; other than that, this release closely represents the final 2.0 state.  Known issues:   In  admin/index.php  on line 22,  javascriptGui.php  file is incorrectly referenced as  javascriptGUI.php  which causes issues on case sensitive systems.", 
            "title": "2.0-beta"
        }, 
        {
            "location": "/en/release-notes/1.0.1/", 
            "text": "1.0.1 Release Notes\n\n\nBugfix release for \nVersionPress 1.0\n.\n\n\nReleased on 13-May-2015; read the \nannouncement blog post\n.\n\n\n\n\nNote: this is an EAP release\n\n\nEAP releases\n are generally stable but the software is still young, limited in scope and an external backup is recommended at all times.\n\n\n\n\nRelease highlights\n\n\n\n\nBulk changes now display better messages\n. For example, if two posts were moved to trash, 1.0 would output \n\"Post 'abc' moved to trash\"\n while 1.0.1 will show \n\"2 posts moved to trash\"\n. Technically, the bulk changes were already tracked properly in 1.0, just the messages are now better. (VersionPress will display better messages even for commits made by v1.0.)\n\n\nTests for bulk changes added as part of this change. There have been \nquite a few of them\n.\n\n\n\n\n\n\nOther minor change message improvements\n:\n\n\nPostmeta / usermeta change messages no longer use the word \"option\" which was confusing, e.g., \n\"Edited option 'xyz' for post 'abc'\"\n is now \n\"Edited post-meta 'xyz' for post 'abc'\"\n.\n\n\nTerm-taxonomy changes now use specific taxonomies, not a generic \"term\". For example, \n\"Deleted term 'abc'\"\n is now \n\"Deleted category 'abc'\"\n.\n\n\n\n\n\n\nNginx\n has been tested and is now officially supported.\n\n\n.htaccess\n files updated to work on both Apache 2.2 \nand 2.4\n (Apache 2.4 could have caused issues under some circumstances).\n\n\nUploading files in problem reporter now works on PHP 5.3+ (used to be 5.5+ because of the external library used).\n\n\nRequirement checker now distinguishes between a state where Git is not detected at all and when just the version number is wrong.\n\n\nSeveral \nbug fixes\n, two of theme with high severity (fix in INI serialization and term-taxonomy synchronization). Upgrade is greatly recommended.\n\n\n\n\nUsage notes\n\n\nSystem requirements didn't change from 1.0 and are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\n\n\nUpgrade from previous versions\n\n\nUpgrade from 1.0 is supported but is manual at the moment. Please follow these steps:\n\n\n\n\nPut the site in a \nmaintenance mode\n\n\nReplace the \nwp-content/plugins/versionpress\n directory in its entirety\n\n\nCopy \n.htaccess\n / \nweb.config\n templates from \nwp-content/plugins/versionpress/src/Initialization\n into these two locations (don't forget to remove the \".tpl\" part from them):\n\n\nsite_root\n/.git\n\n\nwp-content/vpdb\n\n\n\n\n\n\nDisable the maintenance mode\n\n\n\n\nKnown issues\n\n\nNone at the moment.", 
            "title": "1.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0.1/#101-release-notes", 
            "text": "Bugfix release for  VersionPress 1.0 .  Released on 13-May-2015; read the  announcement blog post .   Note: this is an EAP release  EAP releases  are generally stable but the software is still young, limited in scope and an external backup is recommended at all times.", 
            "title": "1.0.1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0.1/#release-highlights", 
            "text": "Bulk changes now display better messages . For example, if two posts were moved to trash, 1.0 would output  \"Post 'abc' moved to trash\"  while 1.0.1 will show  \"2 posts moved to trash\" . Technically, the bulk changes were already tracked properly in 1.0, just the messages are now better. (VersionPress will display better messages even for commits made by v1.0.)  Tests for bulk changes added as part of this change. There have been  quite a few of them .    Other minor change message improvements :  Postmeta / usermeta change messages no longer use the word \"option\" which was confusing, e.g.,  \"Edited option 'xyz' for post 'abc'\"  is now  \"Edited post-meta 'xyz' for post 'abc'\" .  Term-taxonomy changes now use specific taxonomies, not a generic \"term\". For example,  \"Deleted term 'abc'\"  is now  \"Deleted category 'abc'\" .    Nginx  has been tested and is now officially supported.  .htaccess  files updated to work on both Apache 2.2  and 2.4  (Apache 2.4 could have caused issues under some circumstances).  Uploading files in problem reporter now works on PHP 5.3+ (used to be 5.5+ because of the external library used).  Requirement checker now distinguishes between a state where Git is not detected at all and when just the version number is wrong.  Several  bug fixes , two of theme with high severity (fix in INI serialization and term-taxonomy synchronization). Upgrade is greatly recommended.", 
            "title": "Release highlights"
        }, 
        {
            "location": "/en/release-notes/1.0.1/#usage-notes", 
            "text": "System requirements didn't change from 1.0 and are:   PHP 5.3 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0.1/#upgrade-from-previous-versions", 
            "text": "Upgrade from 1.0 is supported but is manual at the moment. Please follow these steps:   Put the site in a  maintenance mode  Replace the  wp-content/plugins/versionpress  directory in its entirety  Copy  .htaccess  /  web.config  templates from  wp-content/plugins/versionpress/src/Initialization  into these two locations (don't forget to remove the \".tpl\" part from them):  site_root /.git  wp-content/vpdb    Disable the maintenance mode", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0.1/#known-issues", 
            "text": "None at the moment.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0/", 
            "text": "1.0 Release Notes \ud83c\udf78\n\n\nVersionPress 1.0 is the first stable release, focusing on base functionality like automatic change tracking, undo and rollback and so on.\n\n\nReleased on 16-Apr-2015. See the \nannouncement blog post\n or the \nwalkthrough\n.\n\n\n\n\nNote: this is an EAP release\n\n\nEAP releases are generally stable but the software is still young, limited in scope and an external backup is recommended at all times. \nLearn more about EAP\n.\n\n\n\n\nVersionPress 1.0 highlights\n\n\nThis version is a culmination of all the previous alpha, beta and release candidate versions. You can find separate release notes for all of them on the docs site, here is a high-level summary:\n\n\n\n\nThe core versioning functionality implemented\n. VersionPress 1.0 can automatically track actions like post / pages updates, new comments, site setting changes, theme customizations, plugin updates, etc. During this work, new format was developed to represent database changes in a Git-friendly way and the commit messages are quite clever to capture what was the intent of the action. We use this information to present the site changes in the...\n\n\nMain VersionPress table\n. Most of the GUI for v1 is one large table with the site's history and the \"Roll back to this\" and \"Undo this\" links. In v1, this table supports paging and generally displays reasonable change messages but cannot drill into the details of each change and is generally quite static. There is not much else of a GUI \u2013 just the service panel for sending bug reports and the initialization screen.\n\n\nThe Rollback functionality\n: VersionPress can return the site to any of its previous states.\n\n\nThe Undo functionality\n: VersionPress can \nselectively\n undo past changes to the site. For example, if you changed the theme and then created a post, you can revert back to the previous theme while keeping the post. Related to this are necessary \"foreign key\" checks; for example, if you attempted to Undo a creation of post that already has some comments to it, VersionPress will not allow that. We do checks both towards \"child\" entities (like comments for posts) and \"parent\" entities (like user for posts).\n\n\nInternal testing framework\n. Major part of v1 work was spent on implementing an automated test suite that answers a question \"does VersionPress work?\" after every internal change or with new versions of WordPress or Git.\n\n\n\n\nChanges since 1.0-rc3\n\n\nDifferences from 1.0-rc3 are minor but some important issues were addressed:\n\n\n\n\nInitialization will now gracefully fail if there was not enough time to finish it\n. Previously, if the initialization process crashed, the site was left in a maintenance mode and the admin had to deal with it. We now try to prevent that and if the PHP timeout is close, we will gracefully end the initialization process and tell the user about it.\n\n\nFixed bug in \nIniSerializer\n which is a very important component for the internal data structure\n\n\nFixed a few PHP notices and other smaller issues\n\n\n\n\nUsage notes\n\n\nSystem requirements for VersionPress 1.0 are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)\n\n\nGit 1.9 or later\n\n\n\n\nUpgrade from previous versions\n\n\nIt's best to start fresh but the basic functionality should be upgradable from 1.0-rc2+ by replacing the \nwp-content/plugins/versionpress\n folder. Just make sure all the VersionPress files are secured from direct access using .htaccess or similar (fresh installation does that for you).\n\n\nUpgrades from older pre-release versions (1.0-rc1 and older) will not work.\n\n\nKnown issues\n\n\nNone. Until someone finds some.", 
            "title": "1.0 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0/#10-release-notes", 
            "text": "VersionPress 1.0 is the first stable release, focusing on base functionality like automatic change tracking, undo and rollback and so on.  Released on 16-Apr-2015. See the  announcement blog post  or the  walkthrough .   Note: this is an EAP release  EAP releases are generally stable but the software is still young, limited in scope and an external backup is recommended at all times.  Learn more about EAP .", 
            "title": "1.0 Release Notes \ud83c\udf78"
        }, 
        {
            "location": "/en/release-notes/1.0/#versionpress-10-highlights", 
            "text": "This version is a culmination of all the previous alpha, beta and release candidate versions. You can find separate release notes for all of them on the docs site, here is a high-level summary:   The core versioning functionality implemented . VersionPress 1.0 can automatically track actions like post / pages updates, new comments, site setting changes, theme customizations, plugin updates, etc. During this work, new format was developed to represent database changes in a Git-friendly way and the commit messages are quite clever to capture what was the intent of the action. We use this information to present the site changes in the...  Main VersionPress table . Most of the GUI for v1 is one large table with the site's history and the \"Roll back to this\" and \"Undo this\" links. In v1, this table supports paging and generally displays reasonable change messages but cannot drill into the details of each change and is generally quite static. There is not much else of a GUI \u2013 just the service panel for sending bug reports and the initialization screen.  The Rollback functionality : VersionPress can return the site to any of its previous states.  The Undo functionality : VersionPress can  selectively  undo past changes to the site. For example, if you changed the theme and then created a post, you can revert back to the previous theme while keeping the post. Related to this are necessary \"foreign key\" checks; for example, if you attempted to Undo a creation of post that already has some comments to it, VersionPress will not allow that. We do checks both towards \"child\" entities (like comments for posts) and \"parent\" entities (like user for posts).  Internal testing framework . Major part of v1 work was spent on implementing an automated test suite that answers a question \"does VersionPress work?\" after every internal change or with new versions of WordPress or Git.", 
            "title": "VersionPress 1.0 highlights"
        }, 
        {
            "location": "/en/release-notes/1.0/#changes-since-10-rc3", 
            "text": "Differences from 1.0-rc3 are minor but some important issues were addressed:   Initialization will now gracefully fail if there was not enough time to finish it . Previously, if the initialization process crashed, the site was left in a maintenance mode and the admin had to deal with it. We now try to prevent that and if the PHP timeout is close, we will gracefully end the initialization process and tell the user about it.  Fixed bug in  IniSerializer  which is a very important component for the internal data structure  Fixed a few PHP notices and other smaller issues", 
            "title": "Changes since 1.0-rc3"
        }, 
        {
            "location": "/en/release-notes/1.0/#usage-notes", 
            "text": "System requirements for VersionPress 1.0 are:   PHP 5.3 or later  WordPress 4.1 or later (should work on 3.9+ but it's only officially tested on 4.1+)  Git 1.9 or later", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0/#upgrade-from-previous-versions", 
            "text": "It's best to start fresh but the basic functionality should be upgradable from 1.0-rc2+ by replacing the  wp-content/plugins/versionpress  folder. Just make sure all the VersionPress files are secured from direct access using .htaccess or similar (fresh installation does that for you).  Upgrades from older pre-release versions (1.0-rc1 and older) will not work.", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0/#known-issues", 
            "text": "None. Until someone finds some.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/", 
            "text": "1.0-rc3 Release Notes\n\n\nRC3 is the last major preparation for the final 1.0 release \u2013 it is feature complete, reasonably well-tested and stable. The changes are rather small and technical.\n\n\nReleased on 09-Apr-2015; read the \nannouncement blog post\n.\n\n\n\n\nNote: this is a preview release\n\n\nRelease Candidate means that it contains almost all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.\n\n\n\n\nRelease details\n\n\nHighlights of this release are:\n\n\n\n\nBulk actions\n are now fully supported. Most of them worked fine in the previous releases but actions around \nplugins\n (bulk installation / update / deletion) and \nthemes\n (bulk installation / deletion) received fixes / updates.\n\n\nCustom posts types and fields\n confirmed to work correctly. We tested them both manually and through \nACF\n, the popular plugin for custom types/fields management.\n\n\nFinished test suite for v1\n. We now have all \ntypes\n of tests implemented (unit, functional, Selenium-based, WP-CLI-based, around commits, around database changes etc.) and they also cover a significant part of the v1 functionality. We also tested VersionPress on a wider range of operating systems \u2013 Windows and MacOS natively, Linux via Vagrant.\n\n\nPerformance improvements around reverts and meta entities\n. Reverts are generally expensive operations (and will always be) but are much, much faster now.\n\n\nProperly versioned auto-saved drafts\n. VersionPress' behavior around drafts was not entirely in-line with how WordPress works; it is now. There were also some other minor changes to the automatic change tracking but mostly cosmetic (better change messages, for example).\n\n\nPre-revert checks even if JavaScript popup is skipped\n. This is the only user-visible change of the release and basically just displays the pre-revert popup content on its own page if it was skipped for some reason (e.g., disabled JavaScript).\n\n\nWP-CLI actions support\n. We mainly test VersionPress against actions in the admin area and on the public web but WP-CLI is another important \"client\" to support (and we are heavy users of WP-CLI). This version fixed a couple of cases where WP-CLI commands created slightly different commits than the web UI.\n\n\nWP-CLI commands for undo and rollback\n. There are now \nwp vp undo\n and \nwp vp rollback\n commands implemented. We use them internally and they are technically part of the codebase now but we don't have them properly documented yet so it's more of an initial support only.\n\n\n\"Foreign keys\" support inside meta entities\n. WordPress \n-\n VersionPress ID conversion is now performed also for IDs that \"hide\" inside meta entities. For example, featured images for posts do that, but it is relatively rare (fortunately).\n\n\n\"Git not detected\"\n is a common issue on web servers even if it is installed. We now added some more guidelines on how to resolve this on the initialization screen.\n\n\nSome more security hardening\n by default. For instance, direct requests into the Git repository are now properly rejected on Windows.\n\n\nGit version requirement stays on 1.9\n, see below.\n\n\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.9 or later (latest release recommended)\n\n\nGit 1.9 or later\n\n\nNote:\n it is still quite common to encounter Git 1.7 and 1.8 and we investigated during RC3 timeframe whether we could just relax this requirement. However, the answer is no: VersionPress has reproducible issues with Git 1.7 and 1.8 and it is not our priority at the moment to try to work around that. We might return to this in some later version.\n\n\n\n\n\n\n\n\nUpgrade from previous versions\n\n\nIt's best to start fresh but the basic functionality is upgradable from \n1.0-rc2\n by replacing the \nwp-content/plugins/versionpress\n folder (make sure all the VersionPress sites are secured from direct access with fresh installation ensures).\n\n\nUpgrades from older pre-release versions (1.0-rc1 and older) will not work.\n\n\nKnown issues\n\n\nNone. Until someone finds some.", 
            "title": "1.0-rc3 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/#10-rc3-release-notes", 
            "text": "RC3 is the last major preparation for the final 1.0 release \u2013 it is feature complete, reasonably well-tested and stable. The changes are rather small and technical.  Released on 09-Apr-2015; read the  announcement blog post .   Note: this is a preview release  Release Candidate means that it contains almost all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.", 
            "title": "1.0-rc3 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/#release-details", 
            "text": "Highlights of this release are:   Bulk actions  are now fully supported. Most of them worked fine in the previous releases but actions around  plugins  (bulk installation / update / deletion) and  themes  (bulk installation / deletion) received fixes / updates.  Custom posts types and fields  confirmed to work correctly. We tested them both manually and through  ACF , the popular plugin for custom types/fields management.  Finished test suite for v1 . We now have all  types  of tests implemented (unit, functional, Selenium-based, WP-CLI-based, around commits, around database changes etc.) and they also cover a significant part of the v1 functionality. We also tested VersionPress on a wider range of operating systems \u2013 Windows and MacOS natively, Linux via Vagrant.  Performance improvements around reverts and meta entities . Reverts are generally expensive operations (and will always be) but are much, much faster now.  Properly versioned auto-saved drafts . VersionPress' behavior around drafts was not entirely in-line with how WordPress works; it is now. There were also some other minor changes to the automatic change tracking but mostly cosmetic (better change messages, for example).  Pre-revert checks even if JavaScript popup is skipped . This is the only user-visible change of the release and basically just displays the pre-revert popup content on its own page if it was skipped for some reason (e.g., disabled JavaScript).  WP-CLI actions support . We mainly test VersionPress against actions in the admin area and on the public web but WP-CLI is another important \"client\" to support (and we are heavy users of WP-CLI). This version fixed a couple of cases where WP-CLI commands created slightly different commits than the web UI.  WP-CLI commands for undo and rollback . There are now  wp vp undo  and  wp vp rollback  commands implemented. We use them internally and they are technically part of the codebase now but we don't have them properly documented yet so it's more of an initial support only.  \"Foreign keys\" support inside meta entities . WordPress  -  VersionPress ID conversion is now performed also for IDs that \"hide\" inside meta entities. For example, featured images for posts do that, but it is relatively rare (fortunately).  \"Git not detected\"  is a common issue on web servers even if it is installed. We now added some more guidelines on how to resolve this on the initialization screen.  Some more security hardening  by default. For instance, direct requests into the Git repository are now properly rejected on Windows.  Git version requirement stays on 1.9 , see below.", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.9 or later (latest release recommended)  Git 1.9 or later  Note:  it is still quite common to encounter Git 1.7 and 1.8 and we investigated during RC3 timeframe whether we could just relax this requirement. However, the answer is no: VersionPress has reproducible issues with Git 1.7 and 1.8 and it is not our priority at the moment to try to work around that. We might return to this in some later version.", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/#upgrade-from-previous-versions", 
            "text": "It's best to start fresh but the basic functionality is upgradable from  1.0-rc2  by replacing the  wp-content/plugins/versionpress  folder (make sure all the VersionPress sites are secured from direct access with fresh installation ensures).  Upgrades from older pre-release versions (1.0-rc1 and older) will not work.", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0-rc3/#known-issues", 
            "text": "None. Until someone finds some.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/", 
            "text": "1.0-rc2 Release Notes\n\n\nThis release does not contain many user-facing changes but is actually one of the biggest one in terms of internal updates. General polish will come as part of the next RC.\n\n\nReleased on 26-Feb-2015; read the \nannouncement blog post\n.\n\n\n\n\nNote: this is a preview release\n\n\nRelease Candidate means that it contains almost all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.\n\n\n\n\nRelease details\n\n\nHighlights of this release are:\n\n\n\n\n\n\nConfirmation popup before Undo / Rollback\n. This is the only GUI change in this release and we have added it to make it clear that during the EAP period, reverts are not entirely safe operations. Also, during the popup display time the following background check is done:\n\n\n\n\n\n\nPre-revert check for clean working directory\n. When a custom change like manually edited theme file is recognized on the file system, revert is not allowed (could possibly lose user changes).\n\n\n\n\n\n\nTwo-way \"foreign key\" checks before reverts\n. In previous releases we had checks towards \nparent\n entities, for example, when reverting a post deletion, it was checked that the user owning the post still existed. We now also check \nchild\n entities, for example, if the post creation is being reverted, it is now checked that there are no comments to that post (revert would have \"orphaned\" them).\n\n\n\n\n\n\nImproved pre-activation checks\n. One of the biggest source of bug reports in previous releases was when VersionPress was installed into an environment that technically worked but was not really supported. We are continually implementing more checks and these are the new ones in RC2:\n\n\n\n\nThe site is not Multisite\n\n\nThe directories use standard WP layout\n\n\n.gitignore\n must either not exist or contain certain rules\n\n\nWeb server must allow \n.htaccess\n or \nweb.config\n files (this is a \nweak check\n \u2013 the initialization can continue even if this is not fulfilled and it is up to the user to correct that later)\n\n\nWarning about possible timeout is displayed for sites with more than 500 entities\n\n\n\n\n\n\n\n\nSystem info page\n for troubleshooting. From the pre-activation screen there is now a link to the system details page that will list info e.g. about the Git version installed, PHP version, installed WordPress plugins etc.\n\n\n\n\n\n\nCustomization mechanism\n and a \ncustomizable Git binary\n. One of the most common reports we were getting was \"I have Git installed on my server but VersionPress still complains it's missing\". Most often, the reason is that Git is installed for a different user than the web server is run as so it's not in its PATH. The Git binary can now be specified using a \nvpconfig.neon\n file, see \nConfiguration\n.\n\n\n\n\n\n\nInitial support for large sites\n. WordPress installations that contain thousands (or tens or hundreds of thousands) of entities are not a focus for v1 but we still need to make sure that we will be able to support that. So in RC2, we have updated the internal format for storing database entities and have done some initial optimization work on synchronizing entities back to the database. There is more work to come in both RC3 and future updates \u2013 for example, initializing VersionPress will currently time out on a large site and we will have a fix for that.\n\n\nNote that the format change means that \nthere is no upgrade path from RC1 and previous releases to RC2\n. See upgrade instructions below.\n\n\n\n\n\n\nMore standard error handling / logging\n. Up until now VersionPress captured all sorts of errors and even replaced HTTP 500 error page which was useful for debugging but not in line with how WordPress error handling / logging works. That has been removed now.\n\n\n\n\n\n\nWP-CLI script for site recovery\n. More in this area to come.\n\n\n\n\n\n\nFurther investments in testing\n. In RC2, we finally have a test suite that covers many of the high-level scenarios using Selenium tests and some of the core functionality with unit tests. We also have a Vagrant-based environment for cross-platform testing.\n\n\n\n\n\n\nX-VP-Version\n tag in commits\n. In allows future versions of VersionPress see which release created which commit (we have scenarios when this is useful).\n\n\n\n\n\n\nMinor improvements to automatic change tracking\n. For example, options have now implemented priorities so that the more important ones appear closer to the top.\n\n\n\n\n\n\nSome \nimportant internal fixes\n in things like INI serialization etc.\n\n\n\n\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.9 or later (latest release recommended)\n\n\nGit 1.9 or later\n\n\n\n\nUpgrade from previous versions\n\n\nThere is no upgrade path from previous versions, sorry. You have to deactivate VersionPress, upload the new version and fully reactivate again. The site history will be retained in the old format but will not be actionable \u2013 there will be no way to revert to it, etc. This is due to the change of the internal storage format, see above.\n\n\nKnown issues\n\n\n\n\nReverts are slow on sites with many entities. This will be improved in some future update.\n\n\nA couple of minor issues in automatic change tracking are still left and will be fixed in the final 1.0 release.", 
            "title": "1.0-rc2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/#10-rc2-release-notes", 
            "text": "This release does not contain many user-facing changes but is actually one of the biggest one in terms of internal updates. General polish will come as part of the next RC.  Released on 26-Feb-2015; read the  announcement blog post .   Note: this is a preview release  Release Candidate means that it contains almost all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.", 
            "title": "1.0-rc2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/#release-details", 
            "text": "Highlights of this release are:    Confirmation popup before Undo / Rollback . This is the only GUI change in this release and we have added it to make it clear that during the EAP period, reverts are not entirely safe operations. Also, during the popup display time the following background check is done:    Pre-revert check for clean working directory . When a custom change like manually edited theme file is recognized on the file system, revert is not allowed (could possibly lose user changes).    Two-way \"foreign key\" checks before reverts . In previous releases we had checks towards  parent  entities, for example, when reverting a post deletion, it was checked that the user owning the post still existed. We now also check  child  entities, for example, if the post creation is being reverted, it is now checked that there are no comments to that post (revert would have \"orphaned\" them).    Improved pre-activation checks . One of the biggest source of bug reports in previous releases was when VersionPress was installed into an environment that technically worked but was not really supported. We are continually implementing more checks and these are the new ones in RC2:   The site is not Multisite  The directories use standard WP layout  .gitignore  must either not exist or contain certain rules  Web server must allow  .htaccess  or  web.config  files (this is a  weak check  \u2013 the initialization can continue even if this is not fulfilled and it is up to the user to correct that later)  Warning about possible timeout is displayed for sites with more than 500 entities     System info page  for troubleshooting. From the pre-activation screen there is now a link to the system details page that will list info e.g. about the Git version installed, PHP version, installed WordPress plugins etc.    Customization mechanism  and a  customizable Git binary . One of the most common reports we were getting was \"I have Git installed on my server but VersionPress still complains it's missing\". Most often, the reason is that Git is installed for a different user than the web server is run as so it's not in its PATH. The Git binary can now be specified using a  vpconfig.neon  file, see  Configuration .    Initial support for large sites . WordPress installations that contain thousands (or tens or hundreds of thousands) of entities are not a focus for v1 but we still need to make sure that we will be able to support that. So in RC2, we have updated the internal format for storing database entities and have done some initial optimization work on synchronizing entities back to the database. There is more work to come in both RC3 and future updates \u2013 for example, initializing VersionPress will currently time out on a large site and we will have a fix for that.  Note that the format change means that  there is no upgrade path from RC1 and previous releases to RC2 . See upgrade instructions below.    More standard error handling / logging . Up until now VersionPress captured all sorts of errors and even replaced HTTP 500 error page which was useful for debugging but not in line with how WordPress error handling / logging works. That has been removed now.    WP-CLI script for site recovery . More in this area to come.    Further investments in testing . In RC2, we finally have a test suite that covers many of the high-level scenarios using Selenium tests and some of the core functionality with unit tests. We also have a Vagrant-based environment for cross-platform testing.    X-VP-Version  tag in commits . In allows future versions of VersionPress see which release created which commit (we have scenarios when this is useful).    Minor improvements to automatic change tracking . For example, options have now implemented priorities so that the more important ones appear closer to the top.    Some  important internal fixes  in things like INI serialization etc.", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.9 or later (latest release recommended)  Git 1.9 or later", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/#upgrade-from-previous-versions", 
            "text": "There is no upgrade path from previous versions, sorry. You have to deactivate VersionPress, upload the new version and fully reactivate again. The site history will be retained in the old format but will not be actionable \u2013 there will be no way to revert to it, etc. This is due to the change of the internal storage format, see above.", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0-rc2/#known-issues", 
            "text": "Reverts are slow on sites with many entities. This will be improved in some future update.  A couple of minor issues in automatic change tracking are still left and will be fixed in the final 1.0 release.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/", 
            "text": "1.0-rc1 Release Notes\n\n\nPreparing for the 1.0 release, this is the first Release Candidate. The changes compared to 1.0-beta2 are relatively minor.\n\n\nReleased on 15-Jan-2015.\n\n\n\n\nNote: this is a preview release\n\n\nRelease Candidate means that it contains all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.\n\n\n\n\nRelease details\n\n\nHighlights of this release are:\n\n\n\n\nSpam / \"unspam\" comment actions\n.\n\n\nSwitching a theme\n now creates \nsingle commit\n only.\n\n\nMaintenance mode\n is used during some longer-running VersionPress operations. WordPress uses similar technique during e.g. upgrades.\n\n\nInstallation now checks write permission in the whole WordPress installation folder \u2013 it used to check \nwp-content\n only.\n\n\nThe \ncan_compress_scripts\n and \ndashboard_quick_press_last_post_id\n options are now ignored from version control.\n\n\nInternal code reorganization \u2013 PHP 5.3 namespaces used throughout the code.\n\n\nGPLv2 or later license is now properly denoted in plugin metadata\n\n\nVarious bug fixes.\n\n\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.9 or later (latest release recommended)\n\n\nGit 1.9 or later (next release will probably relax this to 1.8)\n\n\nproc_open()\n enabled\n\n\nNo existing \nwp-content/db.php\n file\n\n\n\n\nUpgrade from previous versions\n\n\nFrom 1.0-beta2:\n\nJust replace \nwp-content/plugins/versionpress\n with the new version\n\n\nFrom 1.0-beta1 and older:\n\nIt is recommended that you install VersionPress from scratch.\n\n\nKnown issues\n\n\nA couple of minor issues with e.g. versioning menus or terms / categories are known which are planned to be fixed for the final 1.0 release.", 
            "title": "1.0-rc1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/#10-rc1-release-notes", 
            "text": "Preparing for the 1.0 release, this is the first Release Candidate. The changes compared to 1.0-beta2 are relatively minor.  Released on 15-Jan-2015.   Note: this is a preview release  Release Candidate means that it contains all the planned features for the release and that the stability is quite good. However, not all items on our task list are checked yet so still still qualifies as a preview release.", 
            "title": "1.0-rc1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/#release-details", 
            "text": "Highlights of this release are:   Spam / \"unspam\" comment actions .  Switching a theme  now creates  single commit  only.  Maintenance mode  is used during some longer-running VersionPress operations. WordPress uses similar technique during e.g. upgrades.  Installation now checks write permission in the whole WordPress installation folder \u2013 it used to check  wp-content  only.  The  can_compress_scripts  and  dashboard_quick_press_last_post_id  options are now ignored from version control.  Internal code reorganization \u2013 PHP 5.3 namespaces used throughout the code.  GPLv2 or later license is now properly denoted in plugin metadata  Various bug fixes.", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.9 or later (latest release recommended)  Git 1.9 or later (next release will probably relax this to 1.8)  proc_open()  enabled  No existing  wp-content/db.php  file", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/#upgrade-from-previous-versions", 
            "text": "From 1.0-beta2: \nJust replace  wp-content/plugins/versionpress  with the new version  From 1.0-beta1 and older: \nIt is recommended that you install VersionPress from scratch.", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0-rc1/#known-issues", 
            "text": "A couple of minor issues with e.g. versioning menus or terms / categories are known which are planned to be fixed for the final 1.0 release.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/", 
            "text": "1.0-beta2 Release Notes\n\n\nMultiple scenarios are now better tracked but there have also been some important changes to what is stored in the repository and what is ignored.\n\n\nReleased on 16-Dec-2014.\n\n\n\n\nNote: this is a beta release\n\n\nBeta means approximate feature completeness but bugs might still be there and production use is discouraged. Always have a proper backup solution if you decide to use VersionPress at this stage.\n\n\n\n\nRelease details\n\n\nHighlights of this release are:\n\n\n\n\nNot all files versioned (.gitignore added)\n. Previously, almost all site files (except small exceptions like the VersionPress \n.active\n file) have been versioned but there are exclude filters now. For example, the \nwp-config.php\n file is now ignored. Find the details at \nWhat's not tracked\n.\n\n\nBetter change tracking\n for various bits, e.g.:\n\n\nDrafts\n\n\nFeatured images\n\n\nComment states (pending / approved etc.)\n\n\nTerm renames\n\n\nTheme switching\n\n\nVersionPress activation and deactivation\n\n\netc.\n\n\n\n\n\n\nUndo now checks \"foreign keys\" constraints\n. For example, if you want to undo a post creation and there have been some comments to this post in the meantime, VersionPress will not allow that.\n\n\nUndo and rollback messages\n are now more helpful. They used to be commit hashes only, now they indicates what was reverted or to which date.\n\n\nSecurity review\n - making sure that VersionPress doesn't expose anything that wouldn't be otherwise accessible via the standard WP mechanisms.\n\n\nGit 1.9\n is now minimum required version. Issues were identified by our users on version 1.8 and earlier.\n\n\nBug fixes\n\n\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.8 or later\n\n\nClean installation of WordPress \u2013 you can then try to install some simpler 3\nrd\n party plugins but this whole area is quite volatile at the moment\n\n\nGit 1.9 or later\n (new in this release, issues were identified with 1.8 and older)\n\n\nproc_open()\n enabled\n\n\nNo existing \nwp-content/db.php\n file\n\n\n\n\nUpgrade from previous versions\n\n\nPlease do a clean installation if you can. If you want to upgrade from beta1, create a temp site first, install VersionPress there, copy the generated \n.gitignore\n from there and remove the locations specified in the \n.gitignore\n from your repository manually.\n\n\nKnown issues\n\n\nNo major issues are known at the moment; some smaller ones need to be ironed out before the 1.0 release.", 
            "title": "1.0-beta2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/#10-beta2-release-notes", 
            "text": "Multiple scenarios are now better tracked but there have also been some important changes to what is stored in the repository and what is ignored.  Released on 16-Dec-2014.   Note: this is a beta release  Beta means approximate feature completeness but bugs might still be there and production use is discouraged. Always have a proper backup solution if you decide to use VersionPress at this stage.", 
            "title": "1.0-beta2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/#release-details", 
            "text": "Highlights of this release are:   Not all files versioned (.gitignore added) . Previously, almost all site files (except small exceptions like the VersionPress  .active  file) have been versioned but there are exclude filters now. For example, the  wp-config.php  file is now ignored. Find the details at  What's not tracked .  Better change tracking  for various bits, e.g.:  Drafts  Featured images  Comment states (pending / approved etc.)  Term renames  Theme switching  VersionPress activation and deactivation  etc.    Undo now checks \"foreign keys\" constraints . For example, if you want to undo a post creation and there have been some comments to this post in the meantime, VersionPress will not allow that.  Undo and rollback messages  are now more helpful. They used to be commit hashes only, now they indicates what was reverted or to which date.  Security review  - making sure that VersionPress doesn't expose anything that wouldn't be otherwise accessible via the standard WP mechanisms.  Git 1.9  is now minimum required version. Issues were identified by our users on version 1.8 and earlier.  Bug fixes", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.8 or later  Clean installation of WordPress \u2013 you can then try to install some simpler 3 rd  party plugins but this whole area is quite volatile at the moment  Git 1.9 or later  (new in this release, issues were identified with 1.8 and older)  proc_open()  enabled  No existing  wp-content/db.php  file", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/#upgrade-from-previous-versions", 
            "text": "Please do a clean installation if you can. If you want to upgrade from beta1, create a temp site first, install VersionPress there, copy the generated  .gitignore  from there and remove the locations specified in the  .gitignore  from your repository manually.", 
            "title": "Upgrade from previous versions"
        }, 
        {
            "location": "/en/release-notes/1.0-beta2/#known-issues", 
            "text": "No major issues are known at the moment; some smaller ones need to be ironed out before the 1.0 release.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-beta1/", 
            "text": "1.0-beta1 Release Notes\n\n\nOur first beta. VersionPress is now supposed to work mostly fine for all the scenarios planned for the 1.0 release. Also, next releases will be upgradable from this.\n\n\nReleased on 28-Nov-2014.\n\n\n\n\nNote: this is a beta release\n\n\nBeta means approximate feature completeness but bugs might still be there and production use is discouraged. Always have a proper backup solution if you decide to use VersionPress at this stage.\n\n\n\n\nRelease details\n\n\nHighlights of this release are:\n\n\n\n\nMain table paging\n. When the number of commits is greater than a certain number (currently 25) the main table will offer paging.\n\n\nVersionPress service panel\n above the main table. Currently features \nassisted issue reporting\n that will bundle things like logs, basic environment info etc. in a ZIP file automatically and post it to our servers for further inspection.\n\n\nHelp messages / detailed information in requirements checker\n that is run before VersionPress activation.\n\n\n\"Multi-commit messages\"\n allow VersionPress to track actions that involve multiple physical changes better. For example, trashing a post usually involves also some postmeta changes, might also influence comments etc.; VersionPress now tracks all that properly as part of one logical change.\n\n\nRelated to the previous point are \nchange-info priorities\n \u2013 if there are more changes in one commit, their priorities now influence which message is displayed to the user. For example, VersionPress will rather display \n\"post 'xyz' trashed\"\n than \n\"postmeta 'abc' updated\"\n.\n\n\nCommitting of related changes only\n. This is an important technical change that allows VersionPress to work with custom commits made outside of it (e.g., on command line). VersionPress now knows which files should be committed for various detected changes, so for instance if a post was updated changed only the related change will be committed and all else will be ignored. Previously, if you had e.g. your theme files edited, the post change commit would take these changes with it.\n\n\nImproved versioning for a couple of things\n, for example drafts, postmeta, terms etc.\n\n\nPhysical commit messages\n now use more useful / readable format so for instance working with the repository on the command line is now more pleasant.\n\n\nFuture-proofing of the sync functionality\n (team work, multiple environments etc.). Though the full functionality will only be part of 2.0, we needed to do some ground work in 1.0 so that all works fine for older commits.\n\n\nChanged location of the internal db folder\n so that it better supports future VersionPress updates. This means that there is no direct upgrade path from 1.0-alpha3.\n\n\nNew filesystem library\n which should bring better VersionPress support in various environments / XAMP stacks.\n\n\nSettled on \nPHP 5.3 as the minimum required version\n. This helps development on various levels, e.g., we could use the filesystem library mentioned above which is PHP 5.3+ only, as many current libraries are.\n\n\nFixed a lot of bugs\n found in alpha3.\n\n\nImproved the docs site with features like navigation to prev/next topic, updated HTML \ntitle\n of the doc articles etc.\n\n\n\n\nUsage notes\n\n\n-Note: there is no upgrade path from 1.0-alpha3 as noted above. Please install from scratch.*\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.8 or later\n\n\nClean installation of WordPress \u2013 you can then try to install some simpler 3\nrd\n party plugins but this whole area is quite volatile at the moment\n\n\nGit 1.7 or later (earlier versions might work but are not tested)\n\n\nproc_open()\n enabled\n\n\nNo existing \nwp-content/db.php\n file\n\n\n\n\nKnown issues\n\n\n\n\nSome comment changes (pending, approved states etc.) are not yet tracker properly\n\n\nPostmeta sometimes buggy\n\n\nUI not very polished", 
            "title": "1.0-beta1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta1/#10-beta1-release-notes", 
            "text": "Our first beta. VersionPress is now supposed to work mostly fine for all the scenarios planned for the 1.0 release. Also, next releases will be upgradable from this.  Released on 28-Nov-2014.   Note: this is a beta release  Beta means approximate feature completeness but bugs might still be there and production use is discouraged. Always have a proper backup solution if you decide to use VersionPress at this stage.", 
            "title": "1.0-beta1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta1/#release-details", 
            "text": "Highlights of this release are:   Main table paging . When the number of commits is greater than a certain number (currently 25) the main table will offer paging.  VersionPress service panel  above the main table. Currently features  assisted issue reporting  that will bundle things like logs, basic environment info etc. in a ZIP file automatically and post it to our servers for further inspection.  Help messages / detailed information in requirements checker  that is run before VersionPress activation.  \"Multi-commit messages\"  allow VersionPress to track actions that involve multiple physical changes better. For example, trashing a post usually involves also some postmeta changes, might also influence comments etc.; VersionPress now tracks all that properly as part of one logical change.  Related to the previous point are  change-info priorities  \u2013 if there are more changes in one commit, their priorities now influence which message is displayed to the user. For example, VersionPress will rather display  \"post 'xyz' trashed\"  than  \"postmeta 'abc' updated\" .  Committing of related changes only . This is an important technical change that allows VersionPress to work with custom commits made outside of it (e.g., on command line). VersionPress now knows which files should be committed for various detected changes, so for instance if a post was updated changed only the related change will be committed and all else will be ignored. Previously, if you had e.g. your theme files edited, the post change commit would take these changes with it.  Improved versioning for a couple of things , for example drafts, postmeta, terms etc.  Physical commit messages  now use more useful / readable format so for instance working with the repository on the command line is now more pleasant.  Future-proofing of the sync functionality  (team work, multiple environments etc.). Though the full functionality will only be part of 2.0, we needed to do some ground work in 1.0 so that all works fine for older commits.  Changed location of the internal db folder  so that it better supports future VersionPress updates. This means that there is no direct upgrade path from 1.0-alpha3.  New filesystem library  which should bring better VersionPress support in various environments / XAMP stacks.  Settled on  PHP 5.3 as the minimum required version . This helps development on various levels, e.g., we could use the filesystem library mentioned above which is PHP 5.3+ only, as many current libraries are.  Fixed a lot of bugs  found in alpha3.  Improved the docs site with features like navigation to prev/next topic, updated HTML  title  of the doc articles etc.", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-beta1/#usage-notes", 
            "text": "-Note: there is no upgrade path from 1.0-alpha3 as noted above. Please install from scratch.*  System requirements for this release are:   PHP 5.3 or later  WordPress 3.8 or later  Clean installation of WordPress \u2013 you can then try to install some simpler 3 rd  party plugins but this whole area is quite volatile at the moment  Git 1.7 or later (earlier versions might work but are not tested)  proc_open()  enabled  No existing  wp-content/db.php  file", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-beta1/#known-issues", 
            "text": "Some comment changes (pending, approved states etc.) are not yet tracker properly  Postmeta sometimes buggy  UI not very polished", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha3/", 
            "text": "1.0-alpha3 Release Notes\n\n\nAdding proper support for some of the core features like theme versioning, manual edits via web-based editor etc. Also, it has been decided during this release that the sync functionality will be pushed for v2 of the product which should make this third alpha the last one - next scheduled release is beta1.\n\n\nReleased on 30-Sep-2014.\n\n\n\n\nWarning: This is an alpha release\n\n\nAlpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.\n\n\n\n\nRelease details\n\n\nHighlights of the release are:\n\n\n\n\nTheme updates tracked properly\n. VersionPress now understands what theme changed, what kind of change was done to it etc. which means that all the change messages are much more useful.\n\n\nPlugin uninstalls tracked\n. They were missed by VersionPress previously.\n\n\nChanged done by file editor in the admin area tracked\n. Dtto.\n\n\nVersionPress uninstallation keeps the Git repo in a backup location now\n. We changed our approach to this a couple of times already and hopefully this is the last one. The issue is that plugin uninstallation should remove everything that the plugin ever created but on the other hand, Git repo contains useful data and it could even be created by the user before VersionPress was installed (we have no good way to detect this). So as a middle ground solution, we move the Git repo to a backup solution now for where it can be easily restored, downloaded or removed.\n\n\nRequirementsChecker checks for the absence of \ndb.php\n. The current version of VersionPress only works in environments that doesn't have any custom \nwp-content/db.php\n yet.\n\n\nOther minor changes\n to e.g. get rid of some unhelpful commits.\n\n\n\n\nUsage notes\n\n\nNote: we've lowered the required Git version to 1.7 as it should work just fine but we're actively testing VersionPress only on 1.9+. The db.php dependency has also been documented and added.\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.8 or later\n\n\nClean installation of WordPress\n  (you can then try to install some simpler 3\nrd\n party plugins but this whole area is quite volatile at the moment)\n\n\nGit 1.7 or later (earlier versions might work but are not tested)\n\n\nproc_open()\n enabled\n\n\nNo existing \nwp-content/db.php\n file\n\n\n\n\nKnown issues\n\n\n\n\nSome theme customizations create two commits instead of one", 
            "title": "1.0-alpha3 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha3/#10-alpha3-release-notes", 
            "text": "Adding proper support for some of the core features like theme versioning, manual edits via web-based editor etc. Also, it has been decided during this release that the sync functionality will be pushed for v2 of the product which should make this third alpha the last one - next scheduled release is beta1.  Released on 30-Sep-2014.   Warning: This is an alpha release  Alpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.", 
            "title": "1.0-alpha3 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha3/#release-details", 
            "text": "Highlights of the release are:   Theme updates tracked properly . VersionPress now understands what theme changed, what kind of change was done to it etc. which means that all the change messages are much more useful.  Plugin uninstalls tracked . They were missed by VersionPress previously.  Changed done by file editor in the admin area tracked . Dtto.  VersionPress uninstallation keeps the Git repo in a backup location now . We changed our approach to this a couple of times already and hopefully this is the last one. The issue is that plugin uninstallation should remove everything that the plugin ever created but on the other hand, Git repo contains useful data and it could even be created by the user before VersionPress was installed (we have no good way to detect this). So as a middle ground solution, we move the Git repo to a backup solution now for where it can be easily restored, downloaded or removed.  RequirementsChecker checks for the absence of  db.php . The current version of VersionPress only works in environments that doesn't have any custom  wp-content/db.php  yet.  Other minor changes  to e.g. get rid of some unhelpful commits.", 
            "title": "Release details"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha3/#usage-notes", 
            "text": "Note: we've lowered the required Git version to 1.7 as it should work just fine but we're actively testing VersionPress only on 1.9+. The db.php dependency has also been documented and added.  System requirements for this release are:   PHP 5.3 or later  WordPress 3.8 or later  Clean installation of WordPress   (you can then try to install some simpler 3 rd  party plugins but this whole area is quite volatile at the moment)  Git 1.7 or later (earlier versions might work but are not tested)  proc_open()  enabled  No existing  wp-content/db.php  file", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha3/#known-issues", 
            "text": "Some theme customizations create two commits instead of one", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha2/", 
            "text": "1.0-alpha2 Release Notes\n\n\nQuickly following alpha1 to add support for some development stacks on Mac OS.\n\n\nReleased on 04-Sep-2014.\n\n\n\n\nWarning: This is an alpha release\n\n\nAlpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.\n\n\n\n\nRelease overview\n\n\nOur alpha users on Mac OS reported a bug in DesktopServer, a popular MAMP stack, that this release fixes. It adds very little on top of that.\n\n\nHighlights of the release are:\n\n\n\n\nDesktopServer on Mac OS and other popular MAMP stacks supported\n. There is a bug in some of the favorite development stacks built on XAMPP on Mac OS. We added a workaround that allows VersionPress to run on such stacks until they fix the bug themselves.\n\n\nTable prefix other than wp_ supported\n. Our code was prepared for custom prefixes from the beginning but we forgot one instance in 1.0-alpha1 where the \nwp_\n was hardcoded.\n\n\nOther small fixes and improvements\n, e.g. an update to the alpha warning in the header (does not use problematic WP thickbox any more but rather a Bootstrap-like popover). Nothing major.\n\n\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.8 or later\n\n\nClean installation of WordPress\n  (you can then try to install some simpler 3\nrd\n party plugins but this whole area is quite volatile at the moment)\n\n\nGit 1.9 or later (earlier versions might work but are not tested)\n\n\nproc_open()\n enabled\n\n\n\n\nKnown issues\n\n\nSame as in \n1.0-alpha1\n apart from the fixes described above.", 
            "title": "1.0-alpha2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha2/#10-alpha2-release-notes", 
            "text": "Quickly following alpha1 to add support for some development stacks on Mac OS.  Released on 04-Sep-2014.   Warning: This is an alpha release  Alpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.", 
            "title": "1.0-alpha2 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha2/#release-overview", 
            "text": "Our alpha users on Mac OS reported a bug in DesktopServer, a popular MAMP stack, that this release fixes. It adds very little on top of that.  Highlights of the release are:   DesktopServer on Mac OS and other popular MAMP stacks supported . There is a bug in some of the favorite development stacks built on XAMPP on Mac OS. We added a workaround that allows VersionPress to run on such stacks until they fix the bug themselves.  Table prefix other than wp_ supported . Our code was prepared for custom prefixes from the beginning but we forgot one instance in 1.0-alpha1 where the  wp_  was hardcoded.  Other small fixes and improvements , e.g. an update to the alpha warning in the header (does not use problematic WP thickbox any more but rather a Bootstrap-like popover). Nothing major.", 
            "title": "Release overview"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha2/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.8 or later  Clean installation of WordPress   (you can then try to install some simpler 3 rd  party plugins but this whole area is quite volatile at the moment)  Git 1.9 or later (earlier versions might work but are not tested)  proc_open()  enabled", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha2/#known-issues", 
            "text": "Same as in  1.0-alpha1  apart from the fixes described above.", 
            "title": "Known issues"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha1/", 
            "text": "1.0-alpha1 Release Notes\n\n\nThis is the first non-internal release to our early access backers. It is the first alpha so we are neither feature complete nor stable yet but the core functionality has been implemented and can be previewed on a fresh WordPress 3.8+ installation.\n\n\nReleased on 27-Aug-2014.\n\n\n\n\nWarning: This is an alpha release\n\n\nAlpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.\n\n\n\n\nRelease overview\n\n\nIn this release we focused on re-implementing our original quick-n-dirty prototype code to something that we'll be able to maintain in the long term. For example, the Git commit messages now have a carefully designed structure so that we can support localization in the future etc.\n\n\nHere are some of the highlights of this release:\n\n\n\n\nThe core versioning functionality implemented\n. VersionPress is now able to properly track most of the admin and non-admin actions like post / pages updates, new comments, site settings changes, etc. We've stabilized the format used for representing the database entities on the disk and the commit message format that is used to record changes in the internal Git repository and later draw the change info messages in the UI.\n\n\nThe Undo functionality\n: VersionPress can now selectively undo past changes to the site. It is beta-quality at the moment \u2013 works most of the time but is not 100% stable yet.\n\n\nThe Rollback functionality\n: VersionPress can return the site to any previous state. Similarly to the Undo functionality, we consider this feature to be beta-quality in this release.\n\n\nInstallation and uninstallation workflows\n: as VersionPress is quite an involved plugin we tried to design the installation and uninstallation workflows so that they are intuitive. For example, the standard \"Plugin installed\" message was amended to include a link to the VersionPress activation page.\n\n\nVersionPress admin screen\n created. Basically just a single table now.\n\n\n\n\nApart from these public features we have also done some important work on our internal development process. For example, we now have an automated testing workflow that utilizes WP-CLI, PHPUnit and Selenium, we have a Markdown-based system for user documentation etc. All this is necessary should our future builds be high-quality.\n\n\nUsage notes\n\n\nSystem requirements for this release are:\n\n\n\n\nPHP 5.3 or later\n\n\nWordPress 3.8 or later \nwith the default \nwp_\n table name prefix\n (because of a bug in the current alpha, see the Known issues section)\n\n\nClean installation of WordPress\n  (you can then try to install some simpler 3\nrd\n party plugins but this whole area is quite volatile at the moment)\n\n\nGit 1.9 or later (earlier versions might work but are not tested)\n\n\nproc_open()\n enabled\n\n\n\n\nKnown issues\n\n\nIn our tests this alpha works in about 80-90% of cases we throw at it but the rest 10-20% is still quite a lot and you will likely encounter some kind of issue rather soon. Specifically, this has been typically problematic in our tests:\n\n\n\n\nUndo and rollback only work with the default table prefix \nwp_\n\n\nThemes are not yet tracked as they should. VersionPress will currently create some commits for them but the messages are not very nice, sometimes there are multiple commits for a single logical change etc.\n\n\nPlugin updates sometimes do not report the name of the plugin correctly\n\n\nBulk plugin updates are not tested at all\n\n\nIf a post is updated twice (each time in a different way) the first change will not be able to be undone because of the merge conflict on the date modified field (most other entity types don't have this problem).\n\n\nThe \n.git\n folder in the root of the site is removed even if it wasn't created by VersionPress\n\n\nThe main table doesn't support paging yet so it will be limited to a relatively small number of commits\n\n\nIf you deactivate VersionPress there will be no way to reactivate it and still support the Undo and Rollback operations on the older commits.", 
            "title": "1.0-alpha1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha1/#10-alpha1-release-notes", 
            "text": "This is the first non-internal release to our early access backers. It is the first alpha so we are neither feature complete nor stable yet but the core functionality has been implemented and can be previewed on a fresh WordPress 3.8+ installation.  Released on 27-Aug-2014.   Warning: This is an alpha release  Alpha releases are strictly for testing purposes only, may break your site, destroy your data or the whole planet. Never use in production, with production data or with an existing Git repository.", 
            "title": "1.0-alpha1 Release Notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha1/#release-overview", 
            "text": "In this release we focused on re-implementing our original quick-n-dirty prototype code to something that we'll be able to maintain in the long term. For example, the Git commit messages now have a carefully designed structure so that we can support localization in the future etc.  Here are some of the highlights of this release:   The core versioning functionality implemented . VersionPress is now able to properly track most of the admin and non-admin actions like post / pages updates, new comments, site settings changes, etc. We've stabilized the format used for representing the database entities on the disk and the commit message format that is used to record changes in the internal Git repository and later draw the change info messages in the UI.  The Undo functionality : VersionPress can now selectively undo past changes to the site. It is beta-quality at the moment \u2013 works most of the time but is not 100% stable yet.  The Rollback functionality : VersionPress can return the site to any previous state. Similarly to the Undo functionality, we consider this feature to be beta-quality in this release.  Installation and uninstallation workflows : as VersionPress is quite an involved plugin we tried to design the installation and uninstallation workflows so that they are intuitive. For example, the standard \"Plugin installed\" message was amended to include a link to the VersionPress activation page.  VersionPress admin screen  created. Basically just a single table now.   Apart from these public features we have also done some important work on our internal development process. For example, we now have an automated testing workflow that utilizes WP-CLI, PHPUnit and Selenium, we have a Markdown-based system for user documentation etc. All this is necessary should our future builds be high-quality.", 
            "title": "Release overview"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha1/#usage-notes", 
            "text": "System requirements for this release are:   PHP 5.3 or later  WordPress 3.8 or later  with the default  wp_  table name prefix  (because of a bug in the current alpha, see the Known issues section)  Clean installation of WordPress   (you can then try to install some simpler 3 rd  party plugins but this whole area is quite volatile at the moment)  Git 1.9 or later (earlier versions might work but are not tested)  proc_open()  enabled", 
            "title": "Usage notes"
        }, 
        {
            "location": "/en/release-notes/1.0-alpha1/#known-issues", 
            "text": "In our tests this alpha works in about 80-90% of cases we throw at it but the rest 10-20% is still quite a lot and you will likely encounter some kind of issue rather soon. Specifically, this has been typically problematic in our tests:   Undo and rollback only work with the default table prefix  wp_  Themes are not yet tracked as they should. VersionPress will currently create some commits for them but the messages are not very nice, sometimes there are multiple commits for a single logical change etc.  Plugin updates sometimes do not report the name of the plugin correctly  Bulk plugin updates are not tested at all  If a post is updated twice (each time in a different way) the first change will not be able to be undone because of the merge conflict on the date modified field (most other entity types don't have this problem).  The  .git  folder in the root of the site is removed even if it wasn't created by VersionPress  The main table doesn't support paging yet so it will be limited to a relatively small number of commits  If you deactivate VersionPress there will be no way to reactivate it and still support the Undo and Rollback operations on the older commits.", 
            "title": "Known issues"
        }
    ]
}